Open∇FOAM
オープンソースCFDツールボックス
ユーザガイド和訳
Version 1.7.1
2010 年 11 月 24 日
OpenFOAM ユーザー会
一般社団法人 オープン CAE 学会
U-2
Copyright © 2006, 2007, 2008, 2009, 2010 一般社団法人 オープン CAE 学会
このユーザガイド和訳は，以下の皆様のご協力により作成され，一般社団法人 オープ
ン CAE 学会の責任のもとで公開しております．本書に関するご意見等がございましたら，
オープン CAE 学会事務局 (oﬃce@opencae.jp) までご連絡ください．
企画 今野 雅（オープン CAE 学会 副会長）
和訳主要メンバー
• mixi『OpenFOAM』コミュニティ参加者の皆様
• 東京大学 大学院工学系研究科 建築学専攻 坂本雄三研究室 学生の皆様
LATEX 化 石津 陽平（オープン CAE 学会 正会員）
下記に示した英語版原文の著作権表示に従い，GNU Free Documentation License のバー
ジョン 1.2 に基づいて，本和訳文書の複製・配布・改変が許可されています．
次ページ以降に GNU Free Documentation License を掲載します．
OpenFOAM ユーザー会
一般社団法人 オープン CAE 学会
Typeset in pLATEX.
原文著作権表示
Copyright © 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 OpenCFD
Limited.
Permission is granted to copy, distribute and/or modify this document under the terms
of the GNU Free Documentation License, Version 1.2 published by the Free Software
Foundation; with no Invariant Sections, no Back-Cover Texts and one Front-Cover Text:
“Available free from openfoam.org.” A copy of the license is included in the section
entitled “GNU Free Documentation License”.
This document is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.
Open∇FOAM-1.7.1
U-3
GNU Free Documentation License
Version 1.2, November 2002
Copyright © 2000, 2001, 2002 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
Everyone is permitted to copy and distribute verbatim copies of this license document,
but changing it is not allowed.
Preamble
The purpose of this License is to make a manual, textbook, or other functional and
useful document “free” in the sense of freedom: to assure everyone the eﬀective freedom
to copy and redistribute it, with or without modifying it, either commercially or non-
commercially. Secondarily, this License preserves for the author and publisher a way to
get credit for their work, while not being considered responsible for modiﬁcations made
by others.
This License is a kind of “copyleft”, which means that derivative works of the document
must themselves be free in the same sense. It complements the GNU General Public
License, which is a copyleft license designed for free software.
We have designed this License in order to use it for manuals for free software, be-
cause free software needs free documentation: a free program should come with manuals
providing the same freedoms that the software does. But this License is not limited to
software manuals; it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book. We recommend this License principally for
works whose purpose is instruction or reference.
1. APPLICABILITY AND DEFINITIONS
This License applies to any manual or other work, in any medium, that contains a
notice placed by the copyright holder saying it can be distributed under the terms of this
License. Such a notice grants a world-wide, royalty-free license, unlimited in duration,
to use that work under the conditions stated herein. The “Document”, below, refers
to any such manual or work. Any member of the public is a licensee, and is addressed
as “you”. You accept the license if you copy, modify or distribute the work in a way
requiring permission under copyright law.
A “Modiﬁed Version” of the Document means any work containing the Document
or a portion of it, either copied verbatim, or with modiﬁcations and/or translated into
another language.
A “Secondary Section” is a named appendix or a front-matter section of the Doc-
ument that deals exclusively with the relationship of the publishers or authors of the
Document to the Document’s overall subject (or to related matters) and contains noth-
Open∇FOAM-1.7.1
U-4 第 0 章 GNU Free Documentation License
ing that could fall directly within that overall subject. (Thus, if the Document is in part
a textbook of mathematics, a Secondary Section may not explain any mathematics.) The
relationship could be a matter of historical connection with the subject or with related
matters, or of legal, commercial, philosophical, ethical or political position regarding
them.
The “Invariant Sections” are certain Secondary Sections whose titles are designated,
as being those of Invariant Sections, in the notice that says that the Document is released
under this License. If a section does not ﬁt the above deﬁnition of Secondary then it is
not allowed to be designated as Invariant. The Document may contain zero Invariant
Sections. If the Document does not identify any Invariant Sections then there are none.
The “Cover Texts” are certain short passages of text that are listed, as Front-Cover
Texts or Back-Cover Texts, in the notice that says that the Document is released under
this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may
be at most 25 words.
A “Transparent” copy of the Document means a machine-readable copy, represented
in a format whose speciﬁcation is available to the general public, that is suitable for
revising the document straightforwardly with generic text editors or (for images com-
posed of pixels) generic paint programs or (for drawings) some widely available drawing
editor, and that is suitable for input to text formatters or for automatic translation to
a variety of formats suitable for input to text formatters. A copy made in an other-
wise Transparent ﬁle format whose markup, or absence of markup, has been arranged to
thwart or discourage subsequent modiﬁcation by readers is not Transparent. An image
format is not Transparent if used for any substantial amount of text. A copy that is not
“Transparent” is called “Opaque”.
Examples of suitable formats for Transparent copies include plain ASCII without
markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly
available DTD, and standard-conforming simple HTML, PostScript or PDF designed
for human modiﬁcation. Examples of transparent image formats include PNG, XCF
and JPG. Opaque formats include proprietary formats that can be read and edited only
by proprietary word processors, SGML or XML for which the DTD and/or processing
tools are not generally available, and the machinegenerated HTML, PostScript or PDF
produced by some word processors for output purposes only.
The “Title Page” means, for a printed book, the title page itself, plus such following
pages as are needed to hold, legibly, the material this License requires to appear in the
title page. For works in formats which do not have any title page as such, “Title Page”
means the text near the most prominent appearance of the work’s title, preceding the
beginning of the body of the text.
A section “Entitled XYZ” means a named subunit of the Document whose title either
is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in
another language. (Here XYZ stands for a speciﬁc section name mentioned below, such
as “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To
Open∇FOAM-1.7.1
2 VERBATIM COPYING U-5
“Preserve the Title” of such a section when you modify the Document means that it
remains a section “Entitled XYZ” according to this deﬁnition.
The Document may include Warranty Disclaimers next to the notice which states that
this License applies to the Document. These Warranty Disclaimers are considered to be
included by reference in this License, but only as regards disclaiming warranties: any
other implication that these Warranty Disclaimers may have is void and has no eﬀect on
the meaning of this License.
2. VERBATIM COPYING
You may copy and distribute the Document in any medium, either commercially or
noncommercially, provided that this License, the copyright notices, and the license notice
saying this License applies to the Document are reproduced in all copies, and that you
add no other conditions whatsoever to those of this License. You may not use technical
measures to obstruct or control the reading or further copying of the copies you make
or distribute. However, you may accept compensation in exchange for copies. If you
distribute a large enough number of copies you must also follow the conditions in section
3.
You may also lend copies, under the same conditions stated above, and you may pub-
licly display copies.
3. COPYING IN QUANTITY
If you publish printed copies (or copies in media that commonly have printed covers)
of the Document, numbering more than 100, and the Document’s license notice requires
Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all
these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the
back cover. Both covers must also clearly and legibly identify you as the publisher of
these copies. The front cover must present the full title with all words of the title equally
prominent and visible. You may add other material on the covers in addition. Copying
with changes limited to the covers, as long as they preserve the title of the Document
and satisfy these conditions, can be treated as verbatim copying in other respects.
If the required texts for either cover are too voluminous to ﬁt legibly, you should put
the ﬁrst ones listed (as many as ﬁt reasonably) on the actual cover, and continue the rest
onto adjacent pages.
If you publish or distribute Opaque copies of the Document numbering more than 100,
you must either include a machine-readable Transparent copy along with each Opaque
copy, or state in or with each Opaque copy a computer-network location from which
the general network-using public has access to download using public-standard network
protocols a complete Transparent copy of the Document, free of added material. If you use
the latter option, you must take reasonably prudent steps, when you begin distribution
of Opaque copies in quantity, to ensure that this Transparent copy will remain thus
Open∇FOAM-1.7.1
U-6 第 0 章 GNU Free Documentation License
accessible at the stated location until at least one year after the last time you distribute
an Opaque copy (directly or through your agents or retailers) of that edition to the public.
It is requested, but not required, that you contact the authors of the Document well
before redistributing any large number of copies, to give them a chance to provide you
with an updated version of the Document.
4. MODIFICATIONS
You may copy and distribute a Modiﬁed Version of the Document under the conditions
of sections 2 and 3 above, provided that you release the Modiﬁed Version under precisely
this License, with the Modiﬁed Version ﬁlling the role of the Document, thus licensing
distribution and modiﬁcation of the Modiﬁed Version to whoever possesses a copy of it.
In addition, you must do these things in the Modiﬁed Version:
A. Use in the Title Page (and on the covers, if any) a title distinct from that of the
Document, and from those of previous versions (which should, if there were any,
be listed in the History section of the Document). You may use the same title as
a previous version if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities responsible for
authorship of the modiﬁcations in the Modiﬁed Version, together with at least
ﬁve of the principal authors of the Document (all of its principal authors, if it has
fewer than ﬁve), unless they release you from this requirement.
C. State on the Title page the name of the publisher of the Modiﬁed Version, as the
publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modiﬁcations adjacent to the other
copyright notices.
F. Include, immediately after the copyright notices, a license notice giving the public
permission to use the Modiﬁed Version under the terms of this License, in the form
shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections and required Cover
Texts given in the Document’s license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled “History”, Preserve its Title, and add to it an item
stating at least the title, year, new authors, and publisher of the Modiﬁed Version
as given on the Title Page. If there is no section Entitled “History” in the Docu-
ment, create one stating the title, year, authors, and publisher of the Document
as given on its Title Page, then add an item describing the Modiﬁed Version as
stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for public access to
a Transparent copy of the Document, and likewise the network locations given in
the Document for previous versions it was based on. These may be placed in the
Open∇FOAM-1.7.1
5 COMBINING DOCUMENTS U-7
“History” section. You may omit a network location for a work that was published
at least four years before the Document itself, or if the original publisher of the
version it refers to gives permission.
K. For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title
of the section, and preserve in the section all the substance and tone of each of the
contributor acknowledgements and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document, unaltered in their text and
in their titles. Section numbers or the equivalent are not considered part of the
section titles.
M. Delete any section Entitled “Endorsements”. Such a section may not be included
in the Modiﬁed Version.
N. Do not retitle any existing section to be Entitled “Endorsements” or to conﬂict in
title with any Invariant Section.
O. Preserve any Warranty Disclaimers.
If the Modiﬁed Version includes new front-matter sections or appendices that qualify
as Secondary Sections and contain no material copied from the Document, you may at
your option designate some or all of these sections as invariant. To do this, add their
titles to the list of Invariant Sections in the Modiﬁed Version’s license notice. These titles
must be distinct from any other section titles.
You may add a section Entitled “Endorsements”, provided it contains nothing but
endorsements of your Modiﬁed Version by various parties—for example, statements of
peer review or that the text has been approved by an organization as the authoritative
deﬁnition of a standard.
You may add a passage of up to ﬁve words as a Front-Cover Text, and a passage of up
to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modiﬁed
Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be
added by (or through arrangements made by) any one entity. If the Document already
includes a cover text for the same cover, previously added by you or by arrangement
made by the same entity you are acting on behalf of, you may not add another; but you
may replace the old one, on explicit permission from the previous publisher that added
the old one.
The author(s) and publisher(s) of the Document do not by this License give permission
to use their names for publicity for or to assert or imply endorsement of any Modiﬁed
Version.
5. COMBINING DOCUMENTS
You may combine the Document with other documents released under this License,
under the terms deﬁned in section 4 above for modiﬁed versions, provided that you
include in the combination all of the Invariant Sections of all of the original documents,
unmodiﬁed, and list them all as Invariant Sections of your combined work in its license
Open∇FOAM-1.7.1
U-8 第 0 章 GNU Free Documentation License
notice, and that you preserve all their Warranty Disclaimers.
The combined work need only contain one copy of this License, and multiple identical
Invariant Sections may be replaced with a single copy. If there are multiple Invariant
Sections with the same name but diﬀerent contents, make the title of each such section
unique by adding at the end of it, in parentheses, the name of the original author or
publisher of that section if known, or else a unique number. Make the same adjustment
to the section titles in the list of Invariant Sections in the license notice of the combined
work.
In the combination, you must combine any sections Entitled “History” in the various
original documents, forming one section Entitled “History”; likewise combine any sections
Entitled “Acknowledgements”, and any sections Entitled “Dedications”. You must delete
all sections Entitled “Endorsements”.
6. COLLECTIONS OF DOCUMENTS
You may make a collection consisting of the Document and other documents released
under this License, and replace the individual copies of this License in the various docu-
ments with a single copy that is included in the collection, provided that you follow the
rules of this License for verbatim copying of each of the documents in all other respects.
You may extract a single document from such a collection, and distribute it individually
under this License, provided you insert a copy of this License into the extracted document,
and follow this License in all other respects regarding verbatim copying of that document.
7. AGGREGATION WITH INDEPENDENT WORKS
A compilation of the Document or its derivatives with other separate and independent
documents or works, in or on a volume of a storage or distribution medium, is called an
“aggregate” if the copyright resulting from the compilation is not used to limit the legal
rights of the compilation’s users beyond what the individual works permit. When the
Document is included in an aggregate, this License does not apply to the other works in
the aggregate which are not themselves derivative works of the Document.
If the Cover Text requirement of section 3 is applicable to these copies of the Document,
then if the Document is less than one half of the entire aggregate, the Document’s Cover
Texts may be placed on covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form. Otherwise they must
appear on printed covers that bracket the whole aggregate.
8. TRANSLATION
Translation is considered a kind of modiﬁcation, so you may distribute translations of
the Document under the terms of section 4. Replacing Invariant Sections with trans-
lations requires special permission from their copyright holders, but you may include
Open∇FOAM-1.7.1
9 TERMINATION U-9
translations of some or all Invariant Sections in addition to the original versions of these
Invariant Sections. You may include a translation of this License, and all the license
notices in the Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions of those notices and
disclaimers. In case of a disagreement between the translation and the original version
of this License or a notice or disclaimer, the original version will prevail.
If a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “His-
tory”, the requirement (section 4) to Preserve its Title (section 1) will typically require
changing the actual title.
9. TERMINATION
You may not copy, modify, sublicense, or distribute the Document except as expressly
provided for under this License. Any other attempt to copy, modify, sublicense or dis-
tribute the Document is void, and will automatically terminate your rights under this
License. However, parties who have received copies, or rights, from you under this License
will not have their licenses terminated so long as such parties remain in full compliance.
10. FUTURE REVISIONS OF THIS LICENSE
The Free Software Foundation may publish new, revised versions of the GNU Free
Documentation License from time to time. Such new versions will be similar in spirit to
the present version, but may diﬀer in detail to address new problems or concerns. See
http://www.gnu.org/copyleft/.
Each version of the License is given a distinguishing version number. If the Document
speciﬁes that a particular numbered version of this License “or any later version” applies
to it, you have the option of following the terms and conditions either of that speciﬁed
version or of any later version that has been published (not as a draft) by the Free Software
Foundation. If the Document does not specify a version number of this License, you may
choose any version ever published (not as a draft) by the Free Software Foundation.
Open∇FOAM-1.7.1
U-10 第 0 章 GNU Free Documentation License
Trademarks
ANSYS is a registered trademark of ANSYS Inc.
CFX is a registered trademark of AEA Technology Engineering Software Ltd.
CHEMKIN is a registered trademark of Sandia National Laboratories
CORBA is a registered trademark of Object Management Group Inc.
openDX is a registered trademark of International Business Machines Corporation
EnSight is a registered trademark of Computational Engineering International Ltd.
AVS/Express is a registered trademark of Advanced Visual Systems Inc.
Fluent is a registered trademark of Fluent Inc.
GAMBIT is a registered trademark of Fluent Inc.
Fieldview is a registered trademark of Intelligent Light
Icem-CFD is a registered trademark of ICEM Technologies GmbH
I-DEAS is a registered trademark of Structural Dynamics Research Corporation
JAVA is a registered trademark of Sun Microsystems Inc.
Linux is a registered trademark of Linus Torvalds
MICO is a registered trademark of MICO Inc.
OpenFOAM is a registered trademark of OpenCFD Ltd.
ParaView is a registered trademark of Kitware
STAR-CD is a registered trademark of Computational Dynamics Ltd.
UNIX is a registered trademark of The Open Group
Open∇FOAM-1.7.1
目次
GNU Free Documentation License U-3
1 APPLICABILITY AND DEFINITIONS · · · · · · · · · · · · · · · · U-3
2 VERBATIM COPYING · · · · · · · · · · · · · · · · · · · · · · · U-5
3 COPYING IN QUANTITY · · · · · · · · · · · · · · · · · · · · · · U-5
4 MODIFICATIONS · · · · · · · · · · · · · · · · · · · · · · · · · · U-6
5 COMBINING DOCUMENTS · · · · · · · · · · · · · · · · · · · · · U-7
6 COLLECTIONS OF DOCUMENTS · · · · · · · · · · · · · · · · · · U-8
7 AGGREGATION WITH INDEPENDENT WORKS · · · · · · · · · · · U-8
8 TRANSLATION · · · · · · · · · · · · · · · · · · · · · · · · · · · U-8
9 TERMINATION · · · · · · · · · · · · · · · · · · · · · · · · · · · U-9
10 FUTURE REVISIONS OF THIS LICENSE · · · · · · · · · · · · · · U-9
目次 U-11
第 1 章 はじめに U-17
第 2 章 チュートリアル U-19
2.1 天井駆動のキャビティ流れ · · · · · · · · · · · · · · · · · · · · · · · U-19
2.1.1 前処理 · · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-20
2.1.2 メッシュの確認 · · · · · · · · · · · · · · · · · · · · · · · · · U-26
2.1.3 アプリケーションの実行 · · · · · · · · · · · · · · · · · · · · · U-26
2.1.4 後処理 · · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-27
2.1.5 メッシュの解像度を増やす · · · · · · · · · · · · · · · · · · · · U-30
2.1.6 勾配メッシュ · · · · · · · · · · · · · · · · · · · · · · · · · · U-37
2.1.7 レイノルズ数の増大 · · · · · · · · · · · · · · · · · · · · · · · U-40
2.1.8 高レイノルズ数流れ · · · · · · · · · · · · · · · · · · · · · · · U-42
2.1.9 ケース形状の変更 · · · · · · · · · · · · · · · · · · · · · · · · U-44
2.1.10 修正した形状の後処理 · · · · · · · · · · · · · · · · · · · · · · U-47
2.2 穴あき板の応力解析 · · · · · · · · · · · · · · · · · · · · · · · · · · U-47
2.2.1 メッシュ生成 · · · · · · · · · · · · · · · · · · · · · · · · · · U-48
2.2.2 コードの実行 · · · · · · · · · · · · · · · · · · · · · · · · · · U-56
2.2.3 後処理 · · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-56
2.2.4 演習 · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-58
2.3 ダムの決壊 · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-58
2.3.1 格子の生成 · · · · · · · · · · · · · · · · · · · · · · · · · · · U-59
2.3.2 境界条件 · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-61
U-12 目次
2.3.3 初期条件の設定 · · · · · · · · · · · · · · · · · · · · · · · · · U-62
2.3.4 流体の物性値 · · · · · · · · · · · · · · · · · · · · · · · · · · U-62
2.3.5 乱流モデル · · · · · · · · · · · · · · · · · · · · · · · · · · · U-64
2.3.6 時間ステップの制御 · · · · · · · · · · · · · · · · · · · · · · · U-64
2.3.7 離散化スキーム · · · · · · · · · · · · · · · · · · · · · · · · · U-65
2.3.8 線形ソルバの制御 · · · · · · · · · · · · · · · · · · · · · · · · U-66
2.3.9 コードの実行 · · · · · · · · · · · · · · · · · · · · · · · · · · U-67
2.3.10 後処理 · · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-67
2.3.11 並列計算 · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-67
2.3.12 並列計算ケースの後処理 · · · · · · · · · · · · · · · · · · · · · U-70
第 3 章 アプリケーションとライブラリ U-73
3.1 OpenFOAM のプログラミング言語 · · · · · · · · · · · · · · · · · · · U-73
3.1.1 言語とは · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-73
3.1.2 オブジェクト指向と C++ · · · · · · · · · · · · · · · · · · · · U-74
3.1.3 方程式の説明 · · · · · · · · · · · · · · · · · · · · · · · · · · U-74
3.1.4 ソルバコード · · · · · · · · · · · · · · · · · · · · · · · · · · U-75
3.2 アプリケーションやライブラリのコンパイル · · · · · · · · · · · · · · · U-75
3.2.1 ヘッダ.H ファイル · · · · · · · · · · · · · · · · · · · · · · · U-76
3.2.2 wmake によるコンパイル · · · · · · · · · · · · · · · · · · · · U-77
3.2.3 依存リストの削除：wclean と rmdepall · · · · · · · · · · · · · · U-80
3.2.4 コンパイルの例：pisoFoam アプリケーション · · · · · · · · · · · U-80
3.2.5 デバッグメッセージと最適化スイッチ · · · · · · · · · · · · · · · U-84
3.2.6 現在のアプリケーションへの新しいユーザ定義ライブラリのリンク · · U-85
3.3 アプリケーションの実行 · · · · · · · · · · · · · · · · · · · · · · · · U-85
3.4 アプリケーションの並列実行 · · · · · · · · · · · · · · · · · · · · · · U-86
3.4.1 メッシュの分解と初期フィールド・データ · · · · · · · · · · · · · U-86
3.4.2 分解ケースの実行 · · · · · · · · · · · · · · · · · · · · · · · · U-88
3.4.3 複数のディスクへのデータの分配 · · · · · · · · · · · · · · · · · U-89
3.4.4 並列実行されたケースの後処理 · · · · · · · · · · · · · · · · · · U-90
3.5 標準のソルバ · · · · · · · · · · · · · · · · · · · · · · · · · · · · · U-90
3.6 標準のユーティリティ · · · · · · · · · · · · · · · · · · · · · · · · · U-93
3.7 標準のライブラリ · · · · · · · · · · · · · · · · · · · · · · · · · · · U-98
第 4 章 OpenFOAM のケース U-103
4.1 OpenFOAM のケースのファイル構造 · · · · · · · · · · · · · · · · · ·U-103
4.2 基本的な入出力ファイルのフォーマット · · · · · · · · · · · · · · · · ·U-104
4.2.1 一般的な構文規則 · · · · · · · · · · · · · · · · · · · · · · · ·U-104
4.2.2 ディクショナリ · · · · · · · · · · · · · · · · · · · · · · · · ·U-105
4.2.3 データファイルヘッダ · · · · · · · · · · · · · · · · · · · · · ·U-105
4.2.4 リスト · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-106
Open∇FOAM-1.7.1
U-13
4.2.5 スカラとベクトル，テンソル · · · · · · · · · · · · · · · · · · ·U-107
4.2.6 次元の単位 · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-107
4.2.7 次元付の型 · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-108
4.2.8 フィールド · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-108
4.2.9 ディレクティブとマクロ置換 · · · · · · · · · · · · · · · · · · ·U-109
4.3 時間とデータの入出力制御 · · · · · · · · · · · · · · · · · · · · · · ·U-110
4.4 数値スキーム · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-112
4.4.1 補間スキーム · · · · · · · · · · · · · · · · · · · · · · · · · ·U-114
4.4.2 表面法線方向勾配スキーム · · · · · · · · · · · · · · · · · · · ·U-115
4.4.3 勾配スキーム · · · · · · · · · · · · · · · · · · · · · · · · · ·U-116
4.4.4 ラプラシアンスキーム · · · · · · · · · · · · · · · · · · · · · ·U-117
4.4.5 発散スキーム · · · · · · · · · · · · · · · · · · · · · · · · · ·U-118
4.4.6 時間スキーム · · · · · · · · · · · · · · · · · · · · · · · · · ·U-118
4.4.7 流束の算出 · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-119
4.5 解法とアルゴリズム制御 · · · · · · · · · · · · · · · · · · · · · · · ·U-119
4.5.1 線形ソルバ制御 · · · · · · · · · · · · · · · · · · · · · · · · ·U-120
4.5.2 不足緩和解析 · · · · · · · · · · · · · · · · · · · · · · · · · ·U-122
4.5.3 PISO と SIMPLE アルゴリズム · · · · · · · · · · · · · · · · ·U-123
4.5.4 その他のパラメタ · · · · · · · · · · · · · · · · · · · · · · · ·U-124
第 5 章 メッシュの生成と変換 U-125
5.1 メッシュの記法 · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-125
5.1.1 メッシュの仕様と妥当性の制約 · · · · · · · · · · · · · · · · · ·U-126
5.1.2 polyMesh の記述 · · · · · · · · · · · · · · · · · · · · · · · ·U-127
5.1.3 cellShape ツール · · · · · · · · · · · · · · · · · · · · · · · ·U-128
5.1.4 1 次元や 2 次元，軸対称問題 · · · · · · · · · · · · · · · · · · ·U-129
5.2 境界 · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-129
5.2.1 パッチの形式の類型化 · · · · · · · · · · · · · · · · · · · · · ·U-129
5.2.2 基底型 · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-132
5.2.3 基本型 · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-134
5.2.4 派生型 · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-134
5.3 blockMesh ユーティリティを使ったメッシュ生成 · · · · · · · · · · · · ·U-135
5.3.1 blockMeshDict ファイルの記述 · · · · · · · · · · · · · · · · · ·U-137
5.3.2 複数のブロック · · · · · · · · · · · · · · · · · · · · · · · · ·U-140
5.3.3 8 頂点未満のブロックの作成 · · · · · · · · · · · · · · · · · · ·U-142
5.3.4 blockMesh の実行 · · · · · · · · · · · · · · · · · · · · · · · ·U-142
5.4 snappyHexMesh ユーティリティを使ったメッシュ生成 · · · · · · · · · ·U-143
5.4.1 snappyHexMesh によるメッシュ生成の過程 · · · · · · · · · · · ·U-143
5.4.2 六面体基礎メッシュの作成 · · · · · · · · · · · · · · · · · · · ·U-144
5.4.3 面と輪郭に合わせたセルの分割 · · · · · · · · · · · · · · · · · ·U-145
5.4.4 セルの除去 · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-147
Open∇FOAM-1.7.1
U-14 目次
5.4.5 特定領域内のセルの分割 · · · · · · · · · · · · · · · · · · · · ·U-147
5.4.6 面へのスナップ · · · · · · · · · · · · · · · · · · · · · · · · ·U-148
5.4.7 メッシュレイヤ · · · · · · · · · · · · · · · · · · · · · · · · ·U-148
5.4.8 メッシュの品質制御 · · · · · · · · · · · · · · · · · · · · · · ·U-150
5.5 メッシュの変換 · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-150
5.5.1 ﬂuentMeshToFoam · · · · · · · · · · · · · · · · · · · · · · ·U-151
5.5.2 starToFoam · · · · · · · · · · · · · · · · · · · · · · · · · ·U-152
5.5.3 gambitToFoam · · · · · · · · · · · · · · · · · · · · · · · · ·U-156
5.5.4 ideasToFoam · · · · · · · · · · · · · · · · · · · · · · · · · ·U-157
5.5.5 cfx4ToFoam · · · · · · · · · · · · · · · · · · · · · · · · · ·U-157
5.6 異なるジオメトリ間のフィールドマッピング · · · · · · · · · · · · · · ·U-157
5.6.1 一貫したフィールドのマッピング · · · · · · · · · · · · · · · · ·U-158
5.6.2 一貫しないフィールドのマッピング · · · · · · · · · · · · · · · ·U-158
5.6.3 並列なケースのマッピング · · · · · · · · · · · · · · · · · · · ·U-159
第 6 章 後処理 U-161
6.1 paraFoam · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-161
6.1.1 paraFoam の概要 · · · · · · · · · · · · · · · · · · · · · · · ·U-161
6.1.2 Properties パネル · · · · · · · · · · · · · · · · · · · · · · · ·U-163
6.1.3 Display パネル · · · · · · · · · · · · · · · · · · · · · · · · ·U-163
6.1.4 ボタンツールバー · · · · · · · · · · · · · · · · · · · · · · · ·U-164
6.1.5 ビューの操作 · · · · · · · · · · · · · · · · · · · · · · · · · ·U-165
6.1.6 コンタのプロット · · · · · · · · · · · · · · · · · · · · · · · ·U-165
6.1.7 ベクトルのプロット · · · · · · · · · · · · · · · · · · · · · · ·U-166
6.1.8 流線 · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-166
6.1.9 画像の出力 · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-167
6.1.10 アニメーション出力 · · · · · · · · · · · · · · · · · · · · · · ·U-167
6.2 Fluent による後処理 · · · · · · · · · · · · · · · · · · · · · · · · ·U-167
6.3 Fieldview による後処理 · · · · · · · · · · · · · · · · · · · · · · · ·U-169
6.4 EnSight による後処理 · · · · · · · · · · · · · · · · · · · · · · · · ·U-169
6.4.1 EnSight の形式への変換 · · · · · · · · · · · · · · · · · · · · ·U-170
6.4.2 ensight74FoamExecreader モジュール · · · · · · · · · · · · · · ·U-170
6.5 データのサンプリング · · · · · · · · · · · · · · · · · · · · · · · · ·U-171
6.6 ジョブのモニタと管理 · · · · · · · · · · · · · · · · · · · · · · · · ·U-174
6.6.1 計算実行用の foamJob スクリプト · · · · · · · · · · · · · · · ·U-175
6.6.2 計算モニタ用の foamLog スクリプト · · · · · · · · · · · · · · ·U-175
第 7 章 モデルと物性値 U-179
7.1 熱物理モデル · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-179
7.1.1 熱物性データ · · · · · · · · · · · · · · · · · · · · · · · · · ·U-180
7.2 乱流モデル · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-182
Open∇FOAM-1.7.1
U-15
7.2.1 モデル係数 · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-183
7.2.2 壁関数 · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·U-183
索引 U-185
Open∇FOAM-1.7.1
第1章
はじめに
本ガイドは，Open Source Field Operation and Manipulation (OpenFOAM) C++ ラ
イブラリ，バージョン 1.7.1 リリースに付属するものです．本ガイドでは，まず第 2 章の
チュートリアル演習を通して，またそれ以降は OpenFOAM を構成する個々のコンポーネ
ントに関するより詳細な記述によって，OpenFOAM の基礎的な操作法に関して説明して
います．
OpenFOAM に関して最も重要なことは，主にアプリケーションとよばれる実行ファイル
を作成するために使われる C++ ライブラリであるということです．このアプリケーショ
ンは，連続体力学における特定の問題を解くためのソルバ，およびデータに対する各種の操
作を行うためのユーティリティの 2 カテゴリに大別されます．OpenFOAM の配布物は第
3 章に述べるように，多岐にわたる問題を扱うための多数のソルバおよびユーティリティ
を含んでいます．
OpenFOAM の特長の一つは，背景となる手法，物理学，関連するプログラミング技術
に関する知識があれば，新しいソルバやユーティリティをユーザ自身が作成可能であるこ
とです．これらに関する情報はプログラマズ・ガイドに掲載しています．
OpenFOAM には前処理・後処理の環境も含まれています．前処理・後処理へのインタ
フェースもまた OpenFOAM のユーティリティですから，OpenFOAM 内の全ての環境に
わたってデータの取扱いの一貫性が保たれています．OpenFOAM の全体的な構造を図 1.1
に示します．
Open Source Field Operation and Manipulation (OpenFOAM) C++ ライブラリ
ParaView
解析前処理 後処理
その他
EnSightなど
メッシング
ツール
基本
アプリケーション
ユーザ
アプリケーション
ユーティリティ
図 1.1 OpenFOAM の全体的な構造
前処理や OpenFOAM のケースの実行方法については，第 4 章と第 5 章で説明します
が，OpenFOAM に付属するメッシュ・ジェネレータを使ってメッシュを生成する方法や，
サードパーティ製品で生成したメッシュを変換する方法も説明します．後処理については第
U-18 第 1 章 はじめに
6 章で説明します．
Open∇FOAM-1.7.1
第2章
チュートリアル
この章では OpenFOAM を動かす基本的な手順をユーザに説明することを主な目標とし
て，OpenFOAM のいくつかのテストケースで，設定，シミュレーション，および後処理
のプロセスを詳しく記述します．$FOAM_TUTORIALS のディレクトリには OpenFOAM
が提供するすべてのソルバと多くのユーティリティを使い方を示す数多くのケースがあり
ます．チュートリアルを始める前にユーザは最初に OpenFOAM が正しくインストールさ
れていることを確かめなければなりません．
チュートリアルのケースは blockMesh の前処理ツールを使用して記述し，OpenFOAM の
ソルバで動かし，paraFoam を使用して後処理を行います．OpenFOAM のサポートするサー
ドパーティの後処理ツールでアクセスするユーザには次の選択肢があります．paraFoam を
使用しチュートリアルを進めるか，または後処理が必要な際に第 6 章で述べるサードパー
ティ製品の使い方を参照するかです．
すべてのチュートリアルのコピーは OpenFOAM をインストールしたチュートリアル
のディレクトリから利用できます．チュートリアルは，流れのタイプによるディレクトリ
とソルバのサブディレクトリにまとめられています．例えば icoFoam のケースはすべて
incompressible/icoFoam サブディレクトリの中に置かれています．ここで incompressible
が流れのタイプを表しています．ユーザがさまざまな例題を実施するときには，tutorials
ディレクトリをローカルの実行ディレクトリにコピーすることをお勧めします．そのため
には，次のようにタイプすることで容易にコピーすることができます．
mkdir -p $FOAM_RUN
cp -r $FOAM_TUTORIALS $FOAM_RUN
2.1 天井駆動のキャビティ流れ
このチュートリアルは 2 次元正方形領域の等温非圧縮性流れに関して，プリプロセス，
計算，ポストプロセスする方法を解説します．図 2.1 に正方形のすべての境界が壁面境界
であるジオメトリを示します．上の壁面境界は x 軸方向に 1 m/s の速度ではたらき，他の
三つの壁面境界は静止しています．チュートリアルにおいてはこれを解くにあたって，ま
ず層流を仮定し，層流等温非圧縮性流れのための icoFoam ソルバを使用し均一メッシュ上
で解きます．チュートリアルでは，メッシュの解像度の増加や壁方向への勾配の影響を調
べます．これにより流れのレイノルズ数を増加させ，pisoFoam ソルバを乱流，等温，非圧
縮性流れに使用します．
U-20 第 2 章 チュートリアル
x
Ux = 1 m/s
d = 0.1 m
y
図 2.1 天井駆動キャビティのジオメトリ
2.1.1 前処理
ケースは OpenFOAM でケースファイルを編集することで設定します．ケースファイル
は emacs や vi，gedit，kate，nedit などのテキストエディタで作成・編集します．それは，
入出力が初心者でもわかりやすいキーワードをもつディクショナリ形式が使われているか
らです．
解析ケースはメッシュ，物理量，物性，制御パラメータなどの要素を含んでいますが
4.1 節において示すように，多くの CFD ソフトが一つのファイルにこれらのデータを格納
するのに対し，OpenFOAM は一連のファイルセットとして解析ケースディレクトリに格
納します．解析ケースのディレクトリには，(最初のチュートリアルの例題が単純に cavity
であるように) わかりやすい名前を与えます．解析ケースを編集・実行する前の準備とし
て，まず解析対象のディレクトリに移動します．
cd $FOAM_RUN/tutorials/incompressible/icoFoam/cavity
2.1.1.1 メッシュ生成
OpenFOAM は常に 3 次元デカルト座標系で動くため，全てのジオメトリを 3 次元で生
成します．OpenFOAM はデフォルトの設定において問題を 3 次元として解きますが，2 次
元を解く場合は，解決が必要でない（第 3）次元方向に垂直な境界に特別な empty という
境界条件を指定します．
x–y 平面上の一辺の長さの正方形からなるキャビティの領域に，まず 20 × 20 セルの均
一なメッシュを設定します．このブロック構造を図 2.2 に示します．
OpenFOAM で提供されるメッシュ・ジェネレータ blockMesh は constant/polyMesh ディ
レクトリにある入力ディクショナリ blockMeshDict で指定された記述からメッシュを生成
します．このケースの blockMeshDict は，以下のとおりです．
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.7.1 |
5 | \\ / A nd | Web: www.OpenFOAM.org |
6 | \\/ M anipulation | |
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-21
23
54
67
0
z
x 1
y
図 2.2 キャビティのメッシュのブロック構造
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 object blockMeshDict;
14 }
15 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
16
17 convertToMeters 0.1;
18
19 vertices
20 (
21 (0 0 0)
22 (1 0 0)
23 (1 1 0)
24 (0 1 0)
25 (0 0 0.1)
26 (1 0 0.1)
27 (1 1 0.1)
28 (0 1 0.1)
29 );
30
31 blocks
32 (
33 hex (0 1 2 3 4 5 6 7) (20 20 1) simpleGrading (1 1 1)
34 );
35
36 edges
37 (
38 );
39
40 patches
41 (
42 wall movingWall
43 (
44 (3 7 6 2)
45 )
46 wall fixedWalls
47 (
48 (0 4 7 3)
49 (2 6 5 1)
50 (1 5 4 0)
51 )
52 empty frontAndBack
53 (
Open∇FOAM-1.7.1
U-22 第 2 章 チュートリアル
54 (0 3 2 1)
55 (4 5 6 7)
56 )
57 );
58
59 mergePatchPairs
60 (
61 );
62
63 // *************************************************************************
//
ファイルの最初はバナー（1–7 行）形式のヘッダ情報で，ファイル情報は，波括弧 ({. . . })
で囲まれる FoamFile サブディクショナリの中で記述されます．
今後は，簡便化とスペースの都合上，バナーと FoamFile サブディクショナリを含むファ
イルヘッダはケースファイルの引用の際に省きます．
まずファイルは初めにブロックの頂点の座標 vertices を指定します．それに続き，頂
点名とセル番号から blocks（ここでは一つのみ）を定義します．そして最後に境界パッチ
を定義します．blockMeshDict ファイルの記述の詳細を理解するには 5.3 節を参照してくだ
さい．
メッシュは blockMeshDict ファイル上で blockMesh を実行すると生成されます．ケース
ディレクトリ内から以下をターミナルに入力するだけです．
blockMesh
blockMesh の実行状況はターミナルウインドウに表示されます．blockMeshDict ファイルに
誤りがあった場合，エラーメッセージが表示され，ファイルのどの行に問題があるかを教
えてくれます．今この段階でエラーメッセージが出ることはないでしょう．
2.1.1.2 境界条件と初期条件
メッシュの生成が完了すると，物理的条件の初期状態を確認することができます．この
ケースは開始時刻がに設定されているので解析領域の初期状態のデータは cavity ディレク
トリの 0 というサブディレクトリに格納されています．0 には p と U の二つのファイルが
あり，圧力 (p) と速度 (U) の初期値と境界条件を設定する必要があります．p のファイル
を例に説明します．
17 dimensions [0 2 -2 0 0 0 0];
18
19 internalField uniform 0;
20
21 boundaryField
22 {
23 movingWall
24 {
25 type zeroGradient;
26 }
27
28 fixedWalls
29 {
30 type zeroGradient;
31 }
32
33 frontAndBack
34 {
35 type empty;
36 }
37 }
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-23
38
39 // *************************************************************************
//
物理的条件のデータファイルには三つの主要な項目があります．
dimensions 物理量の次元を定義．ここでは動圧，つまり m2s−2（4.2.6 項に詳述）．
internalField 内部の物理量は単一の値で記述すれば一様となり，一様でない場合はすべて
の値を指定する必要があります（4.2.8 項に詳述）．
boundaryField 境界面の物理量は境界条件と境界パッチに与えるデータを記述します（4.2.8項に
詳述）．
このキャビティ流れの解析ケースでは境界は壁面のみですが，二つのパッチが使用されて
います．(1) キャビティの固定された側面と底面用の fixedwall と，(2) キャビティの駆
動天井面用の movingwall です．どちらも p が zeroGradient ですが，これは圧力の境界
に垂直な方向の勾配が 0 であるということです．frontAndBack は 2 次元の問題の場合の
表裏の平面を示していて，本ケースでは当然 empty となっています．
このケースでは，もっともよく目にするものでありますが，物理量の初期条件が uniform
（一様）になっています．ここでは圧力は動圧のみの非圧縮ケースであるため，絶対値は解
析と関係ないので便宜上 uniform 0 としています．
0/U の速度のファイルにおいても同様です．dimensions は速度であり，内部の初期条
件はベクトル量で 3 成分とも 0 を意味する uniform (0 0 0) になっています（4.2.5 項に
詳述）．
速度の境界条件は frontAndBack パッチと同じ条件です．fixedWall に関してはすべり
なしのため value は uniform (0 0 0) となります．上面は 1 m/s で移動するので uniform
(1 0 0) で固定値を設定します．
2.1.1.3 物理量
ケースの物理量は，名前に...Properties という語尾を与えられてディクショナリに保存さ
れ，Dictionaries ディレクトリツリーに置かれます．icoFoam ケースでは，transportProperties
ディクショナリに保存される動粘性係数を指定するだけです．
transportProperties ディクショナリを開いてエントリを見たり，編集することができます
ので，動粘性係数が正しくセットされることを確かめてください．動粘性係数は，nu (方
程式で見られるギリシア語シンボル ν の音声ラベル) というキーワードになります．まず
最初に，このケースはレイノルズ数を 10 で計算します．レイノルズ数は次のように定義さ
れます．
Re =
d|U|
ν
(2.1)
d と U はそれぞれ特性長さと速度を表し，ν は動粘性係数を表します．ここで，d = 0.1 m，
|U| = 1 m s−1，Re = 10 とすると，ν = 0.01 m2s−1 となります．動粘性係数の適切な設定
は以下のようになります．
17
18 nu nu [0 2 -1 0 0 0 0] 0.01;
19
20
Open∇FOAM-1.7.1
U-24 第 2 章 チュートリアル
21 // *************************************************************************
//
2.1.1.4 制御
計算時間の制御，解のデータの読み書きに関する入力データは，controlDict ディクショ
ナリから読み取られます．これは system ディレクトリにありますので，ケースを制御する
ファイルとして参照してください．
まず最初にスタート・停止時刻と時間ステップを設定しなければなりません．OpenFOAM
は，柔軟性の高い時間制御を提供しますが，詳しくは 4.3 節で述べます．このチュートリア
ルでは，時刻 t = 0 から実行を始めたいと思います．つまり，OpenFOAM は 0 というディ
レクトリから場のデータを読む必要があることになります（ケースファイル構造の詳しい
情報に関しては 4.1 節を見てください）．したがって，startFrom キーワードを startTime
に設定して，次に startTime キーワードを 0 に指定します．
終了時刻には，流れがキャビティ周りを循環している定常解に達することを目標にするわ
けですが，概して，流体は層流で定常状態に到達するために領域を 10 回通り抜けなければ
なりません．このケースでは，入口も出口もないので，流れが解析領域を通り抜けません．
代わりに，ふたがキャビティを 10 回移動する時刻 (すなわち 1 s) を終了時刻としてセット
してもいいでしょう．実際は，後の知見により，0.5 s で十分であるとわかるので，この値を
採用しましょう．この終了時刻を指定するために，stopAt キーワードとして endTime を
指定して，endTime キーワードを 0.5 に設定しなければなりません．
次に，時間ステップを設定する必要がありますが，これはキーワード deltaT によって
表されます．icoFoam を動かすとき，時間の精度と安定性を達成するために，1 未満のクー
ラン数が必要です．クーラン数は以下のように定義されます．
Co =
∆t|U|
∆x
(2.2)
∆t は時間ステップ，|U| はセルを通る流速の大きさ，そして ∆x は流速方向のセルサイズ
です．流速が領域内で変化しても必ず Co < 1 を成り立たせる必要があります．だから，最
も悪い場合（つまり，大きな流速と小さなセルサイズの組合わせによる最大の Co）を元に
∆t を決定します．ここでは，セルサイズは解析領域中全域で固定されているので，最大 Co
はふた付近に生じ，1 m s−1 に近い流速になるでしょう．
∆x =
d
n
=
0.1
20
= 0.005 m (2.3)
したがって，領域中で 1 以下のクーラン数を達成するために，時間ステップ deltaT を次の
ように設定しなくてはいけません．
∆t =
Co∆x
|U|
=
1 × 0.005
1
= 0.005 s (2.4)
シミュレーションが進行するとき，後処理パッケージで後から見ることができるように，あ
る一定の時間間隔での結果の書き出しをもとめるため，writeControl キーワードは結果
が書かれる時刻を決めるためのいくつかのオプションを提示します．timeStep オプショ
ンは，結果が n 回の時間ステップごとに結果を書き出すということを意味し，そのときの
値は writeInterval キーワードで指定されます．0.1, 0.2, . . . , 0.5 s で結果を書きたいとし
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-25
ましょう．したがって，0.005 s の時間ステップなので，時間ステップ 20 回ごとに結果を出
力する必要があります．よって writeInterval に 20 を設定します．
OpenFOAM は 4.1 節で議論するデータセットを書き込むごとに例えば 0.1 s という現在
時刻にちなんで名付けられた新しいディレクトリを作成します．icoFoam ソルバでは，U や
p の各項目ごとに結果を時刻ディレクトリに書き込みます．このケースでは，controlDict
の記述内容は以下のとおりです．
17
18 application icoFoam;
19
20 startFrom startTime;
21
22 startTime 0;
23
24 stopAt endTime;
25
26 endTime 0.5;
27
28 deltaT 0.005;
29
30 writeControl timeStep;
31
32 writeInterval 20;
33
34 purgeWrite 0;
35
36 writeFormat ascii;
37
38 writePrecision 6;
39
40 writeCompression uncompressed;
41
42 timeFormat general;
43
44 timePrecision 6;
45
46 runTimeModifiable yes;
47
48
49 // *************************************************************************
//
2.1.1.5 離散化と線形ソルバの設定
ユーザは fvSchemes ディクショナリ (system ディレクトリ) 内で有限体積離散化法を選択
するかどうか指定します．線形方程式ソルバと許容値および他のアルゴリズムコントロー
ルの指定は fvSolution ディクショナリ内に作られています．ユーザは自由にこれらのディ
クショナリを見ることができますが，fvSolution ディクショナリの PISO サブディクショナ
リの pRefCell と pRefValue を除いて，現在のところ，それらすべての項について議論す
る必要はありません．キャビティのような閉じた非圧縮系では，圧力は相対的であり，重
要なのは（絶対値ではなく）圧力範囲です．このような場合では，ソルバはセル pRefCell
に pRefValue による参照レベルをセットします．この例では，両方が 0 に設定されます．
しかし，これらの値のどちらかを変えると絶対圧力（速度と相対圧力ではなく）が変化し
ます．
Open∇FOAM-1.7.1
U-26 第 2 章 チュートリアル
2.1.2 メッシュの確認
解析を実行する前に正しくメッシュができているか確認しましょう．メッシュは Open-
Foam が提供する後処理ソフトの paraFoam で確認します．paraFoam は解析ケースのディ
レクトリ上でターミナルから起動します．
paraFoam
あるいは，オプションに-case をつけることで他のディレクトリからでも起動することが
できます．
paraFoam -case $FOAM_RUN/tutorials/incompressible/icoFoam/cavity
図 6.1 に示すように ParaView のウインドウが開きます．Pipeline Browser を見ると，Par-
aView が cavity.OpenFOAM，つまりキャビティケースのモデュールを開いていることが確
認できます．Apply ボタンをクリックする前にRegion Status とパネルから表示する要素を
選択する必要があります．解析ケースが単純なので Region Status パネルのチェックボック
スで全てのデータを選択することが簡単です．パネル内の全要素を自動的にチェックする
ことができます．ParaView でジオメトリを読込むためには Apply ボタンをクリックします．
最初から適用されている一般的な設定については 6.1.5.1 を参照してください．
Display タブを開き選択したモジュールの表示形式を調整します．図 2.3 に示すように，
(1) Color by を Solid Color に設定し，(2) Set Solid Color をクリックし適当な色（背景が
白の場合は黒など）を選択，(3) Style パネルでは Representation メニューから Wireframe
を選択します．背景色はトップメニューパネルで Edit から View Settings... を選択し
て設定します．
ParaView を使うのがはじめてならば，6.1.5 項で述べるように視点操作を試してみること
をお勧めします．特に本ケースは 2 次元なので Edit メニューの View Settings の General
パネルで Use Parallel Projection を選択するのがよいでしょう．軸の方向は，Annotation ウィ
ンドウの Orientation Axes をオン・オフするか，マウスのドラッグ&ドロップによって操作
することができます．
2.1.3 アプリケーションの実行
あらゆる UNIX/Linux の実行ファイルと同様に，OpenFOAM アプリケーションは二つ
の方法で実行することができます．一つ目はフォアグラウンドのプロセスで，コマンドプ
ロンプトを与えるのにシェルが命令終了まで待つものです．二つ目はバックグラウンドプ
ロセスで，シェルがさらなる命令を受け入れるのに命令完了の必要がないものです．
ここでは，フォアグランドで icoFoam を動かしましょう．icoFoam ソルバはケースディ
レクトリ内に入って，コマンドプロンプト上で
icoFoam
と入力することで実行できますが，
あるいはオプションに-case をつけることで他のディレクトリからでも起動することが
できます．
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-27
Display パネルを開く
Color by Solid Color を選択
Solid Color を設定（例えば黒）
Wireframe を選択
図 2.3 paraFoam でのメッシュの表示
icoFoam -case $FOAM_RUN/tutorials/incompressible/icoFoam/cavity
ジョブの進捗は，ターミナルウインドウに表示されます．現在の時刻，最大クーラン数，全
てのフィールドの初期値と最終的結果を表示します．
2.1.4 後処理
結果が時刻ディレクトリに書かれるとすぐに，paraFoam を使って見ることができます．
paraFoamウインドウに戻って，cavity.OpenFOAMケースモジュールのPropertiesパネルを選
んでください．ケースモジュールのパネルが存在していないようならば，cavity.OpenFOAM
が青くハイライトされているか，それと並んだ目のボタンは表示が有効であることを示し
ているか，を確認してください．
見たいデータを表示する paraFoam を準備するには，最初に必須の実行時間として 0.5 s
分のデータを読込まなければなりません．ケースが実行中で一方 ParaView を開いている場
合，時間ディレクトリの出力データは ParaView に自動的にロードはされません．データを
ロードするためには，Properties 画面で Update GUI を選択し，緑の Apply ボタンをクリッ
クします． そうすれば時間データはロードされます．
Open∇FOAM-1.7.1
U-28 第 2 章 チュートリアル
2.1.4.1 等値面とコンタプロット
圧力を見るには Display パネルを開き，選択したモジュールの表示形式を調整します．圧
力分布を見るには図 2.4 に示すように Style パネルの Representation メニューを surface に
して ColorPanel の Set Color by を ，そして Rescale to Data Range ボタンをクリック
し，メニューバーの下のツールバーにある VCR Controls または Current Time Controls
で現在時刻を 0.5 にして t = 0.5 s における解析結果を表示します．それらのパネルは図 6.4
に示すように ParaView ウィンドウのトップメニューの下にあります．圧力場の解析結果
は図 2.5 のように左上が低く，右上が高い圧力分布になるはずです．
圧力分布を作成するには図 2.4 に示すように StylePanel で Representation メニューから
Surface を選択し，Color パネルで ，そして Rescale to Data Range ボタンによって Color
を選択します．メニューバーの下のツールバーにある VCR Controls または Current time
を 0.5 にして t = 0.5 s における解析結果を表示します．
のアイコンで圧力分布をセル間を補完した連続分布を表示します．もし Color by メ
ニューからセルアイコン を選択しなければ各々のセルが等級づけなしで一つの色に
よって意味されるように，圧力のための一つの値は各々のセルに起因しています．
Active Variable Controls ツールバーの Toggle Color Legend Visibility ボタンをクリッ
クするか View メニューから Show Color Legend を選択することで，カラーバーを表示さ
せることができます．Active Variable Controls toolbar か Display window の Color panel
にある Edit Color Map button をクリックするとフォントの大きさや種類，スケールの番
号付けの形式など，カラーバーの設定を変更することができます．カラーバーはドラッグ
アンドドロップにより image ウインドウに置くことも可能です．
最近のバージョンの ParaView では，よく使われる青・緑・赤という（虹色の）カラース
ケールではなく，青から白そして赤へと変化するカラースケールがデフォルトになってい
ます．そこで，はじめて ParaView を使うユーザはこのカラースケールを変えたいと思うで
しょう．これは，Color Scale Editor で Choose Preset を選び，Blue to Red Rainbow を選択
することで変更できます．OK ボタンで確定したあとに，Make Default を押せば ParaView
はいつもこのタイプのカラーバーを使うようになります．
イメージを回転をさせるとすべての表面に圧力分布で色づけされていることが確認でき
ます．正しいコンタ図を得るために断面を作成するか，6.1.6.1 に示す slice フィルタを用い
てジオメトリをスライスします．6.1.6.1 に示す slice フィルタを用います．断面の中心座標
は (0.05, 0.05, 0.005)，基準点は (0, 0, 1) とします．断面を作成後，6.1.6 項に示す contour
フィルタによってコンタを描画します．
2.1.4.2 ベクトルプロット
流速ベクトルを描画する前に，先に作成した断面やコンタなどの他のモジュールは不要
なので取り除きましょう．Pipeline Browser でそれらのモジュールを選択し，Properties
Panel の Delete をクリックして削除するか，Pipeline Browser で目の形のボタンをクリッ
クしてそれらのモジュールを非表示にします．
各格子の中心におけるベクトルグラフを作成することにしましょう．まず，6.1.7.1 に述
べるように格子の中心のデータのみに絞り込みます．Pipeline Browser 上で強調表示され
ている cavity.OpenFOAM のモジュールを選択し，Filter メニューから Cell Centers を選
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-29
Rescale to Data Range をクリック
Surface を選択
Color by として p の補間値を選択
Display パネルを開く
図 2.4 キャビティケースでの圧力等圧線の描画
択して Apply をクリックします．
Centers が強調表示され，Filter メニューから Glyph を選択します．図 2.6 のような Prop-
erties ウインドウが表示されます．Properties パネルの結果では vectors メニューはベクト
ル場は速度のみなので速度場 U が選択されています．Scale Mode は速度の Vector Mag-
nitude が初期値として選択されていますが，oﬀ を選択し，Set Scale Factor に 0.005 をに
して全体のの速度を見ます．Apply をクリックすると単色，例えば白，のベクトルが表示
されます．通常は Display パネルで Color by U を選択して大きさに応じた色付けをしま
す．Edit Color Map を Show Color Legend に設定し，速度の凡例を表示させましょう．出
力結果は図 2.7 のようになります．Color Legend（凡例）には Times Roman フォントが使
用され，Automatic Label Format を解除して Label Format テキストボックスに %-#6.2f
を入力することで二つの有効数字でラベルを固定しています．背景色は View Settings の
General Panel で白に設定されています．
2.1.4.3 流線プロット
ParaView で後処理を続ける前に，上述のベクトルプロットのモジュールは不要なので
削除しましょう．そうしたら，6.1.8 項の記述のように流速の流線をプロットしましょう．
Open∇FOAM-1.7.1
U-30 第 2 章 チュートリアル
図 2.5 キャビティケースでの圧力
Pipeline Browserでcavity.OpenFOAMモジュールをハイライトした状態で，Filterメニュー
から Stream Tracer を選択し，Apply をクリックします．そうすると，図 2.8 に示すように
Propaties ウィンドウが現れます．Seed の点は，ジオメトリの中心を垂直に通って，Line
Sourse に沿うように (例えば (0.05, 0, 0.005) から (0.05, 0.1, 0.005) まで) 指定しましょう．
このガイドに掲載した図では Point Resolution を 21 に，Max Propagation を Length で 0.5
に，Initial Step Length を Cell Length で 0.01 に，Integration Direction を BOTH という設
定を行いました．また，Runge-Kutta 2 Integrator Type はデフォルトパラメータで使いま
した．
Apply をクリックすると，トレーサが生成されます．そこで Filter メニューから Tubes を
選択することで，高品質の流線図を作ることができます．このレポートでは，次の設定を
使いました．Num. sides を 20，Radius を 0.003，Radius factor を 10 にしました．Accept を
押すことで，図 2.9 ができます．
2.1.5 メッシュの解像度を増やす
メッシュの解像度を各々の方向で 2 倍に増やします．問題の初期条件として使うために，
粗いメッシュでの結果を，細かいメッシュ上に写像します．そして，細かいメッシュの解
を粗いメッシュの解と比較します．
2.1.5.1 既存ケースを用いた新しいケースの作成
cavity をコピーし，修正することで解析ケース cavityFine を作成します．まず cavity と同
じ階層に新しいディレクトリを作成します．
cd $FOAM_RUN/tutorials/incompressible/icoFoam
mkdir cavityFine
基本となる解析ケース cavity の内容を解析ケース cavityFine にコピーし，cavityFine に移動
します．
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-31
Glyph Type Arrow
Parameters
Scale Mode で を選択off
Set Scale Factorを に設定0.005
で を選択
パネルを開く
図 2.6 Glyph フィルタのパラメータパネル
cp -r cavity/constant cavityFine
cp -r cavity/system cavityFine
cd cavityFine
2.1.5.2 細かいメッシュの作成
blockMesh を使って計算格子数を増やしましょう．blockMeshDict ファイルをエディタで
開き，ブロックに関する記述を修正します．ブロックを特定するには blocks というキー
ワードを用いましょう．ブロック定義の対称性に関しては 5.3.1.3 で詳しく述べるので，こ
こでは hex が最初の頂点リストで，各方向の計算格子の番号リストがあることを知ればよ
いでしょう．これは，先の cavity ケースでは (20 20 1) になっています．これを (40 40
1) に変え，保存します．ここで blockMesh を実効することで新しい，より細かいメッシュ
を生成することができます．
2.1.5.3 粗いメッシュの結果を細かなメッシュにマッピングする
mapFields ユーティリティは，他のジオメトリの対応するフィールドの上へ与えられたジ
オメトリに関した一つ以上のフィールドをマッピングします．本チュートリアルの例では，
入力フィールドと求める結果のフィールド両方のジオメトリ・境界の種類・境界条件が同
一であるので，フィールドは『首尾一貫している』と考えられます．この例で mapFields を
実行するとき，-consistent コマンドラインオプションを使います．
mapFields maps のフィールドデータは，目的ケース（すなわち結果が図にされている）
の controlDict 内の startFrom/startTime で指定される時間ディレクトリから読まれます．
Open∇FOAM-1.7.1
U-32 第 2 章 チュートリアル
図 2.7 キャビティケースの速度
この例では，cavityFine ケースの細かいメッシュ上に cavity ケースから粗いメッシュの最終
結果をマッピングしましょう．これらの結果が cavity の 0.5 のディレクトリに格納されて
いるので，startTime を controlDict ディクショナリで 0.5 s に，startFrom を startTime に
セットします．これらの変更を保存しましょう．
mapFields を実行する準備ができました．mapFields -help と打ち込むと mapFields の実
行には入力ケースのディレクトリを指定する必要があることがわかります．-consistent
オプションを使うので，次のようにユーティリティは cavityFine ディレクトリから実行さ
れる．
mapFields ../cavity -consistent
mapFields が実行され次のように出力されるでしょう．
Source: ".." "cavity"
Target: "." "cavityFine"
Create databases as time
Source time: 0.5
Target time: 0.5
Create meshes
Source mesh size: 400 Target mesh size: 1600
Consistently creating and mapping fields for time 0.5
interpolating p
interpolating U
End
2.1.5.4 設定の調整
さて，全てのセルの寸法が半分になったので，1 より小さいクーラン数を維持するためには
2.1.1.4 で述べるように時間ステップを半分にしなければいけません．deltaT を controlDict
ディクショナリにて 0.0025 s に設定しましょう．いままでは，フィールドデータを固定のス
テップ回数のもとでの時間間隔で出力する方法を示してきましたが，今回は固定の計算時間
でデータ出力を指定する方法を示してみましょう．controlDict の writeControl キーワー
ド下において，timeStep エントリで固定のステップ回数で出力する代わりに，runTime を
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-33
Parameters
Integration Direction BOTH
Max Propagation Length 0.5
Initial Step Length Cell Length 0.01
Line Source
パネルを開く
を で に設定
を で に設定
を に設定
を選択し，点と解像度を設定
図 2.8 Stream Tracer フィルタのパラメータパネル
使って固定の計算時間を指定して結果を出力することができます．
このケースでは 0.1 ごとの出力を指定します．したがって，writeControl を runTime
に，writeInterval を 0.1 に設定しましょう．このようにすることで，ケースは粗いメッ
シュでの解を入力条件として計算をはじめるので，定常状態に収束するには適切な短い時
間だけ動かせばよいのです．したがって，endTime は 0.7 s でよいでしょう．これらの設定
が正しいことを確認し，ケースを保存しましょう．
2.1.5.5 バックグラウンドプロセスとしてコードを動かす
icoForm をバックグラウンドプロセスとして動かしてみて，最終的な結果を後で見るこ
とができるように log ファイルに出力しましょう．cavitiyFine ディレクトリにおいて次の
コマンドを実行してください．
icoFoam > log &
cat log
Open∇FOAM-1.7.1
U-34 第 2 章 チュートリアル
図 2.9 キャビティケースの流線
2.1.5.6 精密なメッシュによるベクトルプロット
各々の新しいケースは本質的には単なる Pipeline Browser に現れる他のモジュールで
あるので，ParaView で同時に複数のケースを開くことができます．若干不便なことには，
ParaView で新しいケースを開けるときには，選ばれたデータが拡張子を含むファイル名で
ある必要があります．しかし，OpenFOAM において，各々のケースは特定のディレクト
リ構造の中に拡張子なしで複数のファイルに保存されます．解決方法として，paraFoam ス
クリプトが自動的に拡張子.OpenFOAM が付いたダミーファイルを作成することになって
います．それゆえに，cavity ケースモジュールは cavity.OpenFOAM と名づけられます．
ParaView 内から他のケースディレクトリを開けたいならば，そのようなダミーファイル
を作成する必要があります．たとえば，cavityFine ケースを読み込むには，コマンドプロン
プトで次のようにタイプしてファイルを作成します．
cd $FOAM_RUN/tutorials/incompressible/icoFoam
touch cavityFine/cavityFine.OpenFOAM
こうして File メニューから Open Data を選んでディレクトリツリーをたどり，
cavityFine.OpenFOAM を選ぶことで，cavityFine ケースを ParaView に読み込めるよう
になりました．さて，ParaView で精密なメッシュの結果のベクトルプロットを作ることが
できます．同時に両方のケースの glyph を見られるようににすることによって，cavityFine
ケースのプロットを cavity ケースと比較することができます．
2.1.5.7 グラフを描く
OpenFOAM は，速度のスカラ値を抽出して 2 次元のグラフに描画したい場合のデータ
の取り扱いに長けています．データを操作するための特別なユーティリティが多数あり，
単純な計算を foamCalc によって組み合わせることができます．次のようにユーティリティ
を指定して実行します．
foamCalc <calcType> <fieldName1 ... fieldNameN>
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-35
Display パネルを開く
UxLine Series を選択から
arc_length を選択
Scatter Plotを選択
図 2.10 グラフ作図のためのフィールド選択
処理を規定する<calcType>にはaddSubtract，randomise，div，components，mag，magGrad，
magSqr，interpolate を指定することができます．<calcType>のリストを見るには，意
図的に無効な処理を要求することでエラーメッセージとともに見ることができます．
>> foamCalc xxxx
Selecting calcType xxxx
unknown calcType type xxxx, constructor not in hash table
Valid calcType selections are:
8
(
randomise
magSqr
magGrad
addSubtract
div
mag
interpolate
components
)
comonents および mag の calcType はスカラ速度を計測するのに有用です．ケースにて
“foamCalc components U” を動かすと，各時刻のディレクトリから速度のベクトル場を
読み込み，各ディレクトリに各軸方向成分のスカラ場 Ux，Uy，Uz を書き出します．同様に
“foamCalc mag U” とは各時刻のディレクトリにスカラ場 magU を書き込みます．
Open∇FOAM-1.7.1
U-36 第 2 章 チュートリアル
foamCalc は cavity と cavityFine のどちらに対しても実行することができます．例えば
cavity に対しては，以下のように cavity ディレクトリに移動して foamCalc を実行します．
cd $FOAM_RUN/tutorials/incompressible/icoFoam/cavity
foamCalc components U
それぞれの成分が ParaView 内でグラフとして描画されます．簡単に，早く，しかもラベ
ル付けや形式化の調整ができるので，とても高性能な出力を表示ができます．しかしなが
ら，出版用にグラフを作成するならば gnuplot や Grace/xmgr などの専用のグラフ描画ソ
フトを使って生データから作画するのがよいでしょう．これを行うには，2.2.3 項または
6.5 節で述べる sample ユーティリティを使うとよいでしょう．
描画をする前に，新しく生成された Ux，Uy，Uz のデータを ParaView に読み込ませる必要
があります．作業をしている基本のモジュール，この場合 cavity.OpenFOAM の Properties
パネルの上部にある Update GUI ボタンをチェックしします．Apply をクリックすることで
Vol Field Status ウインドウに新しいデータが読み込まれます．新しいデータの選択と変
更の適用を確認し，必要なら Apply をもう一度クリックします．境界領域が Region Status
パネルで選択されていると境界部分のデータ補間が不適切に行われています．したがって
movingwall や fixedwall，frontAndBack といった Region Status パネルのパッチの選択
を解除して変更を適用します．
さて，ParaView でグラフを表示してみましょう．まずは描画したいモジュールを選択し，
Plot Over Line フィルタを Filter → Data Analisys から選択します．3D View ウインド
ウの傍に新しい XY Plot ウインドウが開きます．Properties ウインドウで線の終点を指定
すると Plobeline モジュールが作成されます．この例では Point1 を (0.05, 0, 0.005)，Point2
を (0.05, 0.1, 0.005) と指定して線を領域の中心の真上におきます．Resolution は 100 まで
設定できます．
Apply をクリックすると XY Plot ウインドウにグラフが描画されます．Display パネル
の Plot Type を Scatter Plot に設定し，Attribute Mode Point Data にします．Use Data
Array オプションの arc_length で X 軸データがキャビティの底からの距離になります．
Displays ウインドウの Line Series パネルから表示するデータを選択することができま
す．表示されているスカラ場のリストから，ベクトルの大きさや成分を初期値とすること
もできます．つまり，Ux を foamCalc から計算する必要はありません．それでも，Ux 以外
の系列の選択はすべて解除しましょう．選択した系列の上の四角形の色が線の色です．こ
の上でダブルクリックをすれば簡単に変更することができます．
グラフを初期化するには XY Plot 自体を動かします．カーソルがグラフ上にある状態
で右クリックしてメニューから Properties を選択します．各軸のタイトルや形式の設定を
する Chart Options ウインドウが表示されます．各軸のメニューはダブルクリックをして
Layout and Tytle にすることで拡大することができます．フォントや色，軸名の位置，軸
の値の範囲や線形か対数かといった設定が行うことができます．
図 2.11 は ParaView によって作画された図です．望みどおりのグラフが作成できます．
図 2.11 は軸のオプションとして Standard type of Notation，Specify Axis Range を選択し，
フォントは Sans Serif の 12 ポイントです．このグラフは点で表示していますが，Display
ウィンドウで Enable Line Series ボタンを有効にすれば線で表示できます．注：もしこのボ
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-37
タンが，グレー表示で無効の状態になっていたら，Line Series パネルでどれか変数を選択
すれば有効になります．Enable Line Series ボタンを選択しておけば，Line Style や Marker
Style もユーザの好みで調整できます．
図 2.11 paraFoam でのグラフ作図
2.1.6 勾配メッシュ
解の誤差は，正しい解の形と選択した数値スキームで想定される形とが大きく異なる領
域で出ます．例えば，数セルにわたる変数の線形変化に基づく数値スキームは，正しい解
自体が線形の場合にしか正確な解を導くことができません．例えば勾配の変化が最も大き
いところのような正しい解が線形から一番大きく外れる領域で誤差は最も大きくなります．
セルの大きさに従って，誤差は減少します．
どんな問題も取りかかる前に解の概形の直感的予測ができるといいです．次に，誤差が
最も大きくなるところを予測し，メッシュ幅に勾配をつけ，最も小さいセルがこれらの領
域にくるようにします．キャビティの場合，壁の近くで速度の大きい変化があることを予
想できるので，チュートリアルのこの部分では，メッシュがこの領域で，より小さくなる
ように勾配付けします．同じ数のセルを使用することによって，コンピュータの負荷をあ
まり増加させずに，より精度を上げられます．
lid-driven キャビティ問題のために壁に向かって勾配を付けた 20 × 20 セルのメッシュを
作り，2.1.5.2 の細かいメッシュの結果を初期条件として勾配付けされたメッシュに適用しま
しょう．そして，勾配付けされたメッシュの結果を前のメッシュの結果と比較してみましょ
う．blockMeshDict ディクショナリの書換えはとても重要であるので，チュートリアルの
この部分を使ったケース (cavityGrade) は$FOAM_RUN/tutorials/incompressible/icoFoam
ディレクトリに入れておきました．
2.1.6.1 勾配メッシュの作成
ここで，四つの異なるメッシュ間隔の計算メッシュが計算領域の上下左右のブロックに
必要となります．このメッシュのブロック構造を図 2.12 に示します．
Open∇FOAM-1.7.1
U-38 第 2 章 チュートリアル
0
z
x
y
3 4 5
86 7
1 2
1715
9 1110
16
12 13 14
0 1
2 3
図 2.12 キャビティケースの勾配メッシュのブロック構造（ブロック番号）
cavityGrade の constant/polyMesh サブディレクトリで blockMeshDict ファイルを見るこ
とができます．念のため blockMeshDict の重要な要素を以下に述べます．それぞれのブロッ
クは x 方向，y 方向に 10 セルを有し，もっとも大きなセルともっとも小さなセルとの大き
さの比は 2 です．
17 convertToMeters 0.1;
18
19 vertices
20 (
21 (0 0 0)
22 (0.5 0 0)
23 (1 0 0)
24 (0 0.5 0)
25 (0.5 0.5 0)
26 (1 0.5 0)
27 (0 1 0)
28 (0.5 1 0)
29 (1 1 0)
30 (0 0 0.1)
31 (0.5 0 0.1)
32 (1 0 0.1)
33 (0 0.5 0.1)
34 (0.5 0.5 0.1)
35 (1 0.5 0.1)
36 (0 1 0.1)
37 (0.5 1 0.1)
38 (1 1 0.1)
39 );
40
41 blocks
42 (
43 hex (0 1 4 3 9 10 13 12) (10 10 1) simpleGrading (2 2 1)
44 hex (1 2 5 4 10 11 14 13) (10 10 1) simpleGrading (0.5 2 1)
45 hex (3 4 7 6 12 13 16 15) (10 10 1) simpleGrading (2 0.5 1)
46 hex (4 5 8 7 13 14 17 16) (10 10 1) simpleGrading (0.5 0.5 1)
47 );
48
49 edges
50 (
51 );
52
53 patches
54 (
55 wall movingWall
56 (
57 (6 15 16 7)
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-39
58 (7 16 17 8)
59 )
60 wall fixedWalls
61 (
62 (3 12 15 6)
63 (0 9 12 3)
64 (0 1 10 9)
65 (1 2 11 10)
66 (2 5 14 11)
67 (5 8 17 14)
68 )
69 empty frontAndBack
70 (
71 (0 3 4 1)
72 (1 4 5 2)
73 (3 6 7 4)
74 (4 7 8 5)
75 (9 10 13 12)
76 (10 11 14 13)
77 (12 13 16 15)
78 (13 14 17 16)
79 )
80 );
81
82 mergePatchPairs
83 (
84 );
85
86 // *************************************************************************
//
いったんこのケースの blockMeshDict ファイルを理解しておけば，後はコマンドラインか
ら blockMesh を実行できます．2.1.2 項に示した paraFoam を使用することで勾配付けされ
たメッシュを見ることができます．
2.1.6.2 計算時間，時間ステップの変更
もっとも速い速度と小さいセルが上蓋に面することになり，したがって，2.1.1.4 で示し
たように，もっとも高いクーラン数が上蓋に面するセルに生じます．このようなことから
上蓋に面するセルの大きさを見積もることは，本ケースにて適当な時間ステップを計算す
る上で有効です．
一様でないメッシュ勾配を使用している場合，blockMesh は形状に関する数列をもちい
てセルの大きさを算出します．長さ l に沿って，最初と最後のセルとの間に，比 R の n 個の
計算セルが必要であるならば，もっとも小さいセルの大きさは，次のように与えられます．
∆xs = l
r − 1
αr − 1
(2.5)
ここで，r はあるセルの大きさとその隣のセルの大きさとの比であり，次式で表されます．
r = R
1
n−1 (2.6)
そして，
α =



R for R > 1,
1 − r−1 + r−1 for R < 1.
(2.7)
cavityGrade ケースにおいては，各方向のセルの数は 10 であり，もっとも大きなセルと小さ
なセルとの比は 2，ブロックの縦横は 0.05 m です．したがって，もっとも小さなセルサイ
Open∇FOAM-1.7.1
U-40 第 2 章 チュートリアル
ズは 3.45 mm となります．式 (2.2) から時間ステップは，クラーン数を 1 以下に抑えるた
めに 3.45 ms 以下にしなければなりません．有意な解析結果を得るためには，時間ステップ
deltaT を 2.5 ms まで短くし，writeInterval を 40 とします．これより解析結果は 0.1 s
ごとに書き出されることとなります．
このように，各設定に対応したファイルを編集することにより，ケースディクショナリ
の各種条件を変更することができます．ここで時間ないし計算経過の書き出しを操作し
たいならば，/cavityGrade/system/controlDict ファイル内にそれらのパラメータは納めら
れており，任意のエディタでこのファイルを開くことができます．先に述べたように，計
算を収束させるための保証として，このケースでは時間ステップ deltaT は 0.25e-3 に，
writeInterval は 40 とします．
startTimeはその cavityFineケースの最終的な条件，すなわち 0.7に設定される必要があり
ます．cavityと cavityFineが規定された実行時間の中でよく収束させるためには，cavityGrade
ケースのための実行時間を 0.1 s に設定，すなわち endTime を 0.8 とします．
2.1.6.3 解析場のマッピング
2.1.5.3にあるようにmapFieldsを使用して，cavityFineケースの最終的な結果をcavityGrade
ケースのメッシュにマッピングします．以下のように cavityGrade ディレクトリに入り，
mapFields を実行してください．
cd $FOAM_RUN/tutorials/incompressible/icoFoam/cavityGrade
mapFields ../cavityFine -consistent
今度は，ケースディレクトリから icoFoam を実行します．そして，ランタイム情報をモニタ
リングします．そして，このケースの完全に収束した結果を見て，以前に 2.1.5.6 と 2.1.5.7
で説明した後処理ツールを使って他の結果と比較します．
2.1.7 レイノルズ数の増大
これまで解いたケースはレイノルズ数が 10 でした．これは大変に低い条件であり，した
がってキャビティの底部中央に小さな二次渦を伴うのみで，迅速に安定解を導くことがで
きました．しかし，ここでレイノルズ数を 50 に上げると，収束解を得るのにより長い時間
を要することになります．そこで cavity ケースのメッシュを初期条件として使用すること
とします．cavity ケースディレクトリを cavityHighRe という名前でコピーします．
cd $FOAM_RUN/tutorials/incompressible/icoFoam
cp -r cavity cavityHighRe
2.1.7.1 後処理
cavityHighRe ケースに入り，transportProperties ディクショナリを編集します．レイノル
ズ数を 10 倍に増加させるためには，動粘性係数を 10 分の 1 まで減らす必要があります（例
えば 10 から）．これで cavity ケースの実行結果からリスタートして，このケースを実行で
きます．これを実行するために，startFrom キーワードを latestTime にオプションを切
り替えることにより，icoFoam は，最新の時間ディレクトリを初期データとして使用しま
す（例えば 0.5）．endTime は 2 s に設定し，本ケースを保存します．
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-41
2.1.7.2 コードの実行
まずはケースディレクトリから icoFoam を実行し，ランタイム情報を見ます．バックグ
ラウンドでジョブを実行するときには，以下の UNIX コマンドが便利です．
nohup ユーザがログアウト後も稼働し続けるコマンド
nice カーネル・スケジューラのジョブの優先順位を変えるコマンド．−20 が最優先で，
19 は最も低い優先度．
これらのコマンドは，例えば，ユーザがリモートマシンでケースを実行できるよう設定し，
頻繁にモニタしなくてもいいような場合，リモートマシンではケース実行をあまり優先さ
せたくないでしょうが，そのような場合に便利です．その場合，ユーザは nohup コマンド
で稼働しているリモートマシンをログアウトしてジョブを実行し続けることができます．
一方，nice は優先度を 19 に設定します．試しに，以下のようにコマンドを実行してみま
しょう．
cd $FOAM_RUN/tutorials/incompressible/icoFoam
nohup nice -n 19 icoFoam > log &
cat log
お気づきかもしれませんが，前述の解析方法では icoFoam は，速度 U の計算が止まっても，
それよりもずっと長い間もしくは解析が終わるまで圧力 p の計算をし続けていました．実
際には，icoFoam がいったん U の計算をやめ，p の初期残差が fvSolution ディクショナリで
設定された許容値（通常は 10−6）を下回ると結果が効率的に収束するので，フィールド・
データをいったん時間ディレクトリに書き出して計算を止めることができます．例として，
cavityHighRen ケースの収束の log ファイルを以下に示します．示したとおり，1.62 s 後に
速度はすでに収束し，初期の圧力残差は小さくなります．log において No Iterations 0
は，U の計算が止まったことを示しています．
1
2 Time = 1.63
3
4 Courant Number mean: 0.108642 max: 0.818175
5 DILUPBiCG: Solving for Ux, Initial residual = 7.86044e-06, Final residual = 7.86044e-06,
6 No Iterations 0
7 DILUPBiCG: Solving for Uy, Initial residual = 9.4171e-06, Final residual = 9.4171e-06,
8 No Iterations 0
9 DICPCG: Solving for p, Initial residual = 3.54721e-06, Final residual = 7.13506e-07,
10 No Iterations 4
11 time step continuity errors : sum local = 6.46788e-09, global = -9.44516e-19,
12 cumulative = 1.04595e-17
13 DICPCG: Solving for p, Initial residual = 2.15824e-06, Final residual = 9.95068e-07,
14 No Iterations 3
15 time step continuity errors : sum local = 8.67501e-09, global = 7.54182e-19,
16 cumulative = 1.12136e-17
17 ExecutionTime = 1.02 s ClockTime = 1 s
18
19 Time = 1.635
20
21 Courant Number mean: 0.108643 max: 0.818176
22 DILUPBiCG: Solving for Ux, Initial residual = 7.6728e-06, Final residual = 7.6728e-06,
23 No Iterations 0
24 DILUPBiCG: Solving for Uy, Initial residual = 9.19442e-06, Final residual = 9.19442e-06,
25 No Iterations 0
26 DICPCG: Solving for p, Initial residual = 3.13107e-06, Final residual = 8.60504e-07,
27 No Iterations 4
28 time step continuity errors : sum local = 8.15435e-09, global = -5.84817e-20,
29 cumulative = 1.11552e-17
30 DICPCG: Solving for p, Initial residual = 2.16689e-06, Final residual = 5.27197e-07,
31 No Iterations 14
Open∇FOAM-1.7.1
U-42 第 2 章 チュートリアル
32 time step continuity errors : sum local = 3.45666e-09, global = -5.62297e-19,
33 cumulative = 1.05929e-17
34 ExecutionTime = 1.02 s ClockTime = 1 s
2.1.8 高レイノルズ数流れ
では，paraFoam による結果を確認し，速度ベクトルを表示してください．計算領域の角
における二次渦が幾分増大していることがわかります．このようなとき，ユーザは粘性係数
を下げることによりレイノルズ数を増大させた計算ケースを再度実行できます．渦の数が
増加するにともない，より複雑な流れを解くために当該領域でのメッシュ解像度を上げる
必要がでてきます．さらに，レイノルズ数は収束に要する時間を増加させます．このよう
な場合，残差をモニタし，解を収束させるために endTime を延長したほうがよいでしょう．
空間および時間解像度の増加を要することは，流れが乱流域に移行するという非現実的
な状態となり，解法の安定性の問題が生じることとなります．もちろん，多くの工学的な
問題は極めて高いレイノルズ数条件となっており，したがって，乱流挙動を直接解くのに
多くのコストを負担することとなり，実行不可能であります．そのかわりに，レイノルズ
平均応力 (RAS) 乱流モデルが平均流れの挙動を解くのに用いられ，ゆらぎの統計値が計
算されています．壁関数を伴う標準 k–ε モデルが本チュートリアルの上面が移動するキャ
ビティケース（レイノルズ数 104）を解くのに用いられています．二つの追加変数が解か
れています．それは，乱流エネルギ k，乱流消散速度 ε です．乱流のための追加の方程式
およびモデルは pisoFoam と呼ばれる OpenFOAM ソルバにおいて実行されます．
2.1.8.1 前処理
$FOAM_RUN/tutorials/incompressible/pisoFoam/ras ディレクトリの cavity ケースに移
動します．これまでと同様に，blockMesh を走らせ，メッシュを生成します．壁関数付き
標準 k–ε モデルを用いる場合は，壁近傍のセルにおける流れがモデル化されることにより，
壁方向へのメッシュ勾配は必ずしも必要ではありません．
バージョン 1.6 から，壁関数は個別のパッチの境界条件として設定するようになり，壁
関数の範囲を指定することが可能になりました．これにより，異なる壁面に異なる壁関数
モデルを適用することが可能になります．壁関数の選択は，乱流粘性係数 νt のファイル
0/nut で指定します．
17
18 dimensions [0 2 -1 0 0 0 0];
19
20 internalField uniform 0;
21
22 boundaryField
23 {
24 movingWall
25 {
26 type nutWallFunction;
27 value uniform 0;
28 }
29 fixedWalls
30 {
31 type nutWallFunction;
32 value uniform 0;
33 }
34 frontAndBack
35 {
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-43
36 type empty;
37 }
38 }
39
40
41 // *************************************************************************
//
このケースでは，movingWall と fixedWalls のパッチに対して nutWallFunction キーワー
ドエントリで標準的な壁関数を指定しています．これ以外の壁関数モデルとしては，粗壁
面の壁関数 nutRoughWallFunction などがあります．
次に，k と ε のファイル (0/k と 0/epsilon) を開き，境界条件を確かめます．壁タイプ
の境界条件の選択には，ε については epsilonWallFunction 境界条件を，k については
kqRWallFunction を指定します．後者は乱流運動エネルギの表現 k，q，あるいはレイノ
ルズ応力 R のいずれにも適用できる一般的な壁関数です．k，ε の初期条件には，速度変動
U′ と乱流長さスケール l から推測した値を設定します．k と ε は，これらのパラメタを用
いて次式で表されます．
k =
1
2
U′ · U′ (2.8)
ε =
C0.75
µ k1.5
l
(2.9)
ここで Cµ は k–ε モデルの定数であり，その値は 0.09 です．デカルト座標系では k は，
k =
1
2
(U′
x
2
+ U′
y
2
+ U′
z
2
) (2.10)
で表されます．各項は x，y，z 方向速度ゆらぎ成分です．ここで，初期乱流が等方的であ
ると仮定します．例えば，U′
x
2
= U′
y
2
= U′
z
2
となり，これら速度は上面速度の 5 % に等し
く，また，乱流長さスケール l はボックス幅 0.1 m の 20 % に等しいとすると，次のように
表されます．
U′
x = U′
y = U′
z =
5
100
1 m s−1
(2.11)
⇒ k =
3
2
(
5
100
)2
m2
s−2
= 3.75 × 10−3
m2
s−2
(2.12)
ε =
C0.75
µ k1.5
l
≈ 7.65 × 10−4
m2
s−3
(2.13)
上記のとおり k，ε を設定してください．U と p に対する初期条件は前と同じように，そ
れぞれ (0, 0, 0) と 0 です．バージョン 1.6 より以前の OpenFOAM では，RAS や large-edy
simulation (LES) のような，乱流モデルのタイプはソルバによって決まっていました．こ
れにより，RAS 乱流モデルを採用していたほとんどのソルバに LES モデルを採用した同
等のソルバが存在し，ソルバのコードに多くの重複がみられました．しかし，バージョン
1.6 からは，実行時に turbulenceProperties ディクショナリで simulationType キーワード
を設定することにより，乱流のモデリング手法を選択できるようになりました．このファ
イルは constant ディレクトリに存在します．
17
18 simulationType RASModel;
19
Open∇FOAM-1.7.1
U-44 第 2 章 チュートリアル
20
21 // *************************************************************************
//
simulationType の選択肢は laminar，RASModel，そして LESModel です．このケースで
選択されている RASModel の場合，RAS モデリングの選択は RASProperties ファイルに記
述します．このファイルも同じく constant ディレクトリにあります．乱流モデルは表 3.9
に示されている多くの使用可能なモデルから，RASModel エントリで選択します．ここで
は，標準 k–ε モデルである kEpsilon を選択します．turbulence のスイッチが on になっ
ていることも確認します．乱流モデルに必要な係数には，それぞれのコードの中でデフォ
ルト値が与えられています．printCoeffs というオプションのスイッチを on にすると，実
行時に乱流モデルが呼ばれたときに，これらのデフォルト値が標準出力，すなわちターミ
ナルに出力されるようになります．これらの係数は，モデル名に Coeffs をつけた名前（た
とえば kEpsilon モデルなら kEpsilonCoeffs）のサブディクショナリとして表示されま
す．モデルの係数は，必要に応じて RASProperties ディクショナリにサブディクショナリ
を追加し，値を適宜調整することで変更することができます．
次いで，transportProperties ディクショナリの層流動粘性係数を設定します．レイノルズ
数 104 を実現するために，式 (2.1) のレイノルズ数の定義式に示されるように，動粘性係
数を 10−5 m2s−1 にする必要があります．
最後に，controlDict の startTime，stopTime，deltaT，そして writeInterval を設定
します．クーラン数の制限を満たすために deltaT を 0.005 s に設定し，endTime は 10 s と
します．
2.1.8.2 コードの実行
ケースディレクトリに入り，pisoFoam とタイプすることで pisoFoam を実行します．粘
性が小さいこの計算ケースでは，移動している上面近傍の境界層は極めて薄く，そして，上
面に面するセルは比較的大きいことから，上面速度よりもそれらセル中心の流体速度は極
めて小さいです．事実，100 時間ステップ後，上面に隣接したセルにおける速度は，上限
である 0.2 m s−1 程度です．したがって最大クーラン数は 0.2 以上にはなりません．クーラ
ン数がより 1 に近接するように時間ステップを大きくし，解析時間を増やすことは理にか
なっています．したがって，deltaT を 0.02 s にセットしなおし，これに伴い，startFrom
を latestTime にセットします．本操作は，pisoFoam が最新のディレクトリ，例えば 10.0，
からスタートデータを読み込むように指示するものです．endTime は層流条件よりも収束
に時間を要するため，20 s にセットします．従来どおり計算をリスタートし，解析の収束を
モニタします．解析が進行したら，連続した時間における結果を見てください．そして解
析が安定状態に収束するか，もしくは周期的に振動しているか確認してください．後者の
場合には，収束は決して起こりませんが，結果が不正確であるという意味ではありません．
2.1.9 ケース形状の変更
計算ケースの形状を変更し，新たな解析を行いたい場合，新たな解析のスタート条件と
してオリジナルの解析の全てないし一部を保持しておくことは有効でしょう．しかし，こ
れは少し複雑になります．なぜなら，オリジナルの解析の物理量が，新しい解析ケースの
Open∇FOAM-1.7.1
2.1 天井駆動のキャビティ流れ U-45
物理量と一致しないからです．しかし，mapFields ユーティリティは，形状や境界のタイプ
もしくはその両者が不一致な場を位置づけることができます．
例であるように，icoFoam ディレクトリ内にある cavityClipped ケースを開きます．この
ケースは，標準的な cavity ケースからなりますが，底部右側，長さ 0.04 m の正方形を除い
たものであり，blockMeshDict は以下のようになっています．
17 convertToMeters 0.1;
18
19 vertices
20 (
21 (0 0 0)
22 (0.6 0 0)
23 (0 0.4 0)
24 (0.6 0.4 0)
25 (1 0.4 0)
26 (0 1 0)
27 (0.6 1 0)
28 (1 1 0)
29
30 (0 0 0.1)
31 (0.6 0 0.1)
32 (0 0.4 0.1)
33 (0.6 0.4 0.1)
34 (1 0.4 0.1)
35 (0 1 0.1)
36 (0.6 1 0.1)
37 (1 1 0.1)
38 );
39
40 blocks
41 (
42 hex (0 1 3 2 8 9 11 10) (12 8 1) simpleGrading (1 1 1)
43 hex (2 3 6 5 10 11 14 13) (12 12 1) simpleGrading (1 1 1)
44 hex (3 4 7 6 11 12 15 14) (8 12 1) simpleGrading (1 1 1)
45 );
46
47 edges
48 (
49 );
50
51 patches
52 (
53 wall lid
54 (
55 (5 13 14 6)
56 (6 14 15 7)
57 )
58 wall fixedWalls
59 (
60 (0 8 10 2)
61 (2 10 13 5)
62 (7 15 12 4)
63 (4 12 11 3)
64 (3 11 9 1)
65 (1 9 8 0)
66 )
67 empty frontAndBack
68 (
69 (0 2 3 1)
70 (2 5 6 3)
71 (3 6 7 4)
72 (8 9 11 10)
73 (10 11 14 13)
74 (11 12 15 14)
75 )
76 );
77
78 mergePatchPairs
Open∇FOAM-1.7.1
U-46 第 2 章 チュートリアル
79 (
80 );
81
82 // *************************************************************************
//
blockMesh を実行してメッシュを生成します．パッチは cavity ケースと同様に設定されて
います．物理量の適用の過程を明確にするために，元となるケース cavity で movingWall
であった upper wall は lid という名前に変更されています．
パッチが一致しない場合，すべての物理量のデータが元のケースからマップされるとい
う保証はありません．残っているデータは元のケースと同一であるべきです．したがって
マッピングする前に時間のディレクトリに物理量のデータが存在している必要があります．
controlDict の startTime が 0.5 s に設定されているので cavityClipped ケースにおけるマッ
ピングは時刻 0.5 s に予定されています．したがって初期状態の物理量のデータ，たとえば
時刻 0 からをコピーする必要があります．
cd $FOAM_RUN/tutorials/incompressible/icoFoam/cavityClipped
cp -r 0 0.5
データをマッピングする前に 0.5 s における形状と物理量の状況をみておきましょう．
速度場と圧力場を cavity から cavityClipped にマップしようとしています．パッチが一致
しないため，system ディレクトリの mapFieldsDict を編集する必要があります．patchMap
と cuttingPatches という二つの入力項目があります．patchMap リストは元となる物理量
のパッチとマッピング対象となる物理量のパッチを含みます．対象物理量のパッチに元と
なる物理量のパッチの値を引き継ぎたいときに利用します．cavityClipped において lid の
境界値を cavity の movingWall から引き継ぎたいので次のように patchMap に記述します．
patchMap
(
lid movingWall
);
cuttingPatches リストは，対象パッチを削除した，元の場の内部の値を写像した対象
のパッチを含みます．本ケースでは，fixedWalls を内挿プロセスの実例説明に用いるこ
ととします．
cuttingPatches
(
fixedWalls
);
ここで，mapFields を次のコマンドから実行することができます．
mapFields ../cavity
図 2.13 に示すような場を確認することができます．境界パッチは，期待したように元の
ケースからの値が引き継がれています．この実例において，fixedWalls パッチの速度を
(0, 0, 0) にリセットしたい場合があります．このときは，U をエディタで開き，fixedWalls
を nonuniform から uniform (0,0,0) に変更します．そして，icoFoam を実行すればよい
です．
Open∇FOAM-1.7.1
2.2 穴あき板の応力解析 U-47
図 2.13 cavity ケースで解いた速度場を cavityClipped 上にマッピングした図
2.1.10 修正した形状の後処理
最初と最後の解析の比較のために，この解析ケースのベクトル図を，最初の時刻は 0.5 s，
次いで 0.6 s のように作成することができます．さらに，幾何形状のアウトラインも示します
が，これはは 2 次元のケースでは少し注意が必要です．ユーザは Filter menu から Extract
Parts を選択することができ，Parameter panel にて，興味のあるパッチ，すなわち，lid
と fixedWalls を，ハイライトすることができます．Accept ボタンをクリックすると，形
状のこれらのアイテムは，ディスプレイ・パネルに表面ワイヤーフレームの選択により表
示することができます．図 2.14 は，パッチを黒で表示し，修正した形状の底部角部分にお
いて形成される渦を示しています．
2.2 穴あき板の応力解析
本チュートリアルでは，中央に円形の穴を有する正方形板の線形弾性定常応力解析にお
ける前処理，実行および後処理の方法を述べます．板の大きさは，辺長 4 m および穴の半
径 0.5 m です．さらに図 2.15 に示すように，板の左右端にはの一様表面力が負荷されてい
ます．本形状においては二つの対称面が存在するため，解析領域は図 2.15 のグレーで示し
た板全体の 4 分の 1 の部分のみをカバーすれば十分です．
本問題は板の面内に応力が負荷されるため，2 次元問題として近似化されます．デカル
ト座標系においては，3 次元構造の振舞いについて (1) 平面応力条件：本条件においては 2
次元の面外方向にはたらく応力成分は無視できるものと仮定される，(2) 平面ひずみ条件：
本条件においては 2 次元の面外方向のひずみ成分は無視できるものと仮定される，のふた
つの仮定が考えられます．本ケースのように 3 次元方向に薄い固体に対しては，平面応力
条件が適当です．なお平面ひずみ条件は，3 次元方向に厚い固体に対して適用されます．
円形の穴を有する無限大に大きく薄い板への負荷に対しては，解析解が存在します．垂
Open∇FOAM-1.7.1
U-48 第 2 章 チュートリアル
図 2.14 速度場の cavityClipped の解法
直な対称面における法線方向応力の解は以下となります．
(σxx)x=0 =



σ
(
1 +
R2
2y2
+
3R4
2y4
)
for |y| ≥ R
0 for |y| < R
(2.14)
シミュレーションの実行結果をこの解析解と比較することとしましょう．チュートリアル
の最後に，メッシュの解像度および非等間隔化に対する解の感度を調べ，また，穴に対す
る板の大きさを大きくすることで無限大板に対する解析解と有限板に対する本問題の解を
比較して誤差を見積もることができるように演習問題を用意しています．
2.2.1 メッシュ生成
解析領域は 4 ブロックからなり，そのうちのいくつかは円弧形の端部を有します．x–y 平
面におけるメッシュブロックの構造を図 2.16 に示します．2.1.1.1 で述べたように，2 次元
として扱われるようなケースであっても，OpenFOAM では全てのジオメトリが 3 次元で
生成されます．したがって方向のブロックの大きさを設定しなければなりませんので，こ
こでは 0.5 m とします．表面力境界条件は力でなく応力で指定されますので，断面積すな
わち z 方向の大きさは解に影響を与えません．
$FOAM_RUN/tutorials/stressAnalysis/solidDisplacementFoam ディレクトリの plateHole
ケースに移動し，plateHole ケースの constant/polyMesh/blockMeshDict をエディタで開き
ます．blockMeshDict ディクショナリのエントリを以下に示します．
17 convertToMeters 1;
18
19 vertices
20 (
21 (0.5 0 0)
22 (1 0 0)
23 (2 0 0)
Open∇FOAM-1.7.1
2.2 穴あき板の応力解析 U-49
xsymmetry plane
4.0 m
y
σ = 10 kPaσ = 10 kPa
R = 0.5 m
symmetryplane
図 2.15 穴あき板の形状
24 (2 0.707107 0)
25 (0.707107 0.707107 0)
26 (0.353553 0.353553 0)
27 (2 2 0)
28 (0.707107 2 0)
29 (0 2 0)
30 (0 1 0)
31 (0 0.5 0)
32 (0.5 0 0.5)
33 (1 0 0.5)
34 (2 0 0.5)
35 (2 0.707107 0.5)
36 (0.707107 0.707107 0.5)
37 (0.353553 0.353553 0.5)
38 (2 2 0.5)
39 (0.707107 2 0.5)
40 (0 2 0.5)
41 (0 1 0.5)
42 (0 0.5 0.5)
43 );
44
45 blocks
46 (
47 hex (5 4 9 10 16 15 20 21) (10 10 1) simpleGrading (1 1 1)
48 hex (0 1 4 5 11 12 15 16) (10 10 1) simpleGrading (1 1 1)
49 hex (1 2 3 4 12 13 14 15) (20 10 1) simpleGrading (1 1 1)
50 hex (4 3 6 7 15 14 17 18) (20 20 1) simpleGrading (1 1 1)
51 hex (9 4 7 8 20 15 18 19) (10 20 1) simpleGrading (1 1 1)
52 );
53
54 edges
55 (
56 arc 0 5 (0.469846 0.17101 0)
57 arc 5 10 (0.17101 0.469846 0)
58 arc 1 4 (0.939693 0.34202 0)
59 arc 4 9 (0.34202 0.939693 0)
60 arc 11 16 (0.469846 0.17101 0.5)
61 arc 16 21 (0.17101 0.469846 0.5)
62 arc 12 15 (0.939693 0.34202 0.5)
63 arc 15 20 (0.34202 0.939693 0.5)
Open∇FOAM-1.7.1
U-50 第 2 章 チュートリアル
x
y x2
x1 x1
x2
x2
x1
x1
x2
x2
x1
left
left
up 7 up
right
3
down
hole
0
down
right
6
9
8
4
10
10 2
5
2
1
34
図 2.16 穴あき板解析のためのメッシュのブロック構造
64 );
65
66 patches
67 (
68 symmetryPlane left
69 (
70 (8 9 20 19)
71 (9 10 21 20)
72 )
73 patch right
74 (
75 (2 3 14 13)
76 (3 6 17 14)
77 )
78 symmetryPlane down
79 (
80 (0 1 12 11)
81 (1 2 13 12)
82 )
83 patch up
84 (
85 (7 8 19 18)
86 (6 7 18 17)
87 )
88 patch hole
89 (
90 (10 5 16 21)
91 (5 0 11 16)
92 )
93 empty frontAndBack
94 (
95 (10 9 4 5)
Open∇FOAM-1.7.1
2.2 穴あき板の応力解析 U-51
96 (5 4 1 0)
97 (1 4 3 2)
98 (4 7 6 3)
99 (4 9 8 7)
100 (21 16 15 20)
101 (16 11 12 15)
102 (12 13 14 15)
103 (15 14 17 18)
104 (15 18 19 20)
105 )
106 );
107
108 mergePatchPairs
109 (
110 );
111
112 // *************************************************************************
//
ここまで前のチュートリアルのように直線的なエッジの形状を対象としてきましたが，本
チュートリアルでは曲線のエッジについて定義する必要があります．edges のキーワード
エントリ（曲線エッジのリスト）内で曲線エッジが定義されています．それらのリストの
構文では，最初に arc，simpleSpline，polyLine などの曲線タイプが示されていますが，
さらに詳しくは 5.3.1 項を参照してください．この例題ではすべてのエッジが円弧なので
arc を使用します．曲線を arc で定義する際は始点と終点および円弧上の点の 3 点によっ
て指定します．
この blockMeshDict に含まれるブロック全てが同一の配向性を有する訳ではありません．
図 2.16 に示すように，ブロック 0 の x2 方向はブロック 4 の −x1 方向と同じになっていま
す．このためブロック界面でセルが矛盾なく合うよう，それぞれのブロックにおけるセル
の番号および順序を決定する際には注意を払わねばなりません．
プレートの全側面，穴の面，前後面の六つのパッチが定義されます．そのうち左の面
(left) と下の面 (down) は対称面です．このようなことはジオメトリ上の制限であるため，
ただの場の境界条件とするよりはメッシュの定義の中に組み込んで作ります．よって，この
パッチは blockMeshDict 内の特別な SymmetryPlane タイプを使って定義するとよいでしょ
う．frontAndBack パッチは 2 次元問題の場合は無視される面を示しています．これは先
ほども言ったようにジオメトリ上の制限なので，blockMeshDict 内の empty タイプを使っ
て定義しましょう．境界条件に関してさらに詳しくは 5.2.1 項を参照してください．そのほ
かのパッチは通常の patch タイプです．メッシュは blockMesh を使って生成し，2.1.2 項に
述べたようにして paraFoam で見ることができます．メッシュは図 2.17 のようになります．
2.2.1.1 境界および初期条件
メッシュの生成ができたら初期条件と境界条件を設定します．熱抵抗を考慮しない応力
解析では，変位 D のみ設定する必要があります．0/D のファイルは以下のようになります．
17 dimensions [0 1 0 0 0 0 0];
18
19 internalField uniform (0 0 0);
20
21 boundaryField
22 {
23 left
24 {
25 type symmetryPlane;
26 }
Open∇FOAM-1.7.1
U-52 第 2 章 チュートリアル
図 2.17 穴あき板問題のための解析メッシュ
27 right
28 {
29 type tractionDisplacement;
30 traction uniform ( 10000 0 0 );
31 pressure uniform 0;
32 value uniform (0 0 0);
33 }
34 down
35 {
36 type symmetryPlane;
37 }
38 up
39 {
40 type tractionDisplacement;
41 traction uniform ( 0 0 0 );
42 pressure uniform 0;
43 value uniform (0 0 0);
44 }
45 hole
46 {
47 type tractionDisplacement;
48 traction uniform ( 0 0 0 );
49 pressure uniform 0;
50 value uniform (0 0 0);
51 }
52 frontAndBack
53 {
54 type empty;
55 }
56 }
57
58 // *************************************************************************
//
まず，変位の初期条件が (0, 0, 0) m になっています．Constant/polyMesh/boundaries のメッ
シュの記述にあるように，left と down のパッチは type が symmetryPlane である必要が
あります．同様に frontAndBack は empty になります．
その他のパッチは表面力境界条件です．表面力境界条件は，(1) キーワード traction で
表される，境界面における表面力ベクトル，(2) キーワード pressure で表される，境界面
の法線方向に働く表面力となる（外向きの場合は負値となる）圧力，の線形結合で指定さ
れます．up および hole パッチは表面力ゼロであるため，表面力ベクトルおよび圧力とも
Open∇FOAM-1.7.1
2.2 穴あき板の応力解析 U-53
にゼロが設定されます．right パッチについては，図 2.24 に示すように，表面力ベクトル
は (1e4, 0, 0) Pa，圧力は 0 Pa が設定されます．変位の初期条件は全て (0, 0, 0) m が設定さ
れます．
2.2.1.2 機械的性質
本ケースにおける物性値は mechanicalProperties ディクショナリによって設定します．本
問題においては，表 2.1 に示す鋼の機械的性質を指定する必要があります．さらに本ディ
クショナリで planeStress を yes に設定しなければなりません．
物性 単位 キーワード 値
密度 kg m−3
rho 7854
ヤング率 Pa E 2 × 1011
ポアソン比 — nu 0.3
表 2.1 鋼の機械的性質
2.2.1.3 熱的性質
運動によって発生する熱応力によって運動方程式と連成した熱方程式を解くことができる
よう，solidDisplacementFoam ソルバには温度場を表す変数 T が存在します．thermalProp-
erties ディクショナリの thermalStress スイッチによって，OpenFOAM が熱方程式を解
くべきかどうかを実行時に指定します．また本ディクショナリによって，本ケースすなわ
ち表 2.2 に示す鋼の熱的性質を指定します．
物性 単位 キーワード 値
比熱容量 J kg−1
K−1
C 434
熱伝導率 W m−1
K−1
k 60.5
熱膨張率 K−1
alpha 1.1 × 10−5
表 2.2 鋼の熱的性質
本ケースにおいては熱方程式を解きません．したがって thermalProperties ディクショナ
リにおける thermalStress キーワードエントリは no に設定します．
2.2.1.4 制御
通常どおり，解法の制御に関する情報は controlDict ディクショナリから読み込まれます．
本ケースでは，startTime は 0 です．本ケースは定常状態ですので，時間刻みは重要では
ありません．このような状況では，定常状態のケースにおける反復回数カウンタとして働
くよう，時間刻み deltaT を 1 に設定するのが最善です．このようにした場合，本ケース
で 100 に設定した endTime は反復回数の上限として働きます．writeInterval は 20 に設
定します．
controlDict のエントリは以下のようになります．
17
18 application solidDisplacementFoam;
19
20 startFrom startTime;
21
22 startTime 0;
23
24 stopAt endTime;
25
26 endTime 100;
Open∇FOAM-1.7.1
U-54 第 2 章 チュートリアル
27
28 deltaT 1;
29
30 writeControl timeStep;
31
32 writeInterval 20;
33
34 purgeWrite 0;
35
36 writeFormat ascii;
37
38 writePrecision 6;
39
40 writeCompression uncompressed;
41
42 timeFormat general;
43
44 timePrecision 6;
45
46 graphFormat raw;
47
48 runTimeModifiable yes;
49
50
51 // *************************************************************************
//
2.2.1.5 離散化スキームおよび線形方程式ソルバ制御
次は fvSchemes ディクショナリについて見てみましょう．まず，この問題は定常状態で
すので，timeScheme における時間微分としては steadyState を選択します．これによっ
て時間微分項がオフの状態になります．全てのソルバが定常状態および過渡的状態の双方
に対して適用可能な訳ではありませんが，solidDisplacementFoam は基本的なアルゴリズム
が双方のシミュレーションともに共通であるため，双方に適用可能となっています．
線形弾性応力解析における運動方程式には，変位の勾配を含む陽な項がいくつか存在し
ます．この勾配の正確かつ滑らかな評価によって計算は恩恵を受けます．通常，有限体積
法における離散化は，ガウスの定理に基づいています．ガウス法は大抵の目的においては
十分に正確ですが，本ケースにおいては最小二乗法を使用することとします．したがって
fvSchemes ディクショナリを開き，grad(U) 勾配離散化スキームとして leastSquares を
選択してください．
17
18 d2dt2Schemes
19 {
20 default steadyState;
21 }
22
23 gradSchemes
24 {
25 default leastSquares;
26 grad(D) leastSquares;
27 grad(T) leastSquares;
28 }
29
30 divSchemes
31 {
32 default none;
33 div(sigmaD) Gauss linear;
34 }
35
36 laplacianSchemes
37 {
Open∇FOAM-1.7.1
2.2 穴あき板の応力解析 U-55
38 default none;
39 laplacian(DD,D) Gauss linear corrected;
40 laplacian(DT,T) Gauss linear corrected;
41 }
42
43 interpolationSchemes
44 {
45 default linear;
46 }
47
48 snGradSchemes
49 {
50 default none;
51 }
52
53 fluxRequired
54 {
55 default no;
56 D yes;
57 T no;
58 }
59
60
61 // *************************************************************************
//
system ディレクトリにある fvSolution ディクショナリは，線形方程式ソルバおよび求解に
使用されるアルゴリズムを制御します．まず solvers サブディクショナリを見ると，D の
solver が GAMG になっていることがわかります．tolerance で表されるソルバ許容値（ソ
ルバ名の次の数値）は，本問題では 10−6 を設定します．relTol で表されるソルバの相対
許容値（さらにその次の数値）には各反復ごとの残差の所要低減量を設定します．本問題
においては多くの項が陽であり，また個別の反復的手順の一部としてアップデートされる
ため，各反復において厳しい相対許容値を設定することは非効率的です．したがって相対
許容値として合理的な値は 0.01，もしくはさらに高めの 0.1，あるいはせいぜいこのケース
のように 0.9 程度にしておきます．
17
18 solvers
19 {
20 D
21 {
22 solver GAMG;
23 tolerance 1e-06;
24 relTol 0.9;
25 smoother GaussSeidel;
26 cacheAgglomeration true;
27 nCellsInCoarsestLevel 20;
28 agglomerator faceAreaPair;
29 mergeLevels 1;
30 }
31
32 T
33 {
34 solver GAMG;
35 tolerance 1e-06;
36 relTol 0.9;
37 smoother GaussSeidel;
38 cacheAgglomeration true;
39 nCellsInCoarsestLevel 20;
40 agglomerator faceAreaPair;
41 mergeLevels 1;
42 }
43 }
44
45 stressAnalysis
Open∇FOAM-1.7.1
U-56 第 2 章 チュートリアル
46 {
47 compactNormalStress yes;
48 nCorrectors 1;
49 D 1e-06;
50 }
51
52
53 // *************************************************************************
//
fvSolution ディクショナリは，アプリケーションソルバに特有の制御パラメータを含む stres-
sAnalysis サブディクショナリを含みます．まず，各時刻ステップ内での表面力境界条件処
理を含めた，全方程式系に関する外側ループの数を指定する nCorrectors があります．本
問題は定常状態を扱いますので，「時刻ステップ」を反復回数カウンタとして使い収束解へ
と向かう反復を実行することになります．したがって nCorrectors を 1 に設定します．
D キーワードには外側反復ループにおける収束許容値，すなわち初期残差に対して反復
計算によって消去されるべきレベルを設定します．本問題では前述において設定したソル
バ許容値のに設定します．
2.2.2 コードの実行
以下に示すようなコマンドによって，実行後にログファイルに記録された収束状況を見
ることができるよう，バックグラウンドでコードを実行します．
cd $FOAM_RUN/tutorials/stressAnalysis/solidDisplacementFoam/plateHole
solidDisplacementFoam > log &
実行後には生成されたログファイルを見て，反復回数および解を求める各方向変位の初期・
最終残差などの収束状況を確認します．本ケースの反復許容回数設定では，最終残差は必
ず初期残差の 0.1 倍以下となるはずです．いったん両初期残差ともに 10−6 の収束許容残差
以下となれば，その計算は収束したとみなしバッチジョブを kill することによって止め
ることができます．
2.2.3 後処理
後処理は 2.1.4 項と同様に行うことができます．solidDisplacementFoam ソルバは，応力
場 σ を対称テンソル場として出力します．したがって例えば，σxx を paraFoam で見ること
ができます．OpenFOAM ソルバにおける変数名は通常，それらを表す数学記号にならっ
て名付けられることは，ここで再度述べるに値するでしょう．ギリシア記号の場合は，変
数は発音どおりに名付けられます．例えば，σxx は sigmaxx と名付けられます．
独立したスカラ成分の σxx や σxy などは，2.1.5.7 で述べた foamCalc を sigma に関して
実行して求めます．
foamCalc components sigma
sigmaxx や sigmaxy などと名づけられた成分のファイルが時間のディレクトリに生成され
ます．図 2.18 のように応力を paraFoam で見ることができます．
式 (2.14) の解析解とここで得られた数値解を比較しましょう．そのためには，解析領域
Open∇FOAM-1.7.1
2.2 穴あき板の応力解析 U-57
0
5
10
15
20
25
30
σxx(kPa)
図 2.18 穴あき板における応力場
左端の対称面に沿ってのデータを出力しなければなりません．このようなグラフのために
必要なデータは，sample ユーティリティによって作成することができます．sample の設定
は system ディレクトリ内の sampleDict で行い詳細は表 6.3 に要約しています．データのサ
ンプリングを行う座標区間は，sets によって (0.0, 0.5, 0.25) から (0.0, 2.0, 0.25) に指定さ
れています．物理量は fields に指定します．
17
18 interpolationScheme cellPoint;
19
20 setFormat raw;
21
22 sets
23 (
24 leftPatch
25 {
26 type uniform;
27 axis y;
28 start ( 0 0.5 0.25 );
29 end ( 0 2 0.25 );
30 nPoints 100;
31 }
32 );
33
34 surfaces ();
35
36 fields ( sigmaxx );
37
38
39 // *************************************************************************
//
通常通り sample を実行してください．writeFormat は raw 形式で 2 列のフォーマットと
なっています．データは sets ディレクトリの時刻サブディレクトリの中のファイルに書き
込まれます．たとえば，時刻 t = 100 s のデータは sets/100/leftPatch_sigmaxx.xy に書き込
まれます．GnuPlot のようなアプリケーションでは，コマンドプロンプトで以下を入力す
ることで，数値解および解析解の両方をプロットすることができます．
plot [0.5:2] [0:] ’sets/100/leftPatch_sigmaxx.xy’,
1e4*(1+(0.125/(x**2))+(0.09375/(x**4)))
Open∇FOAM-1.7.1
U-58 第 2 章 チュートリアル
プロット例を図 2.19 に示します．
0
5
10
15
20
25
30
35
0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0
Stress(σxx)x=0(kPa)
Distance, y (m)
Numerical prediction Analytical solution
図 2.19 垂直方向対称面における法線方向応力
2.2.4 演習
以下は solidDisplacementFoam に習熟していただくための演習課題です．
2.2.4.1 メッシュ解像度の増加
x，y 方向それぞれのメッシュ解像度を増やしてみましょう．2.2.3 項の最終的な粗メッ
シュの結果を，mapFields を使って密メッシュの初期条件にマッピングしてください．
2.2.4.2 非等間隔メッシュの導入
穴に近いセルが遠いセルより密になるよう，メッシュ幅を変化させてください．隣接す
るセルの大きさの比率が 1.1 以上にならないように，またブロック間のセルの大きさの比
率がブロック内の比率と同様となるようメッシュを作成してください．メッシュの非等間
隔化については 2.1.6 項で述べました．ここでも，2.2.3 項の最終的な粗メッシュでの結果
を，mapFields を使って非等間隔メッシュの初期条件としてマッピングします．結果を解析
解および非等間隔化する前の結果と比較してみましょう．等間隔メッシュと同一のセル数
を使用した場合，解の精度は改善されるでしょうか？
2.2.4.3 板の大きさの変更
ここで示されている解析解は，有限な大きさの穴を有する無限大板におけるものです．
したがって有限な大きさの板においては，この解析解は必ずしも正確ではありません．誤
差を見積もるために，穴の大きさを同一に保ったまま板を大きくしてみましょう．
2.3 ダムの決壊
このチュートリアルでは，interFoam を用いて，単純化したダム決壊の 2 次元問題を解く
ことにします．この問題の特徴は，くっきりとした界面や自由表面によって隔てられてい
Open∇FOAM-1.7.1
2.3 ダムの決壊 U-59
る二つの流体による非定常の流れ場であることです．interFoam における 2 相流体を解く
アルゴリズムは，Volume of ﬂuid (VOF) 法によるものであり，ここでは特別な輸送方程式
を解いて，計算格子における 2 相の体積分率，もしくは相比率 α1 を決定します．各物理量
は，この相比率に（各流体の）密度をかけた平均的な値として算出されます．個々の物質
の界面は，VOF 法ではその性質上明示的には解かれず，相比率場の特性として浮き上がっ
てくるということになります．相比率は 0 から 1 の間の任意の値をとり得るため，界面は
決してくっきりと定義されませんので，本来のくっきりとした界面が存在するべき領域の
周辺を，（計算上の）界面がぼんやりと占めることになります．
計算条件では，貯水池の左側に，膜で仕切られた水柱が最初存在します．時刻 t = 0 s に，
膜が取り除かれて，水柱が崩れだします．崩壊している間，水流はは貯水槽の底にある出っ
張りにぶつかり，いくつかの気泡を含む，複雑な流れ場の様相を呈します．計算形状と初
期条件は図 2.20 に示しました．
0.584 m
0.048 m
0.024 m
0.584 m
0.292 m
0.1459 m0.1461 m
水柱
図 2.20 ダム決壊の計算形状
2.3.1 格子の生成
$FOAM_RUN/tutorials/multiphase/interFoam/laminar にある damBreak のケースディレ
クトリに移動しましょう．前に述べた方法で blockMesh を走らせて格子を生成してくださ
い．この damBreak の格子は五つのブロックで構成されます．blockMeshDict の中身を以下
に示します．
17
18 convertToMeters 0.146;
19
20 vertices
21 (
22 (0 0 0)
Open∇FOAM-1.7.1
U-60 第 2 章 チュートリアル
23 (2 0 0)
24 (2.16438 0 0)
25 (4 0 0)
26 (0 0.32876 0)
27 (2 0.32876 0)
28 (2.16438 0.32876 0)
29 (4 0.32876 0)
30 (0 4 0)
31 (2 4 0)
32 (2.16438 4 0)
33 (4 4 0)
34 (0 0 0.1)
35 (2 0 0.1)
36 (2.16438 0 0.1)
37 (4 0 0.1)
38 (0 0.32876 0.1)
39 (2 0.32876 0.1)
40 (2.16438 0.32876 0.1)
41 (4 0.32876 0.1)
42 (0 4 0.1)
43 (2 4 0.1)
44 (2.16438 4 0.1)
45 (4 4 0.1)
46 );
47
48 blocks
49 (
50 hex (0 1 5 4 12 13 17 16) (23 8 1) simpleGrading (1 1 1)
51 hex (2 3 7 6 14 15 19 18) (19 8 1) simpleGrading (1 1 1)
52 hex (4 5 9 8 16 17 21 20) (23 42 1) simpleGrading (1 1 1)
53 hex (5 6 10 9 17 18 22 21) (4 42 1) simpleGrading (1 1 1)
54 hex (6 7 11 10 18 19 23 22) (19 42 1) simpleGrading (1 1 1)
55 );
56
57 edges
58 (
59 );
60
61 patches
62 (
63 wall leftWall
64 (
65 (0 12 16 4)
66 (4 16 20 8)
67 )
68 wall rightWall
69 (
70 (7 19 15 3)
71 (11 23 19 7)
72 )
73 wall lowerWall
74 (
75 (0 1 13 12)
76 (1 5 17 13)
77 (5 6 18 17)
78 (2 14 18 6)
79 (2 3 15 14)
80 )
81 patch atmosphere
82 (
83 (8 20 21 9)
84 (9 21 22 10)
85 (10 22 23 11)
86 )
87 );
88
89 mergePatchPairs
90 (
91 );
92
93 // *************************************************************************
Open∇FOAM-1.7.1
2.3 ダムの決壊 U-61
//
2.3.2 境界条件
constant/polyMesh ディレクトリの boundary ファイルを見ることで blockMesh で生成
された境界の形状を確認しましょう．leftWall，rightWall，lowerWall，atmosphere，
defaultFaces の五つの境界パッチがあります．パッチの種類について理解しておきましょ
う．atmosphere は何の属性もなく，単に境界条件によって規定される標準の patch です．
defaultFaces は，本ケースでは 2 次元であるためパッチの法線方向を解析の対象としな
いため，empty とします．leftWall，rightWall，lowerWall はそれぞれ wall です．ただ
の patch と同様に wall もメッシュについて形状や位相の情報をもちませんが，壁として識
別することができるので，アプリケーションに特殊な壁表面のモデリングを明示するため
に wall と定義しています．
interFoam のソルバが，界面と壁面との接点における表面張力に対するモデルを含んでい
る，というのがよい例です．このモデルは alpha1 (α1) 場の alphaContactAngle の境界条
件と関連付けられています．その場合，静的な接触角度 theta0 θ0 や，前縁や後縁におけ
る動的な接触角度である thetaA θA と thetaR θB，そして，動的な接触角度において速度
に比例する係数 uTheta を指定する必要があります．
このチュートリアルでは，壁面と界面間の表面張力による効果を無視することにしたい
と思います．それは，静的な接触角度を θ0 = 90◦ に，速度比例係数を 0 と設定することで
可能です．しかしながら，壁の境界条件として，通常の wall タイプの境界条件を指定する
別なやり方もあります．この場合，alpha1 に対して alphaContactAngle の境界条件を設
定する代わりに，zeroGradient の境界条件を課すことになります．
top の境界は大気に対して開放されていることから，内部流れに応じて流出・流入のい
ずれも可能にしておく必要があります．したがって，以下のような，安定性を維持しなが
らこれを可能にするような圧力と速度に対する境界条件の組み合わせを用いることになり
ます．
• totalPressure は，与えられた全圧 p0 と局所速度 U から計算される ﬁxedValue 条件
です．
• pressureInletOutletVelocity は全成分に zeroGradient を適用しますが，流入がある場
合は例外として ﬁxedValue が接線成分に適用されます
• inletOutlet は，流れが外向きならば zeroGradient であり，流れが内向きならば ﬁxed-
Value です
すべての壁の境界においては，圧力場には buoyantPressure 境界条件を適用しますが，これ
は局所的な密度勾配から法線方向勾配を計算します．
2 次元問題における前後の面を表している defaultFaces パッチは，通常通り empty タ
イプにします．
Open∇FOAM-1.7.1
U-62 第 2 章 チュートリアル
2.3.3 初期条件の設定
これまでのケースと異なり，ここでは相比率 α1 に対して，以下のような非一様な初期条
件を与えます．
α1 =



1 液相
0 気相
(2.15)
これは，setFields ユーティリティを実行することによって行います．この実行には system
ディレクトリ内の setFieldsDict を必要とします．このケースにおける setFieldsDict ファイ
ルの内容を以下に示します．
17
18 defaultFieldValues
19 (
20 volScalarFieldValue alpha1 0
21 );
22
23 regions
24 (
25 boxToCell
26 {
27 box (0 0 -1) (0.1461 0.292 1);
28 fieldValues
29 (
30 volScalarFieldValue alpha1 1
31 );
32 }
33 );
34
35
36 // *************************************************************************
//
ここで，defaultFieldValues は場の規定値を設定するものであり，regions のサブディク
ショナリにおいて別途指定されない場合に場に与えられる値です．regions のサブディク
ショナリは，指定された領域において，規定値を上書きする fieldValues を含んだサブ
ディクショナリのリストを含んでいます．領域の定義は，ある位相幾何学的な制約に基づ
いて，点や格子，界面等の集合を生成する topoSetSource によって行います．ここでは，
boxToCell を使って，大きいほうと小さいほうの二つの座標点で定義されるバウンディン
グ・ボックスを生成し，液体の領域における格子の集合を定義しています．また，この領
域における相比率 α1 を 1 と指定しています．
さて，setFields を他のプログラムと同様に起動してください．そうしたら，paraFoam を
用いて，初期の alpha1 場が図 2.21 のように望むような分布になっているかどうか確かめ
てください．
2.3.4 流体の物性値
constant ディレクトリの transportProperties ファイルを確認しましょう．このファイル
は，phase1 と phase2 に分かれて，各流体の物性値を保持しています．
各相の輸送モデルは，transportModel によって選択されます．
ここで，動粘性係数が nu というキーワードで指定され，一定値である Newtonian モデ
ルを選んでください．
Open∇FOAM-1.7.1
2.3 ダムの決壊 U-63
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Phase fraction, α1
図 2.21 相比率 alpha1 の初期条件
phase1 の物性
動粘性率 m2
s−1
nu 1.0 × 106
密度 kg m−3
rho 1.0 × 103
phase2 の物性
動粘性率 m2
s−1
nu 1.48 × 10−5
密度 kg m−3
rho 1.0
両相の物性
表面張力 N m
1
sigma 0.07
表 2.3 damBreak チュートリアルにおける流体物性
CrossPowerLaw といったその他のモデルにおける粘性係数の指定は，この例における
CrossPowerLawCoeﬀs といったように，<model>Coeﬀs という名のサブディクショナリの
中で行います．
密度の指定は，rho キーワードで行います．
二つの相の間の表面張力は，sigma キーワードで指定します．
このチュートリアルで用いた値を表 2.3 に挙げます．
重力加速度は全領域にわたって一様で，constant ディレクトリの g ファイルで指定され
ます．U や p のような通常のフィールドのファイルと異なり，g は uniformDimensionedVec-
torField であり，単に dimensions と value の組だけを含みます．このチュートリアルで
は (0, 9.81, 0) m s−2 です．
17
18 dimensions [0 1 -2 0 0 0 0];
19 value ( 0 -9.81 0 );
20
21
22 // *************************************************************************
//
Open∇FOAM-1.7.1
U-64 第 2 章 チュートリアル
2.3.5 乱流モデル
キャビティの例題のように，turbulenceProperties ディクショナリの simulationType キー
ワードで乱流のモデリング手法を選択することができます．この例題は乱流モデルを使わ
ずに実行したいので laminar と指定します．
17
18 simulationType laminar;
19
20
21 // *************************************************************************
//
2.3.6 時間ステップの制御
自由界面の捕捉においては，時間ステップの制御は重要です．というのも，界面捕捉の
アルゴリズムは，通常の流体計算に比べ，クーラン数 Co に対してかなり鋭敏だからです．
理想的には，界面がある領域において，およそ 0.5 である Co の上限値を超えてはいけませ
ん．伝播速度の予測が容易であるようなケースでは，Co の制限を守るような固定した時
間ステップを指定することができますが，より複雑なケースの場合時間ステップの指定は
ずっと困難になります．そこで，interFoam では，controlDict において，時間ステップの自
動修正を指定することをお勧めします．adjustTimeStep を on にして，Co の最大値 (相
の場については maxAlphaCo，その他の場については maxCo) を 0.5 にしましょう．時間ス
テップの上限 maxDeltaT はこのシミュレーションでは超えようのない値，たとえば 1.0 等
に設定すればよいでしょう．
ただし，自動時間ステップ制御を用いると，ステップ自体は必ずしも使いやすい値に丸
められるとは限りません．したがって，固定の時間ステップ間隔で OpenFOAM に結果を
出力させた場合，その時刻はきりの良い値になりません．ところがこの自動時間ステップ
制御を用いていても，OpenFOAM では決まった時刻に結果を出力するように指定するこ
とが可能です．この場合，OpenFOAM は，結果の出力に指定された時刻ぴったりに合うよ
うに時間刻みを補正しつつ，自動時間刻みの制御を行います．これを行うには，controlDict
ディクショナリにおける writeControl に対して，adjustableRunTime オプションを選ん
でください．controlDict ディクショナリの中身は以下のようになります．
17
18 application interFoam;
19
20 startFrom startTime;
21
22 startTime 0;
23
24 stopAt endTime;
25
26 endTime 1;
27
28 deltaT 0.001;
29
30 writeControl adjustableRunTime;
31
32 writeInterval 0.05;
33
34 purgeWrite 0;
35
Open∇FOAM-1.7.1
2.3 ダムの決壊 U-65
36 writeFormat ascii;
37
38 writePrecision 6;
39
40 writeCompression uncompressed;
41
42 timeFormat general;
43
44 timePrecision 6;
45
46 runTimeModifiable yes;
47
48 adjustTimeStep yes;
49
50 maxCo 0.5;
51 maxAlphaCo 0.5;
52
53 maxDeltaT 1;
54
55
56 // *************************************************************************
//
2.3.7 離散化スキーム
OpenFOAM における自由表面の扱いは，乱流の影響を考慮しません．これは乱流モデル
に対するレイノルズ平均モデルの手法が空気と水の間のごく薄い表面の概念と適合しない
事実に基づいています．結果として，全ての自由表面シミュレーションは流体の直接数値
シミュレーション (DNS) としてみることができます．DNS はメッシュ数に対して一定の
要求があり，それは我々のテストケースにおけるメッシュの解像度を遥かに超えています．
このソルバは，OpenCFD によって開発された Multidimensional Universal Limiter for
Explicit Solution (MULES) 法を用いており，基礎を成す数値的スキームやメッシュ構造
から独立な段階分数の有界性を保存するために使います．したがって，対流スキームの選
択はそれが静的であるか，また閉鎖系であるかによって制限されません．
したがって，運動量の式における対流項では風上差分を使用して計算を安定させること
とします．風上差分によって導入された数値拡散は計算を安定させることでしょう．
風上の設定は，fvSchemes ディクショナリの divSchemes サブディクショナリ内に作成さ
れており，運動量方程式における ∇ · (ρUU) 項に対応する div(rho*phi,U) キーワード
は，Gauss upwind を読みこみます．相 γ に対する二つの方程式における対流項にはいく
つかの注意を必要とします．適切な精度を維持しつつ有界性を保証しなくてはならないた
め，対流項内での補完間のためには，有界なスカラに対するリミッタ付きの線形なスキー
ムである limitedLinear01 を用います．
リミッタ付きの線形なスキームは 4.4.1 項に記述される係数を必要とします．ここで安
定性を最重視して，キーワード div(phi,alpha) に対応する ∇ · (Uα1) 項，キーワード
div(phirb,alpha) に対応する ∇ · (Urbα1) 項で ϕ = 1.0 の状態を選びます．
その他の離散化項は一般に決ったスキームを使用します．それゆえ fvSchemes ディクショ
ナリのエントリは以下のようになるべきです．
17
18 ddtSchemes
19 {
20 default Euler;
Open∇FOAM-1.7.1
U-66 第 2 章 チュートリアル
21 }
22
23 gradSchemes
24 {
25 default Gauss linear;
26 }
27
28 divSchemes
29 {
30 div(rho*phi,U) Gauss limitedLinearV 1;
31 div(phi,alpha) Gauss vanLeer;
32 div(phirb,alpha) Gauss interfaceCompression;
33 }
34
35 laplacianSchemes
36 {
37 default Gauss linear corrected;
38 }
39
40 interpolationSchemes
41 {
42 default linear;
43 }
44
45 snGradSchemes
46 {
47 default corrected;
48 }
49
50 fluxRequired
51 {
52 default no;
53 p_rgh;
54 pcorr;
55 alpha1;
56 }
57
58
59 // *************************************************************************
//
2.3.8 線形ソルバの制御
fvSolution では，PISO サブディクショナリが interFoam に特化した要素を含んでいます．
ここには，通常と同じく運動量方程式に対する反復数だけでなく，α1 相方程式の PISO ルー
プに対する反復数も指定します．特に興味深いものは nAlphaSubCycles と cAlpha キー
ワードです．nAlphaSubCycles は α1 方程式内の内側反復の数を表してあり，ここで，内
側反復は与えられた時間ステップ内での方程式に対する付加的な解の点数です．それは，
時間ステップや計算時間の莫大な増加なしで解を安定させることができるようにするもの
です．ここでは，二つの sub-cycle を指定しており，α1 方程式は実際の各時間ステップ内
で 2 分の 1 の幅の時間スッテプで 2 回解かれていることを意味します．
cAlpha キーワードは界面の圧縮を制御する要素です．つまり，0 は無圧縮に対応し，1
は保存的な圧縮に対応し，1 以上は拡張された界面の圧縮を意味します．通常はこの例題
で用いられている 1.0 の値が推奨されます．
Open∇FOAM-1.7.1
2.3 ダムの決壊 U-67
2.3.9 コードの実行
コードの実行方法については，前述のチュートリアルに詳細に記述しています．以下を
試してください．tee によって計算内容をターミナルウインドウに表示しつつ，ログファ
イルに記録します．
cd $FOAM_RUN/tutorials/multiphase/interFoam/laminar/damBreak
interFoam | tee log
コードは，出力のコピーを log ファイル内に記録しつつ，対話形式で実行されます．
2.3.10 後処理
結果の後処理は，通常の方法で行えます．図 2.22 のように参照時間の経過とともに相比
率 alpha1 の発達を見ることができます．
2.3.11 並列計算
前述の例の結果はかなり目の粗い格子を使って得られました．ここでは格子の解像度を
増やして再計算します．新しいケースは，一般的に一つのプロセッサでは計算するのに数
時間を要するので，複数のプロセッサにアクセスしているのであれば，OpenFOAM の並
列計算という能力を試してみてもよいでしょう．
まず初めに，damBreak ケースのコピーをしてください．
cd $FOAM_RUN/tutorials/interFoam
mkdir damBreakFine
cp -r damBreak/0 damBreakFine
cp -r damBreak/system damBreakFine
cp -r damBreak/constant damBreakFine
新しいケースは damBreakFine と名づけてください．新しいケースディレクトリを開い
て blockMeshDict ファイル内の blocks の記述を以下のように変更してください．
blocks
(
hex (0 1 5 4 12 13 17 16) (46 10 1) simpleGrading (1 1 1)
hex (2 3 7 6 14 15 19 18) (40 10 1) simpleGrading (1 1 1)
hex (4 5 9 8 16 17 21 20) (46 76 1) simpleGrading (1 2 1)
hex (5 6 10 9 17 18 22 21) (4 76 1) simpleGrading (1 2 1)
hex (6 7 11 10 18 19 23 22) (40 76 1) simpleGrading (1 2 1)
);
上記で，入力は blockMeshDict ファイルで表示されているように，つまりは，格子の密度
を変更しなければなりません．例えば 46 10 1 という入力や 1 2 1 という格子幅の勾配の
入力のようにです．入力内容が正しければ，格子を生成します．
ここで格子が damBreak の例から変更されると，時刻 0 のディレクトリ内の alpha1 とい
う相の場を再初期化しなければなりません．というのも alpha1 は新しい格子とは合致し
ないいくつかの要素を含んでいるからです．ここで，U や p_rgh という場は変更する必要
がないことに注意しましょう．それらは uniform として明記されておりフィールド内の要
素の数と独立だからです．フィールドの初期化はシャープな界面を持つように行いたいも
Open∇FOAM-1.7.1
U-68 第 2 章 チュートリアル
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Phase fraction, α1
(a) t = 0.25 s のとき
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Phase fraction, α1
(b) t = 0.50 s のとき
図 2.22 α1 相のスナップショット
のです．つまり，その要素が α1 = 1 か α1 = 0 をもつようにです．mapFields でのフィール
ドの更新は界面に補間された値 0 < α1 < 1 が生成されるかもしれないので，setFields ユー
ティリティを以下のように再実行したほうがよいでしょう．その前に初期条件の一様な α1
のバックアップファイル 0/alpha1.org を 0/alpha1 にコピーします．
cd $FOAM_RUN/tutorials/interFoam/laminar/damBreakFine
cp -r 0/alpha1.org 0/alpha1
setFields
OpenFOAM で用いられる並列計算の手法はいわゆる領域分割であり，幾何形状やそれに
関連する場が領域ごとに分解されて，解析のため個々のプロセッサに割り当てられます．そ
のため，並列計算を実行するために必要な最初の段階は，decomposePar を用いて領域を分
解することです．decomposePar の設定は system ディレクトリにある，decomposeParDict
Open∇FOAM-1.7.1
2.3 ダムの決壊 U-69
というファイルです．他のユーティリティ同様，初期状態のファイルがユーティリティの
ソースコードのディレクトリ ($FOAM_UTILITIES/parallelProcessing/decomposePar) にあ
ります．
最初の入力の numberOfSubdomains において何個のサブ領域に分割するかを指定します．
通常はこのケースに利用できるプロセッサの数と対応します．
このチュートリアルでは，分解の手法は simple で，対応する simpleCoeffs は以下の基
準のように編集しましょう．領域は，x，y，z 方向で部分かサブ領域に分けられ，各方向へ
のサブ領域の数はベクトル n として与えられます．この幾何形状は 2 次元なので，3 次元
方向のには分割され得ず，それゆえ必ず nz は 1 になります．nx と ny は x，y 方向の領域
の分割数 n を構成し，nx と ny の積で表されるサブ領域の数が numberOfSubdomain に指
定したものと等しくなる必要があります．隣接するサブ領域間のセル面の数を最小にした
ほうがよいので，正方形の幾何形状では，x，y 方向を均等に分割するのが良いでしょう．
delta キーワードは 0.001 に設定しましょう．
例として，四つのプロセッサで計算を実行するとします．numberOfSubdomain を 4 に，
n = (2, 2, 1) に設定します．decomposeParDict を閉じて，decomposePar を実行します．
decomposePar のスクリーンメッセージが確認でき，分解はプロセッサ間で均等に分配され
たと表示されます．
3.4 節に並列計算の方法についての詳細があるので参照してください．このチュートリ
アルでは並列計算の一例を示しているにすぎません．openMPI を用いて標準のメッセージ
パッシングインターフェース (MPI) を実装しています．ここでは，テストとしてローカル
ホストのみの単独ノードで実行します．
mpirun -np 4 interFoam -parallel > log &
3.4.2 項に後述しますが，ケースが実行されるマシンのホストネームを列記したファイルを
作っておけばネットワーク上のより多くのノードを使って計算することも可能です．ケー
スはバックグラウンドで実行し，進行状況を log ファイルで監視するのがよいでしょう．
図 2.23 並列プロセスケースでのプロセッサ 2 のメッシュ
Open∇FOAM-1.7.1
U-70 第 2 章 チュートリアル
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Phase fraction, α1
(a) t = 0.25 s のとき
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Phase fraction, α1
(b) t = 0.50 s のとき
図 2.24 正確なメッシュの α1 相のスナップショット
2.3.12 並列計算ケースの後処理
一度ケースの実行が完了したら，分解されたフィールドとメッシュは reconstructPar を
実行して後処理のために再統合します．コマンドラインから容易に実行できます．細かい
格子による結果は図 2.24 に表されます．インタフェースでの結果は粗い格子のものと比較
して著しく改良されたことがみてとれます．
また，単に個々のプロセッサの領域を一つのケースと扱うことで，分解された領域の部
分を個々に後処理することもできます．
例えば，paraFoam を以下のように起動します．
paraFoam -case processor1
すると processor1 は ParaView のケースモジュールとして表れます．simple 方式を使っ
Open∇FOAM-1.7.1
2.3 ダムの決壊 U-71
た領域分割を行った processor1 から図 2.23 のような格子が見えます．
Open∇FOAM-1.7.1
第3章
アプリケーションとライブラリ
繰り返しいいますが，OpenFOAM は実行のために，基本的に C++ のライブラリを用い
ています．OpenFOAM はプリコンパイル済みの数多くのアプリケーションで構成されて
いますがユーザが独自に作成したり従来のものを修正しても構いません．アプリケーショ
ンは大きく二つのカテゴリに分けられています．
ソルバ 数値連続体力学の特定の問題を解くためのもの
ユーティリティ 主にデータ操作や代数計算を主に行う前後処理を実行するもの
OpenFOAM は一連のプリコンパイル済ライブラリに分けられ，それらはソルバとユーティ
リティの集合体をダイナミックにリンクします．ユーザが適宜独自のモデルをライブラリ
に追加できるように物理的モデルのこのようなライブラリはソースコードとして与えられ
ます．
この章ではソルバ，ユーティリティ，ライブラリの概説とこれらの作成，修正，編集，実
行方法について述べます．
3.1 OpenFOAM のプログラミング言語
OpenFOAM ライブラリィのはたらきを理解するためには OpenFOAM の基本言語であ
る C++ の予備知識がいくらか必要となります．そのために不可欠な知識が本章にありま
す．その前に重要なことは，オブジェクト指向プログラミングや OpenFOAM のメインプ
ログラミング言語としての C++ の選択の背景として一般論で様々な考えを説明するため
の言語の概念に着目することです．
3.1.1 言語とは
口話と数学が普及には，特に抽象的な概念を表現する際の効率性が重要でした．
（概念を表現する際の効率性の）例として，流量について，「速度場 (velocity ﬁeld)」と
いう言葉を私たちが使うとき，流れの性質の言及もせず何ら具体的な速度データがなくと
も使っています．その言葉の中には，運動の向きと大きさやその他の物理的性質との関係
の概念が要約されています．これを数学にすると，「速度場」を U などの簡易な記号で表
し，また速度場の大きさを表したいときには |U| として表記します．数学は口話よりも効
率性に優れ，複雑な概念を極めて明快に表現できます．
連続体力学の中で解析しようとしている問題は，固有の構成要素やタイプとして表現さ
U-74 第 3 章 アプリケーションとライブラリ
れたものでもなく，コンピュータの認識する，いわゆるビット，バイト，数値などの概念
とも異なります．問題はいつも，まず口話で提起され，空間と時間の三次元での偏微分方
程式として表現されます．それらの方程式はスカラ，ベクトル，テンソルそしてそれらの
場，テンソル代数，テンソル解析，次元の単位などの概念を含んでおり，これらの解は離
散化手法やマトリクス，ソルバそして解法アルゴリズムを必要とします．テンソル数学と
値計算法についてはプログラマ・ガイドの第 1 章と第 2 章に記載しています．
3.1.2 オブジェクト指向と C++
C++ のようなオブジェクト指向のプログラミング言語は，宣言の型としてクラスとい
う考え方を採用しており，口語の部分や科学計算や技術計算に用いられる数学的な言語を
取り扱っています．先に紹介した速度場はプログラミングコードでは記号 U で表され，速
度場の大きさは mag(U) で表されます．速度はベクトル場であり，オブジェクト指向コー
ドでは vectorField クラスとなります．速度場 U は，オブジェクト指向の項であることか
ら，この場合 vectorField クラスのインスタンス，あるいはオブジェクトとということに
なります．
プログラミングの中で，物理的なオブジェクトと抽象的な構成要素を表現するオブジェク
ト指向のもっている明瞭さを過小評価してはいけません．クラス構造は，クラス自身など，
開発したコードの領域を包含する集合であるから，容易にコードを管理することができま
す．新しいクラスには，他のクラスからのプロパティを継承させることができることから，
vectorField には vector クラスと Field クラスを継承させることができます．C++ はテ
ンプレートクラスのメカニズムを備えています．例えばテンプレートクラス Field<Type>は
scalar，vector，tensor などどんな<Type>の Field も表現できます．テンプレートクラ
スの一般的な特性はテンプレートから作成されるどんなクラスにも通じます．テンプレー
ト化や継承はコードの重複を減らし，コードの全体構造を決めるクラスのヒエラルキを作
ります．
3.1.3 方程式の説明
OpenFOAM の設計の中心的なテーマは，OpenFOAM のクラスを用いて書かれたソル
バのアプリケーションであり，偏微分方程式の解法と非常に似た構造をもっています．例
えば方程式
∂ρU
∂t
+ ∇ · ϕU − ∇ · µ∇U = −∇p
はコード
solve
(
fvm::ddt(rho, U)
+ fvm::div(phi, U)
- fvm::laplacian(mu, U)
==
- fvc::grad(p)
);
で表されます．
Open∇FOAM-1.7.1
3.2 アプリケーションやライブラリのコンパイル U-75
これらの必要条件として，OpenFOAM の主たるプログラミング言語が継承やテンプレー
トクラス，仮想関数，演算子の多重定義といったオブジェクト指向的特徴をもっているこ
とが必要です．これらの特性は，Fortran 90 のようにオブジェクト指向と称しつつ実際に
は非常に限られたオブジェクト指向の能力しかもっていない多くの言語では十分に利用で
きません．しかし，C++ はこれらの特性をすべてもつうえに，効率性の良い実行ファイ
ルを作り出す信頼性のあるコンパイラを使えるように標準的な仕様が定められたうえで広
く使われているというさらなる長所をもっています．ゆえに OpenFOAM の主要言語なの
です．
3.1.4 ソルバコード
ソルバコードは，解法アルゴリズムと方程式の手続き上の説明のようなものなので当然
のようにほとんど手続きです．オブジェクト指向やソルバを書くための C++ プログラミ
ングへの深い知識は必要ありませんが，オブジェクト指向やクラスの原理やいくらか C++
コードの構文の基礎知識は知っておくべきでしょう．基礎的な方程式やモデルや解法の理
解やアルゴリズムは非常に重要です．
ユーザはたいていの場合 OpenFOAM クラスのどんなコードでも深く考える必要はあり
ません．オブジェクト指向の真髄はユーザが何もしなくてもよいところにあります．単に
クラスの在り方と機能の知識だけでクラスを使うのに十分です．それぞれのクラスやその
機能などの説明は，OpenFOAM の配布物の中に Doxygen で生成された HTML のドキュ
メントとして供給されており，$WM_PROJECT_DIR/doc/Doxygen/html/index.html にあ
ります．
3.2 アプリケーションやライブラリのコンパイル
コンパイルはアプリケーションの開発には必要不可欠の部分であり，各々のコードのピー
スがそれ自身，OpenFOAM のライブラリに依存しているコンポーネントにアクセスする
ことから，細心の管理が必要となります．多くの場合，これらの構築は UNIX/Linux シ
ステムでは標準の UNIX make ユーティティを使ってコンパイルします．しかしながら，
OpenFOAM はより用途が広く簡便性に優れている，wmake でのコンパイルスクリプトを
提供しています．実際，wmake は OpenFOAM のライブラリだけでなく，どのコードにも
使われています．コンパイルのプロセスを理解するために，最初に C++ のある側面とそ
のファイル構成について図 3.1 で説明します．クラスとは，オブジェクトの構築様式，デー
タの格納およびクラスのメンバ関数のような命令文のセットで定義されるものです．クラ
スの定義を含むファイルは.C の拡張子をもっており，例えばクラス nc であればファイル
nc.C と書かれます．このファイルは，他のコードとは独立にコンパイルして nc.so のよう
な拡張子.so をもつオブジェクトライブラリとして知られるバイナリ実行ライブラリファイ
ルとすることができます．コードの一部を，仮に newApp.C などとしてコンパイルすると
き，ユーザーは nc クラスを使うことにより，nc.C を再コンパイルしなくてもランタイムと
して newApp.C で nc.so を呼び出せばよいことになります．これがダイナミックリンクとい
われるものです．
Open∇FOAM-1.7.1
U-76 第 3 章 アプリケーションとライブラリ
int main()
...
...
return(0);
{
}
nc.so
-I#include "nc.H"
nc.H
nc.C
#include "nc.H"
nc
-l
newApp.C
newApp
メインコード クラス
ヘッダファイル
オプション
オプション
リンク
コンパイル コンパイル
定義……
コード……
ライブラリ実行ファイル
図 3.1 ヘッダファイル，ソースファイル，コンパイル，リンク
3.2.1 ヘッダ.H ファイル
エラーチェックをおこなうにあたって，コンパイルするコードの部分がどのクラスで用
いられるか，また実際の操作でどのように振舞うかを認識しなければなりません．それゆ
え，(例えば nc.H のような) .H ファイル拡張子をもつヘッダファイルによってクラス宣言
が必要です．このようなヘッダファイルにはクラス名とその機能が記述されています．
このファイルは，クラスを用いるあらゆるコード（クラス宣言のためのコードも含め）の
最初の部分に置きます．.C コードではどの部分でいくつのクラスを用いてもかまいません
が，かならずクラス宣言のために.H ファイルではじめる必要があります．クラスは他のク
ラスのリソースとして使うことができますが，その場合も関連付けた.H ファイルではじめ
ます．クラスヒエラルキを再帰的に検索することで，結局，上位.C コードが依存している
クラス (これらの.H ファイルは dependency とよばれる) で，すべてのクラスに関するヘッ
ダファイルのリストをコンパイルすることができます．依存リストがあればコンパイラは
ソースファイルが最終コンパイル以来アップデートされているかどうかチェックでき，選
択的に必要な部分だけコンパイルできます．
ヘッダファイルは，例えば
# include "otherHeader.H";
のような # include 命令文を使ったコードに含まれていますが，このようなコードはコ
ンパイラに特定のファイルを読ませるために現在のファイルの読み込みを一時中断させま
す．すべての内蔵コードはヘッダファイルに入れること，コード可読性を高めるためにメ
インコードに relevant location に含めることができます．例えば多くの OpenFOAM アプ
リケーションでは，作成フィールドや読み込みフィールドの入力データのコードはコード
の始めに createFields.H と名づけられたファイルに含まれます．この方法では，ヘッダファ
イルは単独でクラスの宣言として使われるだけではありません．以下のようなその他の機
能とともに依存リストファイルを維持管理するタスクを実行するのが wmake なのです．
Open∇FOAM-1.7.1
3.2 アプリケーションやライブラリのコンパイル U-77
• ソースファイルと，それらが依存しているファイルの依存関係リストの自動作成と
管理
• マルチ・プラットフォームコンパイル適切なディレクトリ構造を通じてハンドルさ
れたマルチプラットフォームでのコンパイルとリンク
• マルチ・ランゲージコンパイルと C や C++ や Java 等のリンケージ
• C や C++，Java のようなマルチ言語でのコンパイルとリンク
• デバッグや最適化，並列処理，分析といったマルチオプションでのコンパイルとリ
ンク
• lex，yacc，IDL，MOC といった，ソースコードの作成プログラムのサポート
• ソースファイルリストの簡潔なシンタックス
• 新規のコードリストのソースファイルリストの自動生成
• 多重分割あるいは静的ライブラリの簡潔なハンドリング
• 新しいタイプのマシンへの拡張性
• make；sh，ksh または csh；lex，cc をもついかなるマシンでの作業に対する優れ
た移植性
• Apollo，SUN，SGI，HP (HPUX)，Compaq (DEC)，IBM (AIX)，Cray，Ardent,
Stardent，PC Linux，PPC Linux，NEC，SX4，Fujitsu VP1000 での動作確認
3.2.2 wmake によるコンパイル
OpenFOAM のアプリケーションは各アプリケーションのソースコードがそのアプリケー
ション名のディレクトリに置かれるという一般的決まりで編成されます．最上位ソースファ
イルはアプリケーション名に拡張子.C をつけます．例えば，newApp というアプリケーショ
ンのソースコードは図 3.2 に示すように newApp のディレクトリに存在し，最上位ファイ
ルは newApp.C となります．
newApp
newApp.C
otherHeader.H
Make
ﬁles
options
図 3.2 アプリケーションのディレクトリ構成
ディレクトリは options と ﬁles の二つのファイルを含んだ Make というサブディレクトリ
ももっており，それについては次節で述べます．
3.2.2.1 ヘッダの読み込み
コンパイラは，以下の順で wmake で− I オプションが指定されたヘッダファイルを検索
します．
Open∇FOAM-1.7.1
U-78 第 3 章 アプリケーションとライブラリ
1. $WM_PROJECT_DIR/src/OpenFOAM/lnInclude ディレクトリ
2. newApp/lnInclude のようなローカルディレクトリ
3. newApp のようなローカルディレクトリ
4. /usr/X11/include や$(MPICH_ARCH_PATH)/include のように，プラットフォーム
に依存する$WM_PROJECT_DIR/wmake/rules/$WM_ARCH/ディレクトリの中の
ファイルに設定されているパス
5. -I オプションをもつ Make/options ファイルの中で明確に指定されている他のディ
レクトリ
Make/options ファイルは構文を使っているヘッダファイルを配置するためのフルディレク
トリパスを含みます．
EXE_INC = \
-I<directoryPath1> \
-I<directoryPath2> \
... \
-I<directoryPathN>
ディレクトリ名は頭に-I をつけ，各行では EXE_INC を続けるために構文は\を使い，最終
記入後は\をつけないことに注意してください．
3.2.2.2 ライブラリへのリンク
コンパイラは，以下の wmake の-L オプションで指定されたディレクトリパスのオブジェ
クトライブラリファイルにリンクします．
1. $FOAM_LIBBIN ディレクトリ
2. $WM_DIR/rules/$WM_ARCH/デイレクトリの中に設定された機種に依存するパス，
例えば，/usr/X11/や$(MPICH_ARCH_PATH)/lib
3. Make/options ファイルで指定された他のディレクトリ
リンクされる実際のライブラリファイルは-l オプションで指定し，接頭辞 lib，ライブラ
リファイルの拡張子.so を外さなければなりません．例えばライブラリ libnew.so はフラ
グ-lnew に含まれます．
デフォルトでは，wmake は以下のライブラリをロードするようになっています
1. $FOAM_LIBBIN ディレクトリからの libOpenFOAM.so ライブラリ
2. $WM_DIR/rules/$WM_ARCH/ディレクトリの中のファイルに設定された機種に依
存するライブラリ，例えば，/usr/X11/libにおけるlibm.soや，$(LAM ARCH PATH)/lib
における liblam.so
3. Make/options ファイルで指定された他のライブラリ
Make/options ファイルは構文を使っているヘッダファイルをおくための全ディレクトリパ
スを含みます．
EXE_LIBS = \
-L<libraryPath1> \
-L<libraryPath2> \
... \
-L<libraryPathN> \
-l<library1> \
Open∇FOAM-1.7.1
3.2 アプリケーションやライブラリのコンパイル U-79
-l<library2> \
... \
-l<libraryN>
繰り返しになりますが，ディレクトリパスは頭に-L フラグを付け，ライブラリ名は頭に-l
フラグをつけます．
3.2.2.3 コンパイルすべきソースファイル
コンパイラはコンパイルすべき.C ソースファイルのリストが必要です．リストはメイン
の.C ファイルだけではなく特定のアプリケーションのために生成されるがクラスライブラ
リの中に含まれない他のソースファイルも含まれなければなりません．例えば，新しいク
ラスを作成したり，特定のアプリケーション用のクラスに新しい機能をつけくわえること
ができます．.C ソースファイルのフルリストは Make/ﬁles ファイルに含む必要があります．
当然，アプリケーションは多くなるので，フルリストには (例えば前述のアプリケーショ
ン例における newApp.C のような) メイン.C ファイルの名前だけを入れます．Make/ﬁles
ファイルは EXE =構文によって指定されたコンパイル済み実行ファイルの名前とフルパス
も含みます．一般的な決まりでは newApp のようにアプリケーション名をつけることが規
定されています．OpenFOAM のリリースにはパスのために便利な二つの選択肢がありま
す．標準的なリリースではアプリケーションは$FOAM_APPBIN に保存されますが，ユー
ザにより開発されたアプリケーションは$FOAM_USER_APPBIN に保存されます．
もしアプリケーションを開発したら，個人の OpenFOAM アプリケーションのためのソー
スコードを含む$WM_PROJECT_USER_DIR ディレクトリにアプリケーションサブディ
レクトリを作ることをお薦めします．スタンダードアプリケーションと同様に各 Open-
FOAM アプリケーションのソースコードも各ディレクトリ内に保存しておいてください．
ユーザーアプリケーションとスタンダードリリースのものの違いは Make/ﬁles ファイルが
$FOAM_USER_APPBIN ディレクトリ内に書き込まれている実行可能ファイルを指定して
いることだけです．例としての Make/ﬁles を以下に記載します．
newApp.C
EXE = $(FOAM_USER_APPBIN)/newApp
3.2.2.4 wmake の実行
wmake のスクリプトは以下のように入力することで実行されます．
wmake <optionalArguments> <optionalDirectory>
<optionalDirectory> はコンパイルしようとしているアプリケーションのディレクトリ
パスです．通常，<optionalDirectory> が省略可能な場合には wmake はコンパイル中の
アプリケーションのディレクトリ内から実行されます．
アプリケーションファイルを作成したい場合には<optionalArguments>は必要ありませ
ん．しかし<optionalArguments>は表 3.1 に示すようにライブラリ等の作成の際には指定
されることになります．
3.2.2.5 wmake の環境変数
参考として，wmake で使われる環境変数の設定を表 3.2 に示します．
Open∇FOAM-1.7.1
U-80 第 3 章 アプリケーションとライブラリ
Argument コンパイルの種類
lib 静的にリンクされたライブラリの作成
libso 動的にリンクされたライブラリの作成
libo 静的にリンクされたオブジェクトファイルライブラリの作成
jar JAVA アーカイブの作成
exe 特定のプロジェクトから独立したアプリケーションの作成
表 3.1 wmake のコンパイルオプション
3.2.3 依存リストの削除：wclean と rmdepall
実行に際して，例題における newApp.dep のように，wmake は拡張子として.dep をもっ
た依存関係のリストファイルを構築し，Make/$WM_OPTIONS ディレクトリの中にファ
イルのリストを格納します．コードを変更して make した後などこれらファイルを除去し
たい場合には，wclean を入力してスクリプトを実行します．
wclean <optionalArguments> <optionalDirectory>
さらに，<optionalDirectory>はコンパイルされるアプリケーションのディレクトリへの
パスです．通常，パスが省略できる場合には wclean はアプリケーションのディレクトリ範囲
内で実行されます．もし Make ディレクトリから依存ファイルとファイルを削除したい場合
には，<optionalArguments>は必要ありません．しかしもし lib が<optionalArguments>
に指定されていたらローカルの InInclude ディレクトリも削除される必要があります．
追加のスクリプト，rmdepall は実行時に，再帰的にディレクトリツリー下の依存関係に
あるすべての.dep ファイルを除去します．これは OpenFOAM のライブラリが更新された
ときには有効な方法です．
3.2.4 コンパイルの例：pisoFoam アプリケーション
アプリケーションpisoFoamのソースコードは$FOAM_APP/solvers/incompressible/pisoFoam
ディレクトリ内にあり，最上位ソースファイルは pisoFoam.C という名前です．pisoFoam.C
ソースコードは
1 /*---------------------------------------------------------------------------*\
2 ========= |
3 \\ / F ield | OpenFOAM: The Open Source CFD Toolbox
4 \\ / O peration |
5 \\ / A nd | Copyright (C) 1991-2010 OpenCFD Ltd.
6 \\/ M anipulation |
7 -------------------------------------------------------------------------------
8 License
9 This file is part of OpenFOAM.
10
11 OpenFOAM is free software: you can redistribute it and/or modify it
12 under the terms of the GNU General Public License as published by
13 the Free Software Foundation, either version 3 of the License, or
14 (at your option) any later version.
15
16 OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
17 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
18 FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
19 for more details.
20
21 You should have received a copy of the GNU General Public License
22 along with OpenFOAM. If not, see <http://www.gnu.org/licenses/>.
23
24 Application
Open∇FOAM-1.7.1
3.2 アプリケーションやライブラリのコンパイル U-81
主なパス
$WM_PROJECT_INST_DIR イ ン ス ト ー ル デ ィ レ ク ト リ へ の フ ル パ ス ，例：
$HOME/OpenFOAM
$WM_PROJECT コンパイルされたプロジェクトの名前：OpenFOAM
$WM_PROJECT_VERSION コンパイルされたプロジェクトのバージョン：1.7.1
$WM_PROJECT_DIR OpenFOAM のバイナリ実行ファイル置き場へのフルパス，
例：$HOME/OpenFOAM/OpenFOAM-1.7.1
$WM_PROJECT_USER_DIR ユーザのバイナリ実行ファイル置き場へのフルパス，
例：$HOME/OpenFOAM/$USER-1.7.1
その他のパスと設定
$WM_ARCH マシン・アーキテクチャ：Linux, SunOS
$WM_ARCH_OPTION 32 あるいは 64 ビットのアーキテクチャ
$WM_COMPILER 使用するコンパイラ：Gcc43 - gcc 4.3.3, ICC - Intel
$WM_COMPILER_DIR コンパイラインストールディレクトリ
$WM_COMPILER_BIN コンパイラインストールバイナリ：$WM_COMPILER_BIN/bin
$WM_COMPILER_LIB コ ン パ イ ラ イ ン ス ト ー ル ラ イ ブ ラ リ：
$WM_COMPILER_BIN/lib
$WM_COMPILE_OPTION コンパイルオプション：Debug - debugging, Opt optimisation.
$WM_DIR wmake ディレクトリのフルパス
$WM_JAVAC_OPTION JAVA のためのコンパイルオプション：Debug - debugging, Opt
optimisation.
$WM_LINK_LANGUAGE ライブラリや実行ファイルのリンクに使うコンパイラ．多言語
プロジェクトにおいて$WM_LINK_LANGUAGE は主要言語を
決める．
$WM_MPLIB 並列通信ライブラリ：LAM，MPI，MPICH，PVM
$WM_OPTIONS = $WM_ARCH$WM_COMPILER...
...$WM_COMPILE_OPTION$WM_MPLIB，
例：linuxGcc3OptMPICH
$WM_PRECISION_OPTION コンパイルされたバイナリの精度，SP なら単精度，もしくは，
DP なら倍精度
$WM_PROJECT_LANGUAGE プロジェクトのプログラミング言語，例：c++
表 3.2 wmake の環境変数の設定
25 pisoFoam
26
27 Description
28 Transient solver for incompressible flow.
29
30 Turbulence modelling is generic, i.e. laminar, RAS or LES may be selected.
31
32 \*---------------------------------------------------------------------------*/
33
34 #include "fvCFD.H"
35 #include "singlePhaseTransportModel.H"
36 #include "turbulenceModel.H"
37
38 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
39
40 int main(int argc, char *argv[])
41 {
42 #include "setRootCase.H"
43
44 #include "createTime.H"
45 #include "createMesh.H"
46 #include "createFields.H"
47 #include "initContinuityErrs.H"
48
49 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
50
Open∇FOAM-1.7.1
U-82 第 3 章 アプリケーションとライブラリ
51 Info<< "\nStarting time loop\n" << endl;
52
53 while (runTime.loop())
54 {
55 Info<< "Time = " << runTime.timeName() << nl << endl;
56
57 #include "readPISOControls.H"
58 #include "CourantNo.H"
59
60 // Pressure-velocity PISO corrector
61 {
62 // Momentum predictor
63
64 fvVectorMatrix UEqn
65 (
66 fvm::ddt(U)
67 + fvm::div(phi, U)
68 + turbulence->divDevReff(U)
69 );
70
71 UEqn.relax();
72
73 if (momentumPredictor)
74 {
75 solve(UEqn == -fvc::grad(p));
76 }
77
78 // --- PISO loop
79
80 for (int corr=0; corr<nCorr; corr++)
81 {
82 volScalarField rUA = 1.0/UEqn.A();
83
84 U = rUA*UEqn.H();
85 phi = (fvc::interpolate(U) & mesh.Sf())
86 + fvc::ddtPhiCorr(rUA, U, phi);
87
88 adjustPhi(phi, U, p);
89
90 // Non-orthogonal pressure corrector loop
91 for (int nonOrth=0; nonOrth<=nNonOrthCorr; nonOrth++)
92 {
93 // Pressure corrector
94
95 fvScalarMatrix pEqn
96 (
97 fvm::laplacian(rUA, p) == fvc::div(phi)
98 );
99
100 pEqn.setReference(pRefCell, pRefValue);
101
102 if
103 (
104 corr == nCorr-1
105 && nonOrth == nNonOrthCorr
106 )
107 {
108 pEqn.solve(mesh.solver("pFinal"));
109 }
110 else
111 {
112 pEqn.solve();
113 }
114
115 if (nonOrth == nNonOrthCorr)
116 {
117 phi -= pEqn.flux();
118 }
119 }
120
121 #include "continuityErrs.H"
Open∇FOAM-1.7.1
3.2 アプリケーションやライブラリのコンパイル U-83
122
123 U -= rUA*fvc::grad(p);
124 U.correctBoundaryConditions();
125 }
126 }
127
128 turbulence->correct();
129
130 runTime.write();
131
132 Info<< "ExecutionTime = " << runTime.elapsedCpuTime() << " s"
133 << " ClockTime = " << runTime.elapsedClockTime() << " s"
134 << nl << endl;
135 }
136
137 Info<< "End\n" << endl;
138
139 return 0;
140 }
141
142
143 // *************************************************************************
//
コードはアプリケーションを説明している記述で始まり，この中で 1 行のコメントは //
で，複数行にわたるコメントは /*...*/ で記述されます．それに続き，コードはコンパイ
ラに現在のファイルの読み込みを一時停止させ，pisoFoam.C に fvCFD.H を読み込ませるた
めの例えば#include "fvCFD.H"のような様々な # include 命令文を含んでいます．
pisoFoamはincompressibleRASModelsやincompressibleLESModelsやincompressibleTrans-
portModels ライブラリを提供し，それゆえ EXE_INC = -I... オプションとライブラリに
リンクする EXE_LIBS = -l... オプションにより指定されるヘッダファイルが必要となり
ます．Make/options はそれゆえ以下のようになります．
1 EXE_INC = \
2 -I$(LIB_SRC)/turbulenceModels/incompressible/turbulenceModel \
3 -I$(LIB_SRC)/transportModels \
4 -I$(LIB_SRC)/transportModels/incompressible/singlePhaseTransportModel \
5 -I$(LIB_SRC)/finiteVolume/lnInclude
6
7 EXE_LIBS = \
8 -lincompressibleRASModels \
9 -lincompressibleLESModels \
10 -lincompressibleTransportModels \
11 -lfiniteVolume \
12 -lmeshTools
pisoFoam は pisoFoam.C ソースしか含まず，実行ファイルはすべての標準的なアプリケー
ションと同様に$FOAM_APPBIN に書き込まれます．Make/ﬁles はそれゆえ以下のように
なります．
1 pisoFoam.C
2
3 EXE = $(FOAM_APPBIN)/pisoFoam
$FOAM_CFD/pisoFoam ディレクトリで wmake とタイプすれば pisoFoam をコンパイルで
きます．
コードはコンパイルされ以下のようなメッセージをが作成されます．
Making dependency list for source file pisoFoam.C
SOURCE DIR=.
SOURCE=pisoFoam.C ;
Open∇FOAM-1.7.1
U-84 第 3 章 アプリケーションとライブラリ
g++ -DFOAM EXCEPTION -Dlinux -DlinuxOptMPICH
-DscalarMachine -DoptSolvers -DPARALLEL -DUSEMPI -Wall -O2 -DNoRepository
-ftemplate-depth-17 -I.../OpenFOAM/OpenFOAM-1.7.1/src/OpenFOAM/lnInclude
-IlnInclude
-I.
......
-lmpich -L/usr/X11/lib -lm
-o .../OpenFOAM/OpenFOAM-1.7.1/applications/bin/linuxOptMPICH/pisoFoam
再コンパイルすることも可能ですが，実行ファイルが最新でコンパイルする必要がないと
いうときには以下のようなメッセージが返ってきます．
make: Nothing to be done for ‘allFiles’.
make: ‘Make/linuxOptMPICH/dependencies’ is up to date.
make: ‘.../OpenFOAM/OpenFOAM-1.7.1/applications/bin/linuxOptMPICH/pisoFoam’
is up to date.
wclean
を使って依存リストを削除し，wmake を起動することでゼロからアプリケーションをコン
パイルできます．
3.2.5 デバッグメッセージと最適化スイッチ
OpenFOAM は，実行時にメッセージを出力するシステムを提供しており，これらのメッ
セージの多くは，OpenFOAMのケースの実行時に遭遇する問題のデバッグに役立ちます．そ
のスイッチは$WM_PROJECT_DIR/etc/controlDictファイルの中にあり，設定を変更したい
場合には，$HOMEディレクトリに (例えば$HOME/.OpenFOAM/1.7.1/controlDictファイル
のように) コピーを作成します．スイッチが可能なリストは非常に多く，foamDebugSwitches
アプリケーションを実行することにより閲覧できます．スイッチのほとんどは，クラスま
たは機能性のレンジと一致しており，設定を 1 にすることにより，controlDict ファイルの
中にあるそれ自身により変更できます．例えば，OpenFOAM では，dimensionSet スイッ
チを 1 に設定することにより，すべての計算におけるディメンションをチェックする機能
があります．表 3.3 に示すものはより高機能にメッセージをコントロールできるスイッチ
です．
加えて，いくつかのオペレーションと最適化をコントロールするスイッチがあります．こ
れらのスイッチについても表 3.3 に示します．特に重要なものは fileModificationSkew
であり，OpenFOAM では，変更をチェックするためにデータファイルの書き込み時間をス
キャンしています．異なるマシンでクロックの設定に不整合が生じた状態で NFS を実行す
ると，先駆けしてフィールドデータの修正が表示されます．このことは，OpenFOAM が
新規に修正されたとしてファイルを閲覧する場合と，このデータを再読み込みしようとす
る場合には問題を引き起こすことになります．キーワード fileModificationSkew は秒単
位の時間であり，OpenFOAM は，ファイルが新しく修正されたかどうか調べるときには，
ファイルの書き込み時間から差し引きます．
Open∇FOAM-1.7.1
3.3 アプリケーションの実行 U-85
ハイレベルデバッグスイッチ - サブディクショナリ DebugSwitches
level OpenFOAM のデバッグメッセージの全体のレベル - - 0, 1, 2 の 3 レ
ベル
lduMatrix 実行中のソルバの収束メッセージ - 0, 1, 2 の 3 レベル
最適化スイッチ - サブディクショナリ OptimisationSwitches
fileModificationSkew NFS の上で NFS のアップデートの最大遅れと OpenFOAM 実行のた
めの差分クロックより長く設定すべき時間（秒）．
nProcsSimpleSum 並列処理のために全領域の和を最適化します．階層和は線形和（デ
フォルトで 16）よりよく機能し，プロセッサの数を設定します．
表 3.3 ランタイムメッセージスイッチ
3.2.6 現在のアプリケーションへの新しいユーザ定義ライブラリのリンク
タイトルのような状況は，新しいライブラリ (例えば new) を作成するとき，新しい宣言
およびアプリケーションのレンジを越えてライブラリの中に入れ込みたい場合に生じるこ
とが考えられます．例えば，ユーザーが新規の境界条件を作成し，new の中でコンパイル
し，ソルバのアプリケーションや，前および後処理用のユーティリティ，メッシュツール
等々の範囲で認識させる必要があることがあります．通常の環境下では，ユーザはすべて
のアプリケーションを，リンクさせるために new で再コンパイルする必要があります．
その代わりに OpenFOAM では，一つもしくは複数の共有オブジェクトライブラリを実行
時に動的にリンクさせるメカニズムを採用しています．そのためには，ただ単に controlDict
にオプションのキーワードである libs を追加し，ライブラリの完全なファイル名を引用符
付き文字列のエントリとしてリストに入力すればすればよいだけです．たとえば new1 と
new2 というライブラリを実行時にリンクしたいなら，controlDict に以下を書き加えます．
libs
(
"libnew1.so"
"libnew2.so"
);
3.3 アプリケーションの実行
各アプリケーションは，ターミナルのコマンドラインから実行されるようになっており，
個別のケースに関連したデータファイルのセットの書き込みと読み込みが行われるように
なっています．ケースに関するデータファイルは 4.1 節で述べているように，ケースの後
に名前をつけられたディレクトリの中に格納されており，ここではフルパスをもつディレ
クトリ名は一般名<caseDir>としています．
どのアプリケーションにおいても，コマンドラインの入力フォームはコマンドラインで
アプリーション名に-help オプションをつけて入力するだけで見つけられます．例えば
blockMesh -help
と入力すると以下を含むデータが返ってきます．
Usage: blockMesh [-region region name] [-case dir] [-blockTopology]
[-help] [-doc] [-srcDoc]
Open∇FOAM-1.7.1
U-86 第 3 章 アプリケーションとライブラリ
角括弧 [ ] 内の引数はオプショナルフラグです．アプリケーションがケースディレクトリ
内で実行されると，そのケースを作動します．あるいは，-case <caseDir>オプションで
は，直接ファイリングシステムでどこからでもアプリケーションを実行できるようにケー
スを指定することもできます．
すべての UNIX/Linux の実行方法と同様に，アプリケーションは，バックグラウンド
のプロセスで実行しており，ユーザがシェルに追加コマンドを与える必要はありません．
blockMesh のサンプルをバックグラウンドのプロセスで実行し，ケースの進捗をログファ
イルに出力したい場合には，以下のように入力します．
blockMesh > log &
3.4 アプリケーションの並列実行
この節では複数のプロセッサによる並列処理での OpenFOAM の実行方法について説明
します．OpenFOAM による並列処理の方法はドメインの分割として知られており，ジオ
メトリと関連したフィールドを解析に用いるプロセッサに合わせてピースに分割します．
並列処理には，メッシュとフィールドの分割と，並列でのアプリケーションの実行があり
ますが，分割したケースの前処理については以降の節で説明します．並列処理には，標準
の MPI (message passing interface) の実装である openMPI というパブリックドメインを
使用しています．
3.4.1 メッシュの分解と初期フィールド・データ
メッシュとフィールドは，decomposePar ユーティティを用いて分割します．この根本的
な目的は，最小限の労力でドメインを分割しつつ，解析の効率性を向上させようとするも
のです．ジオメトリとフィールドのデータは，decomposeParDict と名前のつけられたディ
クショナリの中で指定されたパラメータにより分割されますが，このディクショナリは対
象とするケースの system ディレクトリの中におかれている必要があります．もしユーザが
必要とする場合には，interFoam/damBreak チュートリアルから decomposeParDict ディク
ショナリをコピーすることができます．そして，ディクショナリ中のエントリを次のよう
に置き換えます．
17
18 numberOfSubdomains 4;
19
20 method simple;
21
22 simpleCoeffs
23 {
24 n ( 2 2 1 );
25 delta 0.001;
26 }
27
28 hierarchicalCoeffs
29 {
30 n ( 1 1 1 );
31 delta 0.001;
32 order xyz;
33 }
34
Open∇FOAM-1.7.1
3.4 アプリケーションの並列実行 U-87
35 metisCoeffs
36 {
37 processorWeights ( 1 1 1 1 );
38 }
39
40 manualCoeffs
41 {
42 dataFile "";
43 }
44
45 distributed no;
46
47 roots ( );
48
49
50 // *************************************************************************
//
ユーザは，以下に述べる method キーワードにより指定できる四つの分割方法から選択し
ます．
simple 簡単なジオメトリの分割：ドメインは x，y 方向に，例えば x 方向に二つに，y 方
向一つにというように，ピースが分割されます．
hierarchical 階層的なジオメトリの分割方法：基本的には simple と同じですが，ユー
ザが，最初に y 方向を，次に x 方向を，というように，各方向の分割する順番を指
定する点が異なっています．
scotch Scotch 分割はユーザからのジオメトリの入力を必要とせず，プロセッサの限界
の数値を最小化するよう試みます．ユーザは，任意指定の processorWeights キー
ワードによりプロセッサ間の重み付けを行うことができるため，パフォーマンス
の異なるマシン同士を有効に使うことができます．また，もう一つ strategy と
いう任意のキーワードエントリがあり，複雑な文字列を Scotch に渡すことによ
り分割の戦略を制御できます．さらなる情報を得るには，ソースコードファイル
$FOAM_SRC/decompositionMethods/decompositionMethods/scotchDecomp/scotchDecomp.C
を読んでください．
metis METIS 分割は Scotch と似ていますが，このライブラリは商用利用がフリーでは
ないので，将来リリースする OpenFOAM では Scotch を支持し，こちらは廃止して
いきます．
manual マニュアルでの分割：個別のプロセッサに対して，各々のセルの割り当てを直接
指定します．
これらの各 method については，ディクショナリのリストに示すように，<method>coeffs
と名前の付けられた decompositionDict のサブディクショナリの中で指定された係数のセッ
トがあります．decompositionDict ディクショナリの中にある入力のキーワードのフルセッ
トの説明を，表 3.4 に示します．
decomposePar ユーティリティは以下のように入力することで正常に実行されます．
decomposePar
最終的に，ケースディレクトリ内に各プロセッサに一つずつ一連のサブディレクトリが作
成されるでしょう．そのディレクトリはプロセッサナンバを表す N = 0, 1, . . . を用いて
Open∇FOAM-1.7.1
U-88 第 3 章 アプリケーションとライブラリ
必須入力
numberOfSubdomains サブドメインの総数 N
method 分割方法
simple/
hierarchical/
scotch/ metis/
manual/
simpleCoeffs エントリ
n x，y，z のサブドメイン数 (nx, ny, nz)
delta セルのスキュー因数 一般的には，10−3
hierarchicalCoeffs エントリ
n x，y，z のサブドメイン数 (nx, ny, nz)
delta セルのスキュー因数 一般的には，10−3
order 分割の順序 xyz/xzy/yzx...
scotchCoeffs エントリ
processorWeights プロセッサへのセルの割当の重み係数の一覧．
例：<wt1>はプロセッサ 1 の重み係数．重みは
規格化され，どんな範囲の値も取ることが可
能．
(<wt1>...<wtN>)
strategy 分割の戦略．デフォルトは"b"
metisCoeffs エントリ
processorWeights 同上 (<wt1>...<wtN>)
manualCoeffs エントリ
dataFile プロセッサへのセルの割当のデータを含むファ
イル名
"<fileName>"
分散型データの入力（オプション）—3.4.3 項参照
distributed データはいくつかのディスクのに分散します
か？
yes/no
roots ケースディレクトリへのルートパス．例：
<rt1>はノード 1 へのルートパス
(<rt1>...<rtN>)
表 3.4 decompositionDict ディクショナリのキーワード
processorN と名づけられ，そして分割されたフィールドの説明を含むタイムディレクトリ
や分解されたメッシュの説明を含む constant/polyMesh ディレクトリをもっています．
3.4.2 分解ケースの実行
分解された OpenFOAM のケースは MPI の openMPI を使って並列実行されます．
構成される LAM マルチコンピュータのホストマシンの名前があるファイルを作成する
必要があります．ファイルには名前とパスを与えることができます．以下の記述では，フ
ルパスを含んだ一般的な名前として<machines>としています．
この<machines>ファイルは，1 行ごとに 1 台のマシンのリストをもっています．これら
の名前は，LAM のスタート時にマシンの/etc/hosts ファイルの中のホスト名と，完全に一
致させる必要があります．リストには，openMPI を実行するマシンの名前をもたせる必要
があります．ここに，マシンのノードは一つ以上のプロセッサをもっており，ノードの名
称は cpu=n の登録に依存しますが，この n はノード上で openMPI が実行されるプロセッ
Open∇FOAM-1.7.1
3.4 アプリケーションの並列実行 U-89
サの数です．
例として，aaa，二つのプロセッサをもつ bbb，ccc というマシン構成からマシン aaa を
ホストとして openMPI を実行させるものとします．<machines>は次のようにします．
aaa
bbb cpu=2
ccc
openMPI はそのとき以下の実行によって起動されます．
あるアプリケーションを mpirun を使って並列実行します．
mpirun --hostfile <machines> -np <nProcs>
<foamExec> <otherArgs> -parallel > log &
ここにあげた<nProcs>はプロセッサーの数，<foamExec>は icoFoam のような実行可能な
ファイル名であり，アウトプットは log と名前の付けられたファイルに変更されています．
例えば，$FOAM_RUN/tutorials/incompressible/icoFoam ディレクトリの中の cavity チュー
トリアルにおいて icoFoam を四つのノード上で走らせる場合には，以下のコマンドを実行
させる必要があります
mpirun --hostfile machines -np 4 icoFoam -parallel > log &
3.4.3 複数のディスクへのデータの分配
例であげたように，ローカルのディスクのみのパフォーマンスを向上させるために，デー
タファイルを分配する必要が生じる場合が考えられます．このようなケースでは，ユーザ
は異なるマシン間のケースディレクトリに対するパスを見つけなければなりません．その
場合には，distributed と roots のキーワードを使って，パスを decomposeParDict ディ
クショナリの中に指定する必要があります．distributed のエントリが以下のように読み
込まれなければなりません．
distributed yes;
また，roots のエントリは，各々のノードである，<root0>，<root1>，. . . ，のルートパ
スのリストとなっています．
roots
<nRoots>
(
"<root0>"
"<root1>"
...
);
<nRoots>はルートの数です．
各 processorN ディレクトリは，decomposeParDict ディクショナリの中で指定された各
Open∇FOAM-1.7.1
U-90 第 3 章 アプリケーションとライブラリ
ルートパスにあるケースディレクトリの中に置かなければなりません．system ディレク
トリや constant ディレクトリ中のファイルについてもまた，各々のケースディレクトリの
中にある必要があります．constant ディレクトリの中のファイル類は必要となりますが，
polyMesh ディレクトリは必要のないことに注意してください．
3.4.4 並列実行されたケースの後処理
並列実行されたケースの後処理時には，ユーザにふたつのオプションがあります．
完全なドメインとフィールドを再生するためにメッシュとフィールドの再構築を行う．
ここではノーマルとして後処理を行うことができます．分割されたドメインを個別に引数
で後処理を行う．
3.4.4.1 メッシュとデータの再構築
ケースが並列処理された後に，後処理によって再構築を行うことができます．ケースは，
時刻ディレクトリの一つのセットの中にある各 processorN ディレクトリから，時刻ディレ
クトリのセットを合併操作することにより再構築されます．reconstructPar ユーティティ
は，次のように，コマンドラインから実行することにより機能を発揮します
reconstructPar
データが異なるディスクに分散されるときには，最初に，再構築におけるローカルのケー
スディレクトリにコピーされる必要があります．
3.4.4.2 分解ケースの後処理
6.1 節に示すように paraFoam ポストプロセッサを使って分割された各ケースの後処理を
行えます．シミュレーション全体はケースを再構築することで後処理できますし，または
その代わりに個々のプロセッサディレクトリをそれ自体でひとつのケースとして扱うこと
で個々に分解されたドメインのセグメントを後処理することもできます．
3.5 標準のソルバ
OpenFOAM のディストリビューションのソルバは$FOAM_SOLVERS ディレクトリの中
にあり，コマンドラインから app と入力すれば素早く到達できます．このディレクトリは
さらに，非圧縮流体のような連続体力学，対流および固体応力解析等のカテゴリにより，い
くつかのディレクトリに再分割されています．各ソルバには，非圧縮性・層流の icoFoam
ソルバといったように分かりやすい名前がつけられています．この OpenFOAM で提供さ
れているソルバのリストを表 3.5 に示します．
基礎的な CFD コード
laplacianFoam 固体の熱拡散のような単純なラプラス方程式を解く
potentialFoam シンプルなポテンシャル流のコード．完全ナビエ・ス
トークスコードを解く際の保存された初期値の生成に
も使用できる
scalarTransportFoam パッシブスカラの輸送方程式を解く
非圧縮性流れ
Open∇FOAM-1.7.1
3.5 標準のソルバ U-91
boundaryFoam 1 次元の乱流用の定常状態ソルバで，通常，解析では
流入口で境界層条件を発生させます．
channelFoam チャネル内流れ用の非圧縮 LES
icoFoam 非圧縮性，層流の速度-圧力ソルバ．非ニュートン流
体も可
nonNewtonianIcoFoam 非ニュートン流体の非圧縮性，層流の非定常ソルバ
pimpleDyMFoam ダイナミックメッシュをもつニュートン流体の非圧縮
性・乱流の PIMPLE (SIMPLE と PISO の融合) アル
ゴリズムによる非定常ソルバ
pimpleFoam PIMPLE (SIMPLE と PISO の融合) アルゴリズムに
よる非圧縮性・乱流の，大きな時間ステップの非定常
ソルバ
pisoFoam 非圧縮性流れの非定常ソルバ
porousSimpleFoam 多孔性を陰的または陽的に扱う非圧縮性，乱流のため
の定常状態ソルバ
shallowWaterFoam 回転を伴う非粘性浅水方程式の非定常ソルバ
simpleFoam 非圧縮性，乱流の定常状態ソルバ
圧縮性流れ
rhoCentralFoam Kurganov と Tadmor の中央風上スキームに基づいた
密度ベースの圧縮性流ソルバ
rhoPimpleFoam 冷暖房やそれに似た問題のための圧縮性の層流および
乱流用の非定常ソルバ
rhoPisoFoam 圧縮性の層流および乱流用の非定常 PISO ソルバ
rhoPorousMRFPimpleFoam 冷暖房やそれに似た問題のための多孔質媒体や MRF
モデルをサポートする，圧縮性の層流および乱流用の
非定常ソルバ
rhoPorousSimpleFoam RANS 乱流モデルと，多孔性を陰的または陽的に扱
う，圧縮性流体のための非定常乱流ソルバ
rhoSimpleFoam 層流および RANS による乱流の圧縮性流体用定常状
態 SIMPLE ソルバ
sonicDyMFoam 移動メッシュを伴う，遷音速または超音速用の，層流
および乱流の圧縮性気体用ソルバ
sonicFoam 遷音速または超音速用の，層流および乱流の圧縮性気
体ソルバ
sonicLiquidFoam 遷音速または超音速用の，層流圧縮性液体ソルバ
多層流
bubbleFoam 液体の中の気泡のように非圧縮分散性 2 相 2 流体ソル
バ
cavitatingFoam 均質な平衡モデルに基づいて，液体・蒸気の混合物の
圧縮率を得る非定常のキャビテーション用コード
compressibleInterFoam VOF (volume of ﬂuid) 体積割合に基づいた界面捕獲
法による不混和流体の圧縮性・等温 2 相流用ソルバ
interFoam VOF (volume of ﬂuid) 体積割合に基づいた界面捕獲
法による不混和流体の非圧縮性・等温 2 相流用ソルバ
interMixingFoam 界面捕獲のために VOF 法を用いた非圧縮性 3 相流
（うち二つは混和性）用ソルバ
interPhaseChangeFoam 相変化（キャビテーションなど）を伴なう，不混和流
体の非圧縮性・等温 2 相流用ソルバ．VOF (volume
of ﬂuid) 体積割合に基づいた界面捕獲法を用いる．
multiphaseInterFoam 界面捕獲と，それぞれの相での接触角効果を考慮した
非圧縮性 n 相流ソルバ
settlingFoam 分散相の設定シミュレーション用の非圧縮 2 相流コー
ド
twoLiquidMixingFoam 2 層の非圧縮性流れを混合したソルバ
Open∇FOAM-1.7.1
U-92 第 3 章 アプリケーションとライブラリ
twoPhaseEulerFoam 液体の中の気体の泡のように分散した状態の 2 層の非
圧縮性流れのシステム
直接数値シミュレーション (DNS)
dnsFoam 直方体中の等方性乱流のための直接数値解法 (DNS)
コード
燃焼
coldEngineFoam 内燃機関のコールドフローのソルバ
dieselEngineFoam ディーゼルエンジン用噴射・燃焼用ソルバ
dieselFoam ディーゼル噴射・燃焼用ソルバ
engineFoam エンジン内部の燃焼用ソルバ
ﬁreFoam 火炎と乱流拡散炎のための非定常ソルバ
PDRFoam 乱流モデルを伴う圧縮性予混合または部分予混合燃焼
用ソルバ
reactingFoam 化学反応を伴う燃焼用ソルバ
rhoReactingFoam 密度ベースの熱力学パッケージによる化学反応を伴う
燃焼用ソルバ
XiFoam 乱流モデルを伴う圧縮性予混合または部分予混合燃焼
用コード
熱輸送と浮力駆動流れ
buoyantBoussinesqPimpleFoam 浮力を伴う非圧縮性乱流用非定常ソルバ
buoyantBoussinesqSimpleFoam 浮力を伴う非圧縮性乱流用定常状態ソルバ
buoyantPimpleFoam 換気・熱輸送のための，浮力を伴う圧縮性乱流用非定
常ソルバ
buoyantSimpleFoam 浮力を伴う圧縮性乱流用定常状態ソルバ
buoyantSimpleRadiationFoam 放射を考慮した，換気・熱輸送のための，浮力を伴う
圧縮性乱流用定常状態ソルバ
chtMultiRegionFoam 個体領域と流体領域の間の熱輸送を連成するため，
heatConductionFoam と buoyantFoam を融合させたも
の
chtMultiRegionSimpleFoam chtMultiRegionFoam の定常状態バージョン
粒子追跡流
coalChemistryFoam 石炭・石灰石パーセルの噴射，エネルギ源，および燃
焼を伴う圧縮性乱流用非定常ソルバ
porousExplicitSourceReactingParcelFoam 質量，運動量，エネルギの陽的なソースを含む，多孔
質媒体の多相ラグランジュ型パーセルの反応を伴う圧
縮性層流・乱流用非定常 PISO ソルバ
reactingParcelFoam ラグランジュ型パーセルの反応を伴う圧縮性層流・乱
流用非定常 PISO ソルバ
uncoupledKinematicParcelFoam 単一の運動学的粒子雲の受動的輸送用の非定常ソルバ
分子動力学法
mdEquilibrationFoam 分子動力学系の平衡化や前処理を行う
mdFoam 流体力学のための分子動力学ソルバ
直接シミュレーション・モンテ・カルロ法
dsmcFoam 直接シミュレーション・モンテ・カルロ (DSMC) 法
電磁流体
electrostaticFoam 静電方程式ソルバ
mhdFoam 磁場の影響によって誘発される非圧縮性層流の電磁流
体 (MHD) 用ソルバ
Open∇FOAM-1.7.1
3.6 標準のユーティリティ U-93
固体応力解析
solidDisplacementFoam 選択が自由な熱拡散と熱応力をもった線形弾性や固体
の微小ひずみの非定常分離有限体積ソルバ
solidEquilibriumDisplacementFoam 固体の線形弾性や微小ひずみの定常状態分離有限体積
ソルバ．熱拡散と熱応力も扱える．
金融工学
ﬁnancialFoam 物価に対する Black–Scholes 方程式を解く
表 3.5 標準ライブラリソルバ
3.6 標準のユーティリティ
OpenFOAM で提供されているユーティリティは$FOAM_UTILITIES ディレクトリの中
にあり，コマンドラインで util と打つことにより簡単にアクセスできます．名称は内容を
記述するようになっており，例えば，ideasToFoam は I-DEAS のフォーマットで書かれた
データを OpenFOAM のフォーマットに変換します．OpenFOAM で配布されている最新
のユーティリティリストを表 3.6 に示しておきます．
前処理
applyBoundaryLayer 1/7 乗則に基づいて，速度場と乱流場に簡易的な境界層
モデルを適用する．
applyWallFunctionBoundaryConditions OpenFOAM の RAS ケースを，新しい（バージョン 1.6
の）壁関数を使うように更新する．
boxTurb 与えられたエネルギスペクトルに適合し，自由に発散す
る乱流の box を生成する
changeDictionary ディクショナリのエントリを変更するユーティリティ．
たとえば，フィールドと polyMesh/boundary ファイルの
パッチタイプを変更するときなどに使える．
dsmcInitialise 初期化ディクショナリ system/dsmcInitialise に従って，
dsmcFoam 用にケースを初期化する
engineSwirl エンジン計算のために旋回流を発生させる
foamUpgradeFvSolution system/fvSolution::solvers の書式を更新する簡易ツール
mapFields 両ケースの時刻ディレクトリの全ての場を読み込み，補
間し，体積場を一つのメッシュから他のメッシュにマッ
プする．並列・非並列のどちらのケースでも再構築せず
に実行可能
mdInitialise 分子動力学 (MD) シミュレーションのフィールドを初
期化する．
setFields ディクショナリでセルのセットを選択する
メッシュ生成
blockMesh マルチブロック・メッシュのジェネレータ
extrude2DMesh 2D メッシュ（すべての面が 2 点で，前後の面がない）
を読み込み，与えられた厚さに押し出すことで 3D メッ
シュをつくる．
extrudeMesh 既存のパッチやファイルから読み込んだパッチを押し出
す（デフォルトでは面の外側へ，オプションで面を反転
する）
snappyHexMesh 自動分割六面体メッシャ．細分化して面にスナップす
る．
メッシュの変換
Open∇FOAM-1.7.1
U-94 第 3 章 アプリケーションとライブラリ
ansysToFoam I-DEAS から出力した ANSYS インプットメッシュファ
イルを OpenFOAM 形式へ変換する
cfx4ToFoam CFX 4 メッシュを OpenFOAM 形式へ変換する
ﬂuent3DMeshToFoam Fluent のメッシュを OpenFOAM 形式に変換する
ﬂuentMeshToFoam Fluent のメッシュを OpenFOAM 形式に変換する．複
数の領域と，領域の境界の処理も扱える
foamMeshToFluent OpenFOAM メッシュを Fluent メッシュ形式で出力す
る
foamToStarMesh OpenFOAM メッシュを読み込み，PROSTAR (v4) の
bnd/cel/vrt フォーマットに書き出す
gambitToFoam GAMBIT メッシュを OpenFOAM 形式へ変換する
gmshToFoam Gmsh によって書かれた.msh ファイルを読み込む
ideasUnvToFoam I-DEAS unv フォーマットのメッシュ変換
kivaToFoam KIVA グリッドを OpenFOAM 形式へ変換する
mshToFoam アドベンチャーシステムによって作られた.msh 形式を
読み込む
netgenNeutralToFoam Netgen v4.4 によって書かれた Neutral ファイルフォー
マットを変換する
plot3dToFoam Plot3d メッシュ（アスキー形式）を OpenFOAM 形式
に変換
polyDualMesh polyMesh の二重を計算し，すべてのフィーチャやパッ
チのエッジに忠実にする．
sammToFoam STAR-CD SAMM メッシュを OpenFOAM 形式へ変換
する
star4ToFoam STAR-CD (v4) PROSTAR メッシュを OpenFOAM 形
式へ変換する
starToFoam STAR-CD PROSTAR メッシュを OpenFOAM 形式へ
変換する
tetgenToFoam tetgen により書かれた.ele，.node，.face ファイルを読
み込む
writeMeshObj メッシュのデバッグのため：たとえば javaview で見れ
る，三つの別々の OBJ ファイルとしてメッシュを書く
メッシュの操作
attachMesh 指定されたメッシュ修正ユーティリティによって位相的
に独立したメッシュを付加する
autoPatch ユーザが指定した角度に基づいて外部面をパッチに分割
する
cellSet ディクショナリでセルのセットを選択する
checkMesh メッシュの妥当性をチェックする
createBaﬄes 内部面を境界面にする．mergeOrSplitBaﬄes と異なり，
点の複製はしない．
createPatch 選択した境界面の外部にパッチを作成する．面は既存の
パッチか faceSet から選択する
deformedGeom polyMesh を変位場 U と引数として与えられた尺度因子
により変形させる
faceSet ディクショナリで面のセットを選択する
ﬂattenMesh 2 次元デカルトメッシュの前後の面を平らにする
insideCells 面の内側に中心があるセルを抽出する．面は閉じてい
て，個々に接続している必要がある
mergeMeshes 二つのメッシュを合体させる
mergeOrSplitBaﬄes 同じ点を共有する複数の面を探索し，それらの面をマー
ジ，もしくは点を複製する．
mirrorMesh 与えられた面に対してメッシュの鏡映をつくる．
moveDynamicMesh メッシュの動作と位相変化のユーティリティ
Open∇FOAM-1.7.1
3.6 標準のユーティリティ U-95
moveEngineMesh エンジンシミュレーションのためにメッシュを動かすソ
ルバ
moveMesh メッシュを動かすソルバ
objToVTK obj 線（面ではない）のファイルを読み込み，vtk に変
換する
pointSet ディクショナリで点のセットを選択する
reﬁneMesh 複数の方向にあるセルを細分化する．
renumberMesh 行列の帯幅を狭くするためにセルリストに順番を付け直
す．全ての時刻ディレクトリから全ての計算領域を読み
込み，順番を付け直すことで行う
rotateMesh メッシュおよび場を方向 n1 から方向 n2 へと回転させ
る
setSet セル・面・点のセットやゾーンをインタラクティブに操
作する
setsToZones メッシュに pointZones/faceZones/cellZones を，同
様に名づけられた pointSets/faceSets/cellSets か
ら追加する
splitMesh 内部の面の外面を作ることでメッシュを分割する．at-
tachDetach を用いる
splitMeshRegions メッシュを複数の領域に分割する
stitchMesh メッシュを縫う
subsetMesh cellSet に基づいたメッシュの区分を選択する
transformPoints 平行移動，回転，拡大・縮小のオプションにしたがって，
polyMesh ディレクトリのメッシュの点を変形させる
zipUpMesh 有効な形をもった全ての多面体のセルが閉じていること
を確実にするために，ぶら下がった頂点をもつメッシュ
を読み込み，セルを締め上げる
その他のメッシュ・ツール
autoReﬁneMesh 境界面付近のセルを細分化するユーティリティ
collapseEdges 短い辺をつぶし，また複数の辺を結合して一つの線分に
する
combinePatchFaces 同じセル内でパッチの重複した面をチェックし結合する．
これはたとえば，細分化された隣接セルが削除され，同
じセルに属する 4 面が取り残された結果として現れる
modifyMesh メッシュ要素を操作する
reﬁneHexMesh セルを 2 × 2 × 2 に分割して六面体メッシュを細分化す
る
reﬁnementLevel 細分化されたデカルト・メッシュの細分化レベルを判別
する．スナップの前に実行すること
reﬁneWallLayer パッチに隣接するセルを細分化するユーティリティ
removeFaces 面を削除し両隣のセルを結合するユーティリティ
selectCells 面との関連でセルを選択する
splitCells 平面でセルを分割するユーティリティ
画像の後処理
ensightFoamReader 変換せずに OpenFOAM のデータを直接読むための En-
Sight のライブラリ・モジュール
ﬁeldview9Reader OpenFOAM のメッシュとデータを読み込むための
Fieldview 9 の読み込みモジュール
PV3FoamReader ParaView 3 の読み込みモジュール
PVFoamReader ParaView の読み込みモジュール
データ変換の後処理
foamDataToFluent OpenFOAM データを Fluent 形式へ変換する
foamToEnsight OpenFOAM データを EnSight 形式へ変換する
Open∇FOAM-1.7.1
U-96 第 3 章 アプリケーションとライブラリ
foamToEnsightParts OpenFOAM データを EnSight 形式へ変換する．それぞ
れのセル・ゾーンとパッチに対して Ensight パーツが作
られる
foamToFieldview9 OpenFOAM のメッシュをバージョン 3.0 Fieldview-
UNS 形式（バイナリ）へ変換する．
foamToGMV OpenFOAM の出力を GMV で読めるファイルに変換す
る．
foamToTecplot360 Tecplot バイナリファイル形式のライタ．
foamToVTK レガシーな VTK ファイル形式のライタ．
smapToFoam STAR-CD SMAP データファイルを OpenFOAM の計
算領域の形式に変換する
速度場の後処理
Co phi 場からクーラン数 Co を計算し，surfaceScalarField
として書き出す∗
enstrophy 速度場 U のエンストロフィを計算し，書き出す
ﬂowType 速度場 U の ﬂowType を計算し，書き出す
Lambda2 速度勾配テンソルの対称，非対称部分の正方形の合計の
うち 2 番目に大きな固有値を計算し，書き出す
Mach 各時刻の速度場 U のローカルマッチ番号を計算し，書き
出す
Pe phi 場からペクレ数 Pe を計算し，surfaceScalarField と
して書き出す
Q 速度勾配テンソルの第 2 不変量を計算し，書き出す
streamFunction 各時刻の速度場 U の流れ機能を計算し，書き出す
uprime uprime (
√
2k/3) のスカラ場を計算し，書き出す
vorticity 速度場 U の渦度を計算し，書き出す
応力場の後処理
stressComponents 各時刻の応力テンソル sigma の六つの要素のスカラ場
を計算し，書き出す
スカラ場の後処理
pPrime2 各時刻の pPrime2 ([p − ¯p]2
) のスカラ場を計算し，書き
出す
壁の後処理
wallGradU 壁における U の勾配を計算し，書き出す
wallHeatFlux volScalarField の境界面として全てのパッチに対する
熱流束を計算し，書き出す．そして全ての壁について積
分した熱流量も書き出す
wallShearStress 指定した時刻における壁面せん断応力を計算して書き出
す
yPlusLES 指定した時刻について，各壁面における yPlus を計算
する
yPlusRAS RAS 乱流モデルを使用しているとき，指定した時刻に
ついて，各壁面における yPlus を計算する
乱流の後処理
createTurbulenceFields 乱流場を表すすべての変数を生成する
R 現在の時間ステップについて，レイノルズ応力 R を計算
して書き出す
∗
訳注：原文では “Conﬁgurable graph drawing program” と記述されているが，誤植と思われるため，
$WM_PROJECT_DIR/applications/utilities/postProcessing/velocityField/Co/Co.C の Description に記述さ
れている “Calculates and writes the Co number as a surfaceScalarField obtained from ﬁeld phi.” の訳を
掲載した．
Open∇FOAM-1.7.1
3.6 標準のユーティリティ U-97
パッチの後処理
patchAverage 指定したフィールドの指定したパッチにわたる平均を計
算する
patchIntegrate 指定したフィールドの指定したパッチにわたる積分を計
算する
ラグランジアン・シミュレーションの後処理
particleTracks パーセル追跡タイプの雲を使って計算されたケースの粒
子の飛跡を VTK ファイルに書き出す
サンプリングの後処理
probeLocations 位置を探査する
sample 選択した補間スキーム，サンプリング・オプション，書
き出しフォーマットに従って，フィールドのデータをサ
ンプリングする．
様々な後処理
dsmcFieldsCalc DSMC 計算による広域的に平均化された場から，U や T
といった集約的な場を計算する
engineCompRatio 幾何的な圧縮比を計算する．BDC と TCD で体積を計
算するので，バルブと非有効体積があるかどうか注意す
ること
execFlowFunctionObjects 選択された時間セットに対して，選択されたディクショ
ナリ (デフォルトでは system/controlDict) で指定された
関数オブジェクトのセットを実行する
pdfPlot 確率密度関数をプロットするための .obj ファイルを生
成する
postChannel チャンネル流計算のポストプロセスデータ
ptot 毎回，全圧を計算する
wdot wdot を毎回計算し，書き出す
writeCellCentres 三つのコンポーネントを，閾値化してポストプロセスで
使えるように volScalarFields として書き出す
並行処理
decomposePar OpenFOAM の平衡計算のためにケースのメッシュと計
算領域を自動的に分割する
reconstructPar OpenFOAM の平衡計算のために分割したメッシュと計
算領域を再構成する
reconstructParMesh 幾何情報のみを使ってメッシュを再結合する
redistributeMeshPar decomposeParDict ファイルの最新の設定に従って，分
割されたメッシュを再分配する
熱物理に関連したユーティリティ
adiabaticFlameT 与えられた燃料の種類・燃焼していない気体の温度と平
衡定数に対して断熱状態の炎の温度を計算する
chemkinToFoam CHEMKIN 3 の熱運動と反応のデータファイルを Open-
FOAM のフォーマットに変換する
equilibriumCO 一酸化炭素の平衡状態を計算する
equilibriumFlameT 与えられた燃料の種類・燃焼していない気体の温度と平
衡定数に対して酸素，水，二酸化炭素の分離の影響を考
慮して平衡状態の炎の温度を計算する
IFCLookUpTableGen 与えられた燃料についてフィートの関数で無限の速さの
化学関係を計算する。出力はモルで与えられる。
mixtureAdiabaticFlameT 与えられた混合・温度に対して断熱状態の炎の温度を計
算する
Open∇FOAM-1.7.1
U-98 第 3 章 アプリケーションとライブラリ
エラーの推量
estimateScalarError 標準フォームによるスカラ輸送方程式の解の誤差を予想
する
icoErrorEstimate 非圧縮性層流 CFD アプリケーション icoFoam の解の誤
差を予想する
icoMomentError 非圧縮性層流 CFD アプリケーション icoFoam の解の誤
差を予想する
momentScalarError 標準フォームによるスカラ輸送方程式の解の誤差を予想
する
様々なユーティリティ
expandDictionary 引数として与えられたディクショナリを読み込み，マク
ロなどを展開した結果を標準出力に書き出す
foamDebugSwitches すべてのライブラリのデバッグスイッチを書き出す
foamFormatConvert controlDict に指定された書式に従って，ケースに関わる
IOobject をすべて変換する
foamInfoExec ケースを調べ，スクリーンに情報を表示する
patchSummary 指定された時刻について，各パッチに対するフィールド
と境界条件を書き出す
表 3.6 標準ライブラリユーティリティ
3.7 標準のライブラリ
OpenFOAM 配布のライブラリは$FOAM_LIB/$WM_OPTIONS ディレクトリ内にあり，
コマンド欄に lib と入力すればすぐに見つかります．一方，名前は lib を前につけて，例
えば incompressibleTransportModels が非圧縮性の輸送モデルのライブラリを含むというよ
うに合理的でかつ説明的です．表現を簡単にするためにライブラリは二つのタイプに分け
られます．
一般的ライブラリ これらは一般的なクラスや表 3.7 に記載したような関連機能を備えて
います．
モデルライブラリ これらは表 3.8，表 3.9，表 3.10 に記載した計算連続体力学で使われる
モデルを定めます．
基本的な OpenFOAM ツールのライブラリ — OpenFOAM
algorithms アルゴリズム
containers コンテナクラス
db データベースクラス
dimensionedTypes dimensioned<Type> クラスと派生クラス
dimensionSet dimensionSet クラス
ﬁelds 領域クラス
global グローバルな設定
graph graph クラス
interpolations 補間スキーム
matrices 行列クラス
memory メモリ管理ツール
meshes メッシュクラス
primitives 初期クラス
有限体積法ライブラリ — ﬁniteVolume
Open∇FOAM-1.7.1
3.7 標準のライブラリ U-99
cfdTools CFD ツール
ﬁelds ボリューム，サーフェス，そしてパッチのフィールドのクラス．
境界条件も含む
ﬁniteVolume 有限体積法による離散化
fvMatrices 有限体積法解析のための行列
fvMesh 有限体積法による離散化のためのメッシュ
interpolation フィールドの補間とマッピング
surfaceMesh 有限体積法による離散化のためのメッシュのサーフェスデータ
volMesh†
有限体積法による離散化のためのメッシュのボリューム（セル）
データ
後処理ライブラリ
ﬁeldFunctionObjects 平均・最大・最小などを含むフィールド関数オブジェクト
foamCalcFunctions foamCalc ユーティリティのための関数
forces 関数オブジェクトによる，力・揚力・抗力の後処理ツール
postCalc 後処理工程で関数オブジェクトの機能を利用するためのもの
sampling 領域における特定の場所での場のデータの抽出用ツール
systemCall ケースの実行時にシステム・コールを行うための一般的な関数
オブジェクト
utilityFunctionObjects ユーティリティの関数オブジェクト
解法とメッシュ操作のライブラリ
autoMesh snappyHexMesh ユーティリティの機能のためのライブラリ
dynamicMesh 移動メッシュをもつシステムの解法
dynamicFvMesh 移動とトポロジ変化を伴う有限体積メッシュのためのライブラ
リ
edgeMesh Foredge-based メッシュ記述の操作のため
errorEstimation 誤差推定ツール
fvMotionSolver 有限体積メッシュの移動のソルバ
ODE 常微分方程式のソルバ
meshTools OpenFOAM メッシュ操作のためのツール
surfMesh 異なる書式のサーフェス・メッシュを扱うためのライブラリ
triSurface 標準三角 surface-based メッシュ記述の操作のため
topoChangeFvMesh トポロジ変化の機能（大部分は冗長）
ラグランジュ粒子追跡ライブラリ
coalCombustion 炭塵燃焼のモデリング
dieselSpray ディーゼル噴霧・噴射のモデリング
dsmc 直接シミュレーション・モンテ・カルロ法のモデリング
lagrangian 基本ラグランジュもしくは粒子追跡解スキーム
lagrangianIntermediate 粒子追跡の動力学，熱力学，多種粒子反応，粒子力など
potential 分子動力学のための分子間ポテンシャル
molecule 分子動力学のための分子クラス
molecularMeasurements 分子動力学における測定を実行するためのもの
solidParticle 個体粒子の実装
さまざまなライブラリ
conversion メッシュとデータの変換のためのツール
decompositionMethods 領域分割のためのツール
engine エンジンの計算のためのツール
MGridGenGAMGAgglomeration MGridGen アルゴリズムを用いたセルの凝集のためのライブラ
リ
OSspeciﬁc オペレーティング・システム固有の機能
randomProcesses 分析と生成のランダムプロセスのツール
†
訳注：原文では空欄だが，おそらく脱字と思われる．
Open∇FOAM-1.7.1
U-100 第 3 章 アプリケーションとライブラリ
表 3.7 一般的使用のための共有オブジェクトライブラリ
基本熱物理モデル — basicThermophysicalModels
hPsiThermo エンタルピ h と圧縮率 ψ に基づく一般熱物理モデル計算
hsPsiThermo 顕在エンタルピ hs と圧縮率 ψ に基づく一般熱物理モデル計算
ePsiThermo 内部エネルギ e と圧縮率 ψ に基づく一般熱物理モデル計算
hRhoThermo エンタルピ h に基づく一般熱物理モデル計算
hsRhoThermo‡
顕在エンタルピ hs に基づく一般熱物理モデル計算
pureMixture パッシブガス混合物の一般熱物理モデル計算
化学反応モデル — reactionThermophysicalModels
hPsiMixtureThermo エンタルピ h と ψ に基づいて混合気燃焼のエンタルピを計算
する
hsPsiMixtureThermo 顕在エンタルピ hs と ψ に基づいて混合気燃焼のエンタルピを
計算する
hRhoMixtureThermo エンタルピ h と ρ に基づいて混合気燃焼のエンタルピを計算
する
hsRhoMixtureThermo 顕在エンタルピ hs と ρ に基づいて混合気燃焼のエンタルピを
計算する
hhuMixtureThermo 不燃気体と混合気のエンタルピ計算
homogeneousMixture 標準燃料質量分率 b に基づく混合気燃焼
inhomogeneousMixture b と総燃料質量分率 ft に基づく混合気燃焼
veryInhomogeneousMixture b，ft と不燃燃料質量分率 fu に基づく混合気燃焼
dieselMixture ft と fu に基づく混合気燃焼
basicMultiComponentMixture 複数の要素に基づく基本的な混合気
multiComponentMixture 複数の要素に基づく派生混合気
reactingMixture 熱力学と反応スキームによる燃焼混合気
egrMixture 排気再循環の混合気
輻射モデル — radiationModels
P1 P1 モデル
fvDOM 有限体積離散座標法
層流火炎速度モデル — laminarFlameSpeedModels
constLaminarFlameSpeed 一定層流火炎速度
GuldersLaminarFlameSpeed Gülder の層流火炎速度モデル
GuldersEGRLaminarFlameSpeed 排気再循環モデルを伴う Gülder の層流火炎速度モデル
バロトロピック圧縮性モデル — barotropicCompressibilityModels
linear 線形圧縮性モデル
Chung Chung の圧縮性モデル
Wallis Wallis の圧縮性モデル
ガス種の熱物理特性 — specie
icoPolynomial 液体などの非圧縮性流体に対する多項式の状態方程式
perfectGas 理想気体に対する状態方程式
eConstThermo 内部エネルギ e とエントロピ s に関する一定比熱 cp モデル
hConstThermo エンタルピ h とエントロピ s に関する一定比熱 cp モデル
hPolynomialThermo h と s を評価する多項式の係数の関数により cp が評価される
janafThermo h や s のような JANAF 熱力学テーブルの係数をもつ関数に
よって評価した cp
specieThermo cp，h そして/または s から派生するような熱物理特性
constTransport 一定の輸送特性
polynomialTransport 多項式に基づく温度依存輸送特性
‡
訳注：原文では hRhoThermo となっているが，おそらく誤植．
Open∇FOAM-1.7.1
3.7 標準のライブラリ U-101
sutherlandTransport 温度依存輸送特性のためのサザーランドの公式
熱物理特性の関数/表 — thermophysicalFunctions
NSRDSfunctions 標準参照データシステム (NSRDS) - 米国化学工学会 (AICHE)
のデータ編集表
APIfunctions 蒸気拡散のための米国石油協会 (API) の関数
確率密度関数 — pdf
RosinRammler ロジン・ラムラー分布
normal 正規分布
uniform 一様分布
exponential 指数分布
general 一般化分布
化学モデル — chemistryModel
chemistryModel 化学反応モデル
chemistrySolver 化学反応ソルバ
その他のライブラリ
liquids 液体の熱物性
liquidMixture 混合液体の熱物性
solids 固体の熱物性
solidMixture 混合固体の熱物性
表 3.8 熱物理モデルのライブラリ
非圧縮性流れ用乱流モデル — incompressibleRASModels
laminar 層流用ダミー乱流モデル
kEpsilon 標準の高 Re k–ε モデル
kOmega 標準の高 Re k–ω モデル
kOmegaSST k–ω–SST モデル
RNGkEpsilon RNG k–ε モデル
NonlinearKEShih 非線形 Shih k–ε モデル
LienCubicKE Lien cubic k–ε モデル
qZeta q–ζ モデル
LaunderSharmaKE Launder–Sharma 低 Re k–ε モデル
LamBremhorstKE Lam–Bremhorst 低 Re k–ε モデル
LienCubicKELowRe Lien cubic 低 Re k–ε モデル
LienLeschzinerLowRe Lien–Leschziner 低 Re k–ε モデル
LRR Launder–Reece–Rodi RSTM
LaunderGibsonRSTM 壁反射条件付き Launder–Gibson RSTM
realizableKE Realizable k–ε モデル
SpalartAllmaras Spalart–Allmaras 1 方程式混合距離モデル
圧縮性流れ用 RAS 乱流モデル — compressibleRASModels
laminar 層流用のダミー乱流モデル
kEpsilon 標準 k–ε モデル
kOmegaSST k–ω–SST モデル
RNGkEpsilon RNG k–ε モデル
LaunderSharmaKE Launder–Sharma 低 Re k–ε モデル
LRR Launder–Reece–Rodi RSTM
LaunderGibsonRSTM Launder–Gibson RSTM
realizableKE Realizable k–ε モデル
SpalartAllmaras Spalart–Allmaras 1 方程式混合距離モデル
Large-eddy シミュレーション (LES) フィルタ — LESﬁlters
Open∇FOAM-1.7.1
U-102 第 3 章 アプリケーションとライブラリ
laplaceFilter ラプラスフィルタ
simpleFilter 単一フィルタ
anisotropicFilter 異方性フィルタ
Large-eddy シミュレーション差分 — LESdeltas
PrandtlDelta プラントルのデルタ
cubeRootVolDelta セル体積の立方根差分
smoothDelta 差分のスムージング
非圧縮 LES モデル — incompressibleLESmodels
Smagorinsky Smagorinsky モデル
Smagorinsky2 3 次元フィルタ付き Smagorinsky モデル
dynSmagorinsky 同時 Smagorinsky
scaleSimilarity スケール相似モデル
mixedSmagorinsky Smagorinsky とスケール相似の混合モデル
dynMixedSmagorinsky 同時 Smagorinsky とスケール相似の混合モデル
kOmegaSST k–ω–SST スケール適応シミュレーション (SAS) モデル
oneEqEddy k 方程式渦粘性モデル
dynOneEqEddy 同時 k 方程式渦粘性モデル
locDynOneEqEddy 局部同時 k 方程式渦粘性モデル
spectEddyVisc スペクトル渦粘性モデル
LRDDiﬀStress LRR 差応力モデル
DeardorﬀDiﬀStress Deardorﬀ 差応力モデル
SpalartAllmaras Spalart-Allmaras モデル
SpalartAllmarasDDES Spalart-Allmaras 遅延型分離渦シミュレーション (DDES) モデル
SpalartAllmarasIDDES Spalart-Allmaras 改良 DDES モデル
圧縮性 LES モデル — compressibleLESmodels
Smagorinsky Smagorinsky モデル
oneEqEddy k 方程式渦粘性モデル
dynOneEqEddy 同時 k 方程式渦粘性モデル
lowReOneEqEddy 低 Re k 方程式渦粘性モデル
DeardorﬀDiﬀStress Deardorﬀ 差応力モデル
SpalartAllmaras Spalart–Allmaras 1 方程式混合距離モデル
表 3.9 乱流モデルと LES モデルのライブラリ
非圧縮性流れ用輸送モデル — incompressibleTransportModels
Newtonian 線形粘性流れモデル
CrossPowerLaw Cross Power 低非線形粘性モデル
BirdCarreau Bird–Carreau 非線形粘性モデル
HerschelBulkley Herschel–Bulkley 非線形粘性モデル
powerLaw べき乗則非線形粘性モデル
interfaceProperties 多相流解析における接触角のようなインタフェースのモデル
表 3.10 移送モデルの共有オブジェクトライブラリ
Open∇FOAM-1.7.1
第4章
OpenFOAMのケース
本章では，OpenFOAM のケースのファイル構造と構成を取り扱います．通常，ユーザは
ケースに名前を割り当てます (例えばチュートリアルのキャビティ流れのケースは単純に
cavity と名付けられています)．この名前は，すべてのケースファイルとサブディレクトリが
収納されているディレクトリの名前になります．このケースディレクトリ自体はどこにでも
置くことができますが，第 2 章の冒頭で述べたように，$HOME/OpenFOAM/${USER}-1.7.1
のように，ユーザのプロジェクトのサブディレクトリ，run の中に置くことを推奨します．こ
の利点の一つは，$FOAM_RUN の環境変数がデフォルトで$HOME/OpenFOAM/${USER}-
1.7.1 に設定されることです．コマンドラインでプリセットエイリアス，run を実行するこ
とにより，素早くこのディレクトリに移動することができます．OpenFOAM の配布の際に
添付されているチュートリアルのケースは，ケースのディレクトリ構造の有用な例を提供
しています．チュートリアルは$FOAM_TUTORIALS のディレクトリに置かれており，コ
マンドラインで tut エイリアスを実行することにより素早くたどり着けます．この章を読
みながら，チュートリアルの例を参照して下さい．
4.1 OpenFOAM のケースのファイル構造
アプリケーションを実行するために必要な最小限のファイルを含む，OpenFOAM ケー
スの基本的なディレクトリ構造を図 4.1 に示し，以下で説明します．
constant ディレクトリ サブディレクトリの polyMesh 内のケースメッシュと物理的性質を
定めるファイルの完全な説明と関連するアプリケーション，例えばtransportProperties
を含みます．
system ディレクトリ 解析の手順そのもののためのパラメータの設定に関するディレクト
リです．少なくとも以下の三つのファイルを含みます．パラメータが開始/終了時間
や時間ステップおよびデータのアウトプットのためのパラメータを含んでいるよう
にコントロールを実行する controlDict，実行時に選択される解析に使われるスキー
ムを記述している fvSchemes，そして方程式のソルバ，許容誤差およびその他のア
ルゴリズム制御を実行のために設定する fvSolution です．
時刻ディレクトリ 特定領域のためにデータの個別のファイルをもっています．データは，
問題を定義するためにユーザが指定する初期値と境界条件，または書き込まれた
OpenFOAM のファイルの結果として存在し得ます．OpenFOAM のフィールドは，
定常状態の問題のように厳密に解く必要のない場合であっても，常に初期化する必要
があることに留意してください．各時刻ディレクトリの名称は，データが書き込まれ
U-104 第 4 章 OpenFOAM のケース
<case>
system
controlDict
fvSchemes
polyMesh
points
cells
faces
. . . Properties
boundary
constant
fvSolution
時刻ディレクトリ
4.3 節を参照
4.4 節を参照
4.5 節を参照
第 7 章を参照
5.1.2 項を参照
4.2.8 項を参照
図 4.1 ケースディレクトリの構造
た時点のシミュレーションが行われた時刻に基づいており，詳細については 4.3 節に
記述されています．私達は通常時間通常 t = 0 で私達のシミュレーションを始めて，
初期の条件は指定された名前のフォーマットに依存して 0 または 0.000000e+00 と
名付けられたディレクトリの中に通常収納されるため，十分といえます．例えば，
cavity のチュートリアルで，速度場の U と圧力場の p それぞれファイル O/U と O/p
から初期化されます．
4.2 基本的な入出力ファイルのフォーマット
OpenFOAM は，文字列，スカラ，ベクトル，テンソル，リスト，およびフィールド等
のデータ構造の範囲を読み込む必要があります．入出力 (I/O) ファイルのフォーマットは
ユーザが OpenFOAM のアプリケーションをできる限り容易に修正できるよう，非常にフ
レキシブルに設計されています．この I/O は，ファイルの作成が非常に簡単に理解しやす
い単純なルール類に従っているものであり，ファイルの書式は特に難しいものではなく直
感的に理解できる多くのソフトウエアパッケージをもっていますが，これらについては特
に記載はしておりません．OpenFOAM のファイルフォーマットの書式についての説明は
次のセクションで行います．
4.2.1 一般的な構文規則
フォーマットは以下の C++ ソースコードのいくつかの一般的な原理に従います．
• ファイルは自由な形式をもち，不特定のどんなカラムにも割り当てられ，複数行に
わたる場合の指示を指定する必要はありません．
• //のコメントデリミタで OpenFOAM は最後の行までテキストを無視しますが，そ
の他については，行は特に意味を持っていません．
Open∇FOAM-1.7.1
4.2 基本的な入出力ファイルのフォーマット U-105
• 複数行にわたるコメントは，/*と*/で囲んで終了させます．
4.2.2 ディクショナリ
OpenFOAM は，データを特定する最も一般的な手段としてディクショナリを用いてい
ます．ディクショナリは，キーワードを用いて，I/O により読み出すことができるセット
としてデータエントリを含んでいます．キーワードの見出し語は一般的な形式に従います．
<keyword> <dataEntry1> ... <dataEntryN>;
ほとんどの入力項目は単一のデータ入力の書式になっています
<keyword> <dataEntry>;
ほとんどの OpenFOAM のデータファイルはそれ自体 1 セットのキーワード入力を含むディ
クショナリです．ディクショナリは論理的なカテゴリにエントリを構成するための手段を
提供しており，階層的に指定できるので，どんなディクショナリもそれ自体が一つ以上の
ディクショナリエントリを含んでいます．ディクショナリの方式は以下のように波括弧 { }
で囲まれた入力に従い，ディクショナリ名を指定します．
<dictionaryName>
{
... keyword entries ...
}
4.2.3 データファイルヘッダ
OpenFOAM によって読み書きされるすべてのデータファイルは，表 4.1 に記載されてお
り，キーワード入力の標準セットを含む FoamFile と名付けられたディクショナリから始
まります．
キーワード 説明 入力
version 入出力形式のバージョン 2.0
format データ形式 ascii / binary
location “...” ファイルへのパス （オプション）
class 関連するデータファイルから構成された
OpenFOAM のクラス
一般的に dictionary もしくは領域，
例：volVectorField
object ファイル名 例：controlDict
表 4.1 データファイルのためのヘッダのキーワード入力
この表は，おそらくクラスの注目すべき例外はあるものの，ほとんどの入力において十
分な各入力の短い説明を提供します．クラスの入力はファイル内のデータから構成される
OpenFOAM ライブラリでの C++ クラスの名前です．読み込まれるファイル呼び出す基
礎的なコードの知識や OpenFOAM クラスの知識がなくては，ユーザはおそらくクラスの
入力を正確に推測することはできません．しかし，単純なキーワード入力をもつほとんど
のデータファイルは内部のディクショナリクラスの中に読に読み込まれ，それゆえそれら
の場合，クラスの入力はディクショナリとなります．
以下の例は今のところ記載されている入力のタイプを使ったケースへのデータ供給のキー
ワードの使い方を示しています．fvSolution ディクショナリファイルからの解凍には二つの
Open∇FOAM-1.7.1
U-106 第 4 章 OpenFOAM のケース
ディクショナリ，ソルバ，PISO を含みます．ソルバディクショナリはソルバのための複数
のデータ入力と p と U それぞれのキーワードによって表現される圧力方程式と速度方程式
それぞれのための許容誤差を含み，PISO ディクショナリは制御アルゴリズムを含みます．
17
18 solvers
19 {
20 p
21 {
22 solver PCG;
23 preconditioner DIC;
24 tolerance 1e-06;
25 relTol 0;
26 }
27
28 U
29 {
30 solver PBiCG;
31 preconditioner DILU;
32 tolerance 1e-05;
33 relTol 0;
34 }
35 }
36
37 PISO
38 {
39 nCorrectors 2;
40 nNonOrthogonalCorrectors 0;
41 pRefCell 0;
42 pRefValue 0;
43 }
44
45
46 // *************************************************************************
//
4.2.4 リスト
OpenFOAM アプリケーションは，例えば頂点のリストはメッシュ記述のために調節す
るリストを含んでいます．リストは一般的に I/O にあり独自のフォーマットをもっていて，
入力は丸括弧 ( ) 内にされます．また，丸括弧の前のフォーマットの選択もあります．
simple キーワードに続いてすぐに丸括弧がくる．
<listName>
(
... entries ...
);
numbered キーワードに続いてリスト内の要素数<n>がくる．
<listName>
<n>
(
... entries ...
);
token identiﬁer キーワードに続いてクラス名の識別子ラベル<Type>がくる．<Type>はリ
ストに何が入っているかを記載したもので，例えばスカラ要素のリストであれば次
のようになる．
<listName>
Open∇FOAM-1.7.1
4.2 基本的な入出力ファイルのフォーマット U-107
List<scalar>
<n> // optional
(
... entries ...
);
ここで留意すべきはリスト<scalar>での<scalar>は一般名ではなく入力された実際の文
字列です．単純なフォーマットは，リストを書くときの便利な方法です．その他のフォー
マットはリストのサイズがデータを読み込む前にメモリに割り当てられるのでコードがよ
り早くデータを読み込めます．それゆえ単純なフォーマットは読み込み時間が最小の短い
リストに適しており，その他のフォーマットは長いリストに適しています．
4.2.5 スカラとベクトル，テンソル
スカラはデータファイルでは表示された一つの数字である．vector はランク 1 の Vec-
torSpace で 3 次元であり，要素数はいつも 3 に決まっているので単純なリストフォーマッ
トで使われる．それゆえ，ベクトル (1.0, 1.1, 1.2) は次のように書かれる．
(1.0 1.1 1.2)
OpenFOAM では，テンソルはランク 2 の VectorSpace で 3 次元であり，それゆえデータ
入力はいつも九つの実数と決まっている．それゆえプログラマズガイドの 1.3.7 節で説明
されている同一のテンソルは以下のように書かれる．
(
1 0 0
0 1 0
0 0 1
)
この例は入力が複数の行に上書きできるように OpenFOAM がその行に戻るのを無視する
方法を示しています．一行に数字を羅列することと扱いは違いません．
( 1 0 0 0 1 0 0 0 1 )
4.2.6 次元の単位
連続体力学では，物理量はある決められた単位で表現されます．例えば，質量ならキログ
ラム (kg)，体積なら立法メートル (m3)，圧力ならパスカル (kg m−1 s−2) というように．代
数の演算は統一した測量単位を用いて実行されなければなりません．特に，足し算，引き算，
および等式は同じ次元の単位の物理的特性においてのみ意味があります．無意味な操作を実
行することへの安全装置として，OpenFOAM はフィールドデータと物理的特性に次元を付
けて，どのようなテンソル操作についても次元をチェックして実行します．dimensionSet
の入出力形式は角括弧内の七つのスカラ量です．例えば，
[0 2 -1 0 0 0 0]
表 4.2 に記載するように各値は計測基準単位のそれぞれの物理量に対応しています．表
は国際単位系 (SI) と the United States Customary System (USCS) の基本単位ですが
OpenFOAM はどの単位系も使えます．要求されることは入力データが選択した単位に
Open∇FOAM-1.7.1
U-108 第 4 章 OpenFOAM のケース
No. 物理量 SI 単位 USCS 単位
1 質量 キログラム (kg) 質量ポンド (lbm)
2 長さ メートル (m) フィート (ft)
3 時間 秒 (s)
4 温度 ケルビン (K) ランキン温度 (◦
R)
5 物質量 モル (mol)∗
ポンドモル (lbmol)
6 電流 アンペア (A)
7 光度 カンデラ (cd)
表 4.2 SI と USCS の基本単位
合っているということです．特に重要なのは，OpenFOAM がいくつかの次元化された
物理定数を必要とするということを知っておくことです．例えば熱力学のモデル化した
ある計算のための一般気体定数 R などがいい例です．これらの次元定数は OpenFOAM
インストール ($WM_PROJECT_DIR/etc/controlDict) のメイン controlDict ファイルの
DimensionedConstant サブディクショナリで指定されます．デフォルトでは，これらの定
数は SI で設定されます．USCS もしくはその他の単位系を使用したい場合は，選択した単
位系に合わせてこれらの定数を変更してください．
4.2.7 次元付の型
物理量は一般に，それらの関連する次元によって特定されます．これらの入力は，
dimensionedScalar の以下の例が示すフォーマットをもっています．
nu nu [0 2 -1 0 0 0 0] 1;
最初の nu はキーワード，2 番目の nu はクラスの word の名前で，通常キーワードと同じも
のが選ばれる．その次の入力は dimensionSet で最終的な入力はスカラ値です．
4.2.8 フィールド
OpenFOAM の入出力データの多くはテンソル場，例えば速度や圧力のデータにあり，時
刻ディレクトリから読み込み時刻ディレクトリに書き込まれます．表 4.3 で説明されるよ
うに，キーワード入力を使って，OpenFOAM はフィールドデータを書きこみます．
キーワード 説明 例
dimensions 領域の次元 [1 1 -2 0 0 0 0]
internalField 内部領域の値 uniform (1 0 0)
boundaryField 境界領域 4.2.8 項のファイル参照
表 4.3 フィールドディクショナリで使われる主なキーワード
そのデータはそれ自体の dimentions の入力から始まり，次に referenceLevel 値が続
きます．フィールド変数は基準レベルの入力と関連した値として保存されます．基準レベ
ルは通常 0 に設定されるが解法の正確さを改善させるために他の値に設定することもでき
ます．これに続いて，ひとつの例として以下のような方法で書かれる internalField があ
ります．
一様フィールド ただひとつの値にそのフィールド内で全ての要素が対応していて，以下
∗
訳注：原文では kgmol とされているが，これは誤り．SI における物質量の基本単位は mol である．
Open∇FOAM-1.7.1
4.2 基本的な入出力ファイルのフォーマット U-109
のようなフォームをとります．
internalField uniform <entry>;
非一様フィールド 各フィールドの要素は，固有の値を割り当てられ，リストの識別子トー
クンフォームにある以下のフォームを取ることが推奨されます．
internalField nonuniform <List>;
boundaryField は polyMesh ディレクトリ内の boundary ファイルにある境界パッチのそれぞ
れの名前に対応する名前の一連の入力を含んだディクショナリである．各パッチの入力は
それ自体がキーワード入力のリストを含むディクショナリとなります．強制的な入力，type
はパッチのフィールドを分類するためのフィールド条件を書きます．残りの入力は選択さ
れたパッチのフィールド条件のタイプに対応し，一般的にはパッチフェイスで初期条件を
分類するフィールドデータを含みます．OpenFOAM で使えるパッチのフィールド条件は
説明とそれを分類するデータともに表 5.2 と表 5.3 に記載してあります．速度 U のフィー
ルドのディクショナリ入力の例を以下に示します．
17 dimensions [0 1 -1 0 0 0 0];
18
19 internalField uniform (0 0 0);
20
21 boundaryField
22 {
23 movingWall
24 {
25 type fixedValue;
26 value uniform (1 0 0);
27 }
28
29 fixedWalls
30 {
31 type fixedValue;
32 value uniform (0 0 0);
33 }
34
35 frontAndBack
36 {
37 type empty;
38 }
39 }
40
41 // *************************************************************************
//
4.2.9 ディレクティブとマクロ置換
OpenFOAM のケースファイルを柔軟に設定するためのディレクティブや代替マクロと
いったオプションのファイル構文があります．ディレクティブはケースファイル内で#から
始まるコマンドとして記述されます．代替マクロは$から始まります．
OpenFOAM では現在 2 種類のディレクティブが利用可能できます．
#include "<fileName>" <ﬁleName>という名前のファイルを読み込む
#inputMode 二つのオプションがある．merge は連続するディクショナリのキーワードの
エントリを統合する．つまりある場所で指定されたキーワードのエントリを継承し
Open∇FOAM-1.7.1
U-110 第 4 章 OpenFOAM のケース
て以後の同一キーワードのエントリが指定される．overwrite はディクショナリ全
体を上書きする．通常は merge を使う．
一度使われた圧力の初期値を，内部フィールドと境界の初期値に設定する例を示します．
以下の記述を含む initialConditions というファイルを作成していたとします．
pressure 1e+05;
#inputMode merge
この圧力をフィールド内部と境界に用いるために，以下の代替マクロを圧力場のファイル
p に記述します．
#include "initialConditions"
internalField uniform $pressure;
boundaryField
{
patch1
{
type fixedValue;
value $internalField;
}
}
あくまでもこれはこの機能のはたらきを提示するだけの，単純でつまらない例です．この
機能はケースデータを要求を満たすよう一般化する手段としてなど，多くのより便利な使
い方で用いることができます．例えば同一の RSA 乱流モデルの設定を用いるケースがい
くつかある場合，その設定を記述したファイルを一つ作成し，各ケースの RSAProperties
ファイルに include によって組み込めばよいのです．代替マクロは単独の値にとどまりま
せん．例えば，単独のマクロで境界条件のまとまりを事前に定義して，それを呼び出すこ
とができます．適用範囲はほぼ限りないといえるでしょう．
4.3 時間とデータの入出力制御
OpenFOAM のソルバは全て，データベースをセットアップすることによって，動き始
めます．データベースは入出力を制御し，またデータの出力は通常実行中，時間ごとに要
求されるので，時間はデータベースにとって不可避の要素です．controlDict ディクショナ
リはデータベースの作成に不可欠な入力パラメタを設定します．controlDict のキーワード
入力項目は表 4.4 に記載されています．時間制御方式と writeInterval 入力だけは完全に
強制的で，省略できる任意の項目には表 4.4 で示されたデフォルト値のデータベースが用
いられます．
時間制御
startFrom 解析の開始時刻の制御
- firstTime 存在する時刻ディレクトリのうちで最初の時刻
- startTime startTime の項目の入力により定める時刻
- latestTime 存在する時刻ディレクトリのうちで最近の時刻
startTime startFrom の startTime を用いた解析の開始時刻
stopAt 解析の終了時刻の制御
- endTime endTime の項目の入力により定める時刻
- writeNow 現在の時間ステップで解析を止めデータを書き出す
- noWriteNow 現在の時間ステップで解析を止めデータは書き出さない
Open∇FOAM-1.7.1
4.3 時間とデータの入出力制御 U-111
- nextWrite writeControl で指定した次のデータ書き出しの時間ステップで解析
を止める
endTime stopAt の endTime で指定した解析の終了時刻
deltaT 解析の時間ステップ
データの書き出し
writeControl ファイルへのデータの書き出しのタイミングの制御
- timeStep† タイムステップの writeInterval ごとにデータを書き出す
- runTime 解析時間 writeInterval 秒ごとにデータを書き出す
- adjustableRunTime 解析時間 writeInterval 秒ごとにデータを書き出す，必要なら時間
ステップを writeInterval と一致するように調整する（自動時間ス
テップ調整を行う場合に使用する）．
- cpuTime CPU 時間 writeInterval 秒ごとにデータを書き出す
- clockTime 実時間 writeInterval 秒ごとにデータを書き出す
writeInterval 上記の writeControl と関連して用いられるスカラ
purgeWrite 周期的ベースで時刻ディレクトリを上書きすることによって保存さ
れる時刻ディレクトリの数の限界を表す整数．たとえば t0 = 5 s，
∆t = 1 s，purgeWrite 2; のとき，6 と 7，二つのディレクトリに
データが書き込まれた後，8 s のデータが 6 に上書きされ，9 s のデー
タが 7 に上書きされる．時間ディレクトリ限界を無効にするには，
purgeWrite 0; とする．†定常状態解析では，以前の反復計算の結果
を purgeWrite 1; とすることで連続して上書きできる．
writeFormat データファイルのフォーマットを指定する
- ascii† ASCII フォーマット，writePrecision の有効桁まで書かれる
- binary バイナリー・フォーマット
writePrecision 上記の writeFormat に関連して使用される整数，デフォルトでは 6.
writeCompression データファイルの圧縮を指定する
- uncompressed 非圧縮†
- compressed gzip 圧縮
timeFormat 時刻ディレクトリのネーミングのフォーマットの選択
- fixed ±m.dddddd の d の数が timePrecision で決められる
- scientific ±m.dddddde±xx の d の数が timePrecision で決められる
- general† 指数が −4 未満もしくは timePrecision で指定された指数以上のと
き scientific のフォーマットを指定する
timePrecision 上記の timeFormat に関連して使用される整数，デフォルトでは 6
graphFormat アプリケーションによって描かれるグラフデータのフォーマット
- raw† 横書きの生の ASCII 形式
- gnuplot gnuplot 形式のデータ
- xmgr Grace/xmgr 形式のデータ
- jplot jPlot 形式のデータ
データの読み込み
runTimeModifiable controlDict のようないずれかのディクショナリの yes†/no スイッチ
は各タイムステップの始めに OpenFOAM によって再度読み込まれ
る．
Run-time loadable functionality
libs 実行時にロードする ($LD_LIBRARY_PATH 上の) 追加ライブラリ
のリスト．例えば ("libUser1.so" "libUser2.so")
functions 機 能 の リ ス ト ．例 え ば ラ ン タ イ ム に ロ ー ド す る probes は
$FOAM_TUTORIALS の例を見る．
† 関連キーワードが省略されるなら，デフォルト入力を表示します．
表 4.4 controlDict ディクショナリのキーワード項目
以下に controlDict ディクショナリの入力例を示します．
17
Open∇FOAM-1.7.1
U-112 第 4 章 OpenFOAM のケース
18 application icoFoam;
19
20 startFrom startTime;
21
22 startTime 0;
23
24 stopAt endTime;
25
26 endTime 0.5;
27
28 deltaT 0.005;
29
30 writeControl timeStep;
31
32 writeInterval 20;
33
34 purgeWrite 0;
35
36 writeFormat ascii;
37
38 writePrecision 6;
39
40 writeCompression uncompressed;
41
42 timeFormat general;
43
44 timePrecision 6;
45
46 runTimeModifiable yes;
47
48
49 // *************************************************************************
//
4.4 数値スキーム
system ディレクトリにある fvSchemes ディクショナリは，アプリケーションの実行時に
現われる，方程式における導関数等の項に対する数値スキームを設定します．この節では，
fvSchemes ディクショナリにおいてどのように，これらのスキームを指定するかを説明し
ます．スキームの数学的な解説は，プログラマ・ガイドの 2.4 節を見てください．
fvSchemesにおいて数値スキームを割りあてなければならない典型的な項は，例えば空間勾
配といった導関数項や，一つの点集合から他の集合へと値を補間する項等です．OpenFOAM
では，ユーザに制限無くスキームを選択できるようにしたいと思っています．例えば，線
形補間は多くのケースで効率的ですが，OpenFOAM では，全ての補間項に対して幅広い
補間スキームの中から自由に選択ができるようになっています．
導関数項では，より一層この選択の自由が顕著です．ユーザは，まず離散化手法を選択
することができますが，ここではガウスによる有限体積積分を用いるのが一般的です．ガ
ウス積分は格子の界面における値を足していくことで実現されますが，界面での値は格子
中心での値から補間しなければなりません．この補間スキームにおいてもユーザは自由に
選ぶことができ，特定の導関数項，特に対流項に用いる発散項には，特別に設計されたい
くつかのスキームが用意されています．数値スキームを指定しなければならない項はいろ
いろありますが，それらは fvSchemes ディクショナリにおいて表 4.5 に示すカテゴリに分
類されます．表 4.5 における各キーワードはサブディクショナリの名前ですが，それらは
各々特定のタイプの項を持っているわけです．例えば，gradSchemes には grad(p)（と表
Open∇FOAM-1.7.1
4.4 数値スキーム U-113
現される）といった全ての勾配項があります．その他の例は，以下に示した fvSchemes ディ
クショナリの抜粋をご覧ください．
キーワード 数学的タームのカテゴリ
interpolationSchemes 2 点間の値の補間
snGradSchemes 格子界面の法線方向勾配の各要素
gradSchemes 勾配 ∇
divSchemes 発散 ∇ ·
laplacianSchemes ラプラシアン ∇2
timeScheme 1 次と 2 次の時間導関数 ∂/∂t，∂2
/∂2
t
fluxRequired フラックスの生成が必要な物理量
表 4.5 fvSchemes で使用する主なキーワード
17
18 ddtSchemes
19 {
20 default Euler;
21 }
22
23 gradSchemes
24 {
25 default Gauss linear;
26 grad(p) Gauss linear;
27 }
28
29 divSchemes
30 {
31 default none;
32 div(phi,U) Gauss linear;
33 }
34
35 laplacianSchemes
36 {
37 default none;
38 laplacian(nu,U) Gauss linear corrected;
39 laplacian((1|A(U)),p) Gauss linear corrected;
40 }
41
42 interpolationSchemes
43 {
44 default linear;
45 interpolate(HbyA) linear;
46 }
47
48 snGradSchemes
49 {
50 default corrected;
51 }
52
53 fluxRequired
54 {
55 default no;
56 p;
57 }
58
59
60 // *************************************************************************
//
この例を見ると fvSchemes ディクショナリは以下の要素から成り立っていることがわかり
ます．
• 六つの...Schemes のサブディクショナリには，指定した各項に対するキーワードが
書いてあり，default のキーワードも指定できますが，その他にも，例えば ∇p に
Open∇FOAM-1.7.1
U-114 第 4 章 OpenFOAM のケース
ついては grad(p) というように，特定の項に対して名前を書くことで，それに対応
するキーワードを指定することができます．
• ﬂuxRequired のサブディクショナリには，例えば p のように，アプリケーションの中
でフラックスが生成される場が書かれています．
もし，default のスキームが特定の...Schemes のサブディクショナリで指定された場合に
は，サブディクショナリが参照している全ての項にそのスキームが適用されます．例えば，
gradSchemes において default が指定されている場合には，アプリケーションにおける，
∇p，∇U といった全ての勾配項に対して，そのスキームが適用される訳です．default が
指定されているときには，そのサブディクショナリにおいて各項のスキームをいちいち指
定する必要がなくなります．この例では，grad(p)，grad(U) の行がそれです．しかしな
がら，特定の項の行が挿入された場合，その項に対しては，指定されたスキームが default
より優先されます．
かわりに，ユーザは none エントリにより，あえて default スキームを使わないようにも
できます．この場合には，ユーザはそのサブディクショナリの中の全ての項を個々に指定
しなければなりません．default は上書きすることができるのですから，default に none
を設定することはやりすぎかもしれません．しかしながら，none を指定することは，ユー
ザに全ての項を個別に指定しなければならないことから，そのアプリケーションに実際に
どの項が存在するかを明白にするという点では有用です．
次の節では，表 4.5 に示したそれぞれのカテゴリの項について，選択できるスキームを
述べます．
4.4.1 補間スキーム
interpolationSchemes サブディクショナリには，通常，セル中心から界面中心へ値を内挿
する項があります．OpenFOAM での内挿スキームの選択肢を表 4.6 に示しますが，これ
は四つのカテゴリに分けられます．一つのカテゴリは一般的なスキームが，そして他の三
つのカテゴリは，4.4.5 項で説明するように，主に流体での対流（発散）項のガウスの離散
化と一緒に使われるものです．ユーザが interpolationSchemes サブディクショナリにおい
て，対流特有のスキームを一般的なフィールドの内挿に適用することは，「ほとんどない」
のですが，有効な内挿スキームとして 4.4.5 項よりもむしろここで説明しておきます．な
お，UMIST のようなスキームも OpenFOAM では利用可能なことに注意すべきですが，一
般的に推奨されるスキームのみを表 4.6 に示します．
普通のスキームは，単にキーワードとエントリのみを記すことで指定でき，例えば linear
スキームを default として指定するには以下のようにします．
default linear;
対流特有のスキームは，流れの速度による流束に基づいて内挿を行います．これらのス
キームを指定する場合には，内挿のベースとなる流束場の名前が必要ですが，ほとんど
の OpenFOAM のアプリケーションでは，これは phi となっており，この名前は，通常，
surfaceScalarField の速度の流束に対応するものです．このガイドの中では，対流特有
のスキームの三つのカテゴリは，general convection，normalised variable (NV)，そして，
Open∇FOAM-1.7.1
4.4 数値スキーム U-115
total variation diminishing (TVD) と記述されます．blended スキームを除いて，general
convection と TVD スキームは，そのスキーム名と流束場によって指定され，例えば流束
phi に基づく upwind スキームを default として指定するには以下のようにします．
default upwind phi;
いくつかの TVD/NVD スキームには，0 ≤ ψ ≤ 1 の範囲の係数 ψ が必要ですが，ψ = 1
は TVD 条件に従うことに対応し，通常最も良い収束性を示すのに対し，ψ = 0 は最も良
い精度を与えます．通常 ψ = 1 での実行がお勧めです．流束 phi に基づく ψ = 1.0 での
limitedLinear スキームを，default として指定するには以下のようにします．
default limitedLinear 1.0 phi;
4.4.1.1 厳密に範囲が限定されるスカラ量に対するスキーム
厳密に範囲が限定される必要のあるスカラ量のために，いくつかの制限付きスキーム
という拡張版があります．ユーザが指定した範囲に限定するためには，スキームの名前に
は limited という語が頭に付けられ，下限と上限それぞれを続けて指定します．例えば，
vanLeer スキームを −2 と 3 の間で厳密に制限するためには，次のように指定します．
default limitedVanLeer -2.0 3.0;
よく使われる 0 と 1 の間で限定されるスカラ場のために特化された版もあります．それら
は，スキームの名前に 01 を付けることで選択できます．例えば，vanLeer スキームを 0 と
1 の間で厳密に限定するためには，以下のように指定します．
default vanLeer01;
厳密に範囲が限定する拡張版は，limitedLinear，vanLeer，Gamma，limitedCubic，MUSCL，
SuperBee のスキームで利用することができます．
4.4.1.2 ベクトル場に対するスキーム
ベクトル場に対する制限付きスキームについては，場の方向を考慮にいれて構成された
制限を行う改良版があります．これらのスキームは，通常のスキームの名前に V を加える
ことで選択することができ，limitedLinear に対しては limitedLinearV といった具合で
す．これら V 版は limitedLinearV，vanLeerV，GammaV，limitedCubicV，SFCDV といっ
たスキームで利用することができます．
4.4.2 表面法線方向勾配スキーム
snGradSchemes サブディクショナリは，表面法線方向勾配の項によるものです．表面法
線方向勾配は，格子の界面で評価されますが，それは，界面が接続している二つの格子の
中心における値の勾配の，界面の法線方向の成分です．表面法線方向勾配は，それ自体を
使うためにも指定されますが，ガウス積分を使ってラプラシアン項を評価する際にも必要
となります．
利用可能なスキームを表 4.7 に示しますが，これらは単にキーワードとエントリを記述
することで指定できます．ただ，limited は例外で，0 ≤ ψ ≤ 1 の範囲の係数 ψ を必要と
Open∇FOAM-1.7.1
U-116 第 4 章 OpenFOAM のケース
中心スキーム
linear 線形補間（中心差分）
cubicCorrection 体積スキーム
midPoint 均等重み付け線形補間
風上対流スキーム
upwind 風上差分
linearUpwind 線形風上差分
skewLinear ひずみ補正付き線形
QUICK 2 次風上差分
TVD スキーム
limitedLinear 有限線形差分
vanLeer van Leer リミッタ
MUSCL MUSCL リミッタ
limitedCubic 体積リミッタ
NVD スキーム
SFCD 自動フィルタ中心差分
Gamma ψ ガンマ差分
表 4.6 補間スキーム
します．ここで，
ψ =



0 uncorrected に対応,
0.333 非直交補正 ≤ 0.5 × 直交部分,
0.5 非直交補正 ≤ 直交部分,
1.0 corrected に対応.
(4.1)
です．
よって，ψ = 0.5 の limited スキームを default として指定するには次のようにします．
default limited 0.5;
スキーム 説明
corrected 陽的非直交補正
uncorrected 非直交補正なし
limited ψ 有限非直交補正
bounded ポジティブスカラの有界補正
fourth 4 次元
表 4.7 表面法線方向勾配スキーム
4.4.3 勾配スキーム
gradSchemes サブディクショナリには勾配項を記述します．各項の離散化スキームは，
表 4.8 の中から選択することができます．
leastSquares と fourth の場合には，離散化スキームの指定は次のようにそのスキーム
名を指定するだけで十分です．
grad(p) leastSqueares;
Open∇FOAM-1.7.1
4.4 数値スキーム U-117
離散化スキーム 説明
Gauss <interpolationScheme> 1 次のガウス積分
leastSquares 2 次の最小二乗法
fourth 4 次の最小二乗法
cellLimited <gradScheme> 上記のスキームのセル制限バージョン
faceLimited <gradScheme> 上記のスキームの面制限バージョン
表 4.8 gradSchemes において使用できる離散化スキーム
Gauss キーワードは，ガウス積分による標準的な有限体積法の離散化を指定するもので，こ
れは，格子の中心から界面の中心への値の内挿を必要とします．このため，Gauss エント
リでは，表 4.6 のような内挿スキームを続けて指定する必要があります．一般的な内挿ス
キーム以外を選択することはほとんどなく，ほとんどのケースでは次のように linear ス
キームを選ぶのが効率的です．
grad(p) Gauss linear;
三つの基本的な勾配スキーム (Gauss，leastSquares，fourth) の範囲限定版は，次のセ
ルで制限されたガウス・スキームの例のように，離散化スキームの前に cellLimited (ま
たは faceLimited) を付けることで選択できます．
grad(p) cellLimited Gauss linear 1;
4.4.4 ラプラシアンスキーム
laplacianSchemes サブディクショナリにはラプラシアン項を記述します．流体力学の中
で見られる ∇ · (ρ∇U) といった典型的なラプラシアン項をどのようにエントリに記述する
かというと，laplacian(nu, U) といった word 識別子で与えます．離散化手法として選
べるのは Gauss スキームだけですが，さらに拡散係数（この例では ν）の内挿スキームや，
∇U に対する表面法線方向勾配スキームの両方を選択する必要があります．つまり，この
エントリは以下のようになります．
Gauss <interpolationScheme> <snGradScheme>
内挿スキームは表 4.6 から選択しますが，通常は一般的なスキームから選択され，ほとん
どの場合 linear にします．表面法線方向勾配スキームは表 4.7 から選択し，表 4.9 に書か
れているようにスキームの選択は数値的性質を決定します．先の例でのラプラス項の典型
的なエントリは以下のようになります．
laplacian(nu, U) Gauss linear corrected;
スキーム 数値的性質
corrected 無制限，2 次，保守的
uncorrected 制限，1 次，非保守的
limited ψ 補正と非補正の混合
bounded 制限スカラの一次
fourth 無制限，四次，保守的
表 4.9 laplacianSchemes における表面法線方向スキームの性質
Open∇FOAM-1.7.1
U-118 第 4 章 OpenFOAM のケース
4.4.5 発散スキーム
divSchemes サブディクショナリには発散項を記述します．流体力学の中で見られる典型
的な対流項 ∇·(ρUU) はどうように記述するかというと，OpenFOAM のアプリケーション
では通常 div(phi, U) という識別子で与えます．ここで phi はフラックス ϕ = ρU です．
離散化手法として選べるのは Gauss スキームだけですが，さらに対象の場（この例では
U）の内挿スキームを選択する必要があります．つまり，このエントリは以下のようにな
ります．
Gauss <interpolationScheme>
内挿スキームは，一般的なもの以外にも対流特有のものも含め，表 4.6 の中から選択しま
す．表 4.10 に示すように，これらスキームにより数値的性質が大きく変わってきます．対
流特有の内挿スキームを指定する場合でも，流束は特定の項として既に値がわかっている
ものとし，流束の内挿スキームは記述しません．つまり，例えば div(phi, U) の場合では，
流束は phi として既知ですので，さらにその内挿スキームを指定すると矛盾が生じるだけ
です．よって，先の例での風上型内挿スキームの指定は次のようになります．
div(phi, U) Gauss upwind;
スキーム 数値的性質
linear 2 次，無制限
skewLinear 2 次，(より) 無制限，ひずみ補正
cubicCorrected 4 次，無制限
upwind 4 次，制限
linearUpwind 1 次/2 次，制限
QUICK 1 次/2 次，制限
TVD schemes 1 次/2 次，制限
SFCD 2 次，制限
NVD schemes 1 次/2 次，制限
表 4.10 divSchemes において使用される補間スキームの性質
4.4.6 時間スキーム
一次の時間微分項 (∂/∂t) は，ddtSchemes サブディクショナリで指定します．各項に対
する離散化スキームは表 4.11 から選ぶことができます．
CrankNicholson スキームでは，Eular スキームと混合させる割合を決める係数 ψ を用
います．ψ = 1 の場合には純粋な CrankNicholson，ψ = 0 の場合は純粋な Eular に対応
します．純粋な CrankNicholson では不安定なケースにおいては，混合係数をいじること
で計算を安定化させることができることがあります．
スキーム 説明
Euler 1 次，制限，陰的
CrankNicholson ψ 2 次，制限，陰的
backward 2 次，陰的
steadyState 時間導関数について解かない
表 4.11 ddtSchemes において使用可能な離散化スキーム
Open∇FOAM-1.7.1
4.5 解法とアルゴリズム制御 U-119
時間スキームを指定するときは，非定常問題用のアプリケーションは定常状態で実行す
る必要はなく，またその逆も同じであることに注意してください．例えば，非定常の層流
非圧縮流れのコードである icoFoam を実行するときに，steadyState を指定したら，おそ
らく解は収束しないので，定常の非圧縮流れのためには simpleFoam を使うべきです．
2 次時間微分項 (∂2/∂t2) は，d2dt2Schemes サブディクショナリの中で指定します．
d2dt2Schemes としては，Euler スキームのみが利用可能です．
4.4.7 流束の算出
ﬂuxRequired サブディクショナリには，アプリケーションの中で流束を生成する場を書き
出します．例えば，多くの液体力学アプリケーションでは，圧力の方程式を解くと流束が
生成するので，そのようなケースでは ﬂuxRequired サブディクショナリには単に圧力のた
めの word 識別子である p を記載します．
fluxRequired
{
p;
}
4.5 解法とアルゴリズム制御
方程式のソルバ（求解機），公差，およびアルゴリズムは system ディレクトリの fvSolution
ディクショナリから制御されます．以下に示すのは，icoFoam ソルバに必要な fvSolution
ディクショナリからの入力例です．
17
18 solvers
19 {
20 p
21 {
22 solver PCG;
23 preconditioner DIC;
24 tolerance 1e-06;
25 relTol 0;
26 }
27
28 U
29 {
30 solver PBiCG;
31 preconditioner DILU;
32 tolerance 1e-05;
33 relTol 0;
34 }
35 }
36
37 PISO
38 {
39 nCorrectors 2;
40 nNonOrthogonalCorrectors 0;
41 pRefCell 0;
42 pRefValue 0;
43 }
44
45
46 // *************************************************************************
//
Open∇FOAM-1.7.1
U-120 第 4 章 OpenFOAM のケース
fvSolution は実行されるソルバ特有のサブディクショナリを含んでいます．しかし，標準の
ソルバに使われる大部分については標準のサブディクショナリの小さなセットがあります．
これらのサブディクショナリはこのセクションの後半で説明する solvers，relaxationFactors，
PISO，および SIMPLE を含んでいます．
4.5.1 線形ソルバ制御
例に挙げた最初のサブディクショナリやすべてのソルバアプリケーションのサブディク
ショナリは solvers です．それは各離散化方程式に使用されるそれぞれの線形ソルバを指
定します．強調していっておきますと特定の問題を解くために方程式とアルゴリズムを書
いたアプリケーションソルバとは対照的にこのタームの線形ソルバは線形方程式の解の演
算方法になります．「線形ソルバ」という言葉は以下意味が明確な場合には「ソルバ」と省
略して使うこともあります．用語の文脈においていかなる曖昧さも避けたいと思います．
solvers における各エントリの構文で使うキーワードは，問題となっている方程式で解か
れる変数による word です．例えば icoFoam は，速度 U と圧力 p の方程式を解くので，エン
トリは U および p となります．このキーワードの後には，ソルバのタイプとこのソルバが使
うパラメータを含むディクショナリが続きます．ソルバは，表 4.12 に示す OpenFOAM で
の選択肢から，solver キーワードで指定します．tolerance，relTol，preconditioner
などのパラメータは次の節で説明します．
ソルバ キーワード
初期条件付き共役勾配 PCG/PBiCG†
スムーサを使ったソルバ smoothSolver
汎用幾何学的代数マルチグリッド GAMG
† PCG は対称用，PBiCG は非対称用
表 4.12 線形ソルバ
ソルバは左右対称のマトリクスと非対称のマトリクスを区別します．行列の対称は解かれ
ている方程式の構造に依存し，ユーザがこれを決定するこも可能ですが，例えば OpenFOAM
が不適当なソルバが選ばれているかどうかをユーザにアドバイスするためにエラーメッセー
ジを出すので，それは必須ではありません．
--> FOAM FATAL IO ERROR : Unknown asymmetric matrix solver PCG
Valid asymmetric matrix solvers are :
(
PBiCG
smoothSolver
GAMG
)
4.5.1.1 解の許容範囲
疎行列ソルバは反復計算，すなわち解の連続性により方程式残差を減少させることに基
づいています．残差は表面上，解の誤差の尺度なので小さければ小さいほど，より正確な
解となります．より正確には，残差は，現在の解を方程式に代入して，左右両側の差の大
きさを取ることによって評価されます．これはまた解析する問題のスケールにかかわらず
Open∇FOAM-1.7.1
4.5 解法とアルゴリズム制御 U-121
正規化されます．特定のフィールドで方程式を解く前に，初期の残差はそのフィールドの
現在値に基づいて値を決めます．それぞれのソルバの反復計算の後に，残差は再評価され
ます．以下の条件のどちらかを満たせばソルバは停止します．
• 残差がソルバの許容値以下に減少する，tolerance;
• 初期残差比率がソルバの相対的な許容値以下に減少する，relTol;
ソルバの公差は解が十分正確であると考えることができるくらい小さい残差レベルにまで
するべきです．ソルバの相対的な公差が初期値から最終的な解への相対的な再計算を制限
します．解をソルバの公差に収束させるためにはソルバの相対的公差を 0 に設定するのが
一般的です．公差，tolerance，および relTol は全てのソルバによってディクショナリに
定められる．
4.5.1.2 共役勾配ソルバの前提条件
ソルバディクショナリの preconditioner のキーワードにあるようなマトリクスの条件決
めのためのさまざまなオプションの範囲が共役勾配ソルバにあります．preconditioners
を表 4.13 に記載します．
前提条件 キーワード
対角不完全コレスキー分解 (対称) DIC
高速対角不完全コレスキー分解 (キャッシング付き DIC) FDIC
対角不完全 LU (非対称) DILU
対角 diagonal
幾何学的代数マルチグリッド GAMG
前提条件なし none
表 4.13 前提条件オプション
4.5.1.3 緩和法ソルバ
緩和法を使うソルバは，特定の緩和法が必要です．緩和法オプションを表 4.14 に記載し
ます．一般に GaussSeidel は最も信頼できるオプションですが，マトリックスがおかしい
場合でも，DIC であればより収束しやすくなります．場合によっては GaussSeidel による
緩和も追加した，いわゆる DICGaussSeidel と呼ばれる方法がさらに有用です．
緩和法 キーワード
ガウス・ザイデル GaussSeidel
対角不完全コレスキー分解（対称） DIC
対角不完全コレスキー分解（対称）とガウス・ザイデル DICGaussSeidel
表 4.14 緩和法オプション
また，公差パラメータに従って，残差が再計算される前に nSweeps というキーワードに
よってスイープの数も定めなければなりません．
4.5.1.4 代数幾何マルチグリッドソルバ
代数幾何マルチグリッド (GAMG) の一般化された手法は以下の原則に従います．セル
数が少ないメッシュで素早く解を導きます．そして，この解をより細かいメッシュに写し
ます．正確な解を出すのに細かいメッシュ上に初期の推測としてその値を使います．最初
により粗いメッシュを解くときの速度の増加がメッシュ改良とフィールド・データに関す
Open∇FOAM-1.7.1
U-122 第 4 章 OpenFOAM のケース
るマッピングによる負荷の増加より重いときに，GAMG は標準の方法より速くなります．
実際には，GAMG は指定されたメッシュから計算を始め，徐々にメッシュを粗くもしく
は細かくしていきます．ユーザはセルの nCoarsestCells の数に関して最も粗いレベルに
おける大体のメッシュサイズを指定するだけで構いません．セルの統合は agglomerator
キーワードによって指定されたアルゴリズムで実行されます．今のところ，faceAreaPair
法を薦めます．MGridGen の共有されたオブジェクト・ライブラリを指定する追加入力が必
要な MGridGen オプションがあることに注意する必要があります．
geometricGamgAgglomerationLibs ("libMGridGenGamgAgglomeration.so");
OpenCFD の経験によれば，MGridGen メソッドよりも faceAreaPair メソッドの方が優
れています．すべての方法において，cacheAgglomeration スイッチによって統合を任意
にキャッシュできます．緩和法は 4.5.1.3 で説明したように smoother によって指定されま
す．緩和法によって異なったレベルのメッシュ密度で使われるスイープの数は nPreSweeps
や nPostSweeps，nFinestSweeps のキーワードによって指定されます．nPreSweepsh へ
の入力はアルゴリズムがメッシュを粗くするときに使われ，nPostSweeps への入力はアル
ゴリズムがメッシュを細分割するときに使われ，nFinestSweeps は解が最も細かいレベル
にあるときに使われます．
mergeLevels キーワードは粗さもしくは細かさのレベルによって実行速度を制御します．
例えば mergeLevels 1 のように，単一のレベルで行うことは最適です．場合によって，特
に簡単なメッシュに関しては，例えば mergeLevels 2 のように一度に 2 レベル粗くまたは
細かくすることによって，解析を確実に早くできます．
4.5.2 不足緩和解析
OpenFOAM でよく使われる fvSolution の 2 番目のサブディクショナリは緩和して制御
する relaxationFactors で，計算の安定性を改良するのに使用されるテクニックなのですが，
特に定常状態問題を解析する際に使われます．緩和は，領域の解析の前に解のマトリック
スとソースを変更するか，または直接領域を変更することによって，反復計算時の変数の
変化を制限することで行われます．緩和係数 α (0 < α ≤ 1) は緩和の量を指定し，0 から
α = 1 まで変化し，強さは α → 0 に従って増加します．α = 0 は連続した反復計算で変数
を全く変化させない場合の解であり，極端なケースです．最適な α の選択は安定した計算
を確実にすることができるくらい小さく，また反復計算をスムーズに進められる程度大き
くしなければなりません．0.9 程度の α の値であれば多くの場合安定性が確保されます．た
だし著しく低い値，例えば 0.2 は反復計算を遅くする場合等の非常に限られた値です．ユー
ザは最初に，ある領域に関連している word を要素として最初に指定することによって，特
定の領域の緩和係数を指定できます．以下で非圧縮定常状態層流の simpleFoam のチュー
トリアルの例で使われる緩和係数を参照できます．
17
18 solvers
19 {
20 p
21 {
22 solver PCG;
23 preconditioner DIC;
Open∇FOAM-1.7.1
4.5 解法とアルゴリズム制御 U-123
24 tolerance 1e-06;
25 relTol 0.01;
26 }
27
28 U
29 {
30 solver PBiCG;
31 preconditioner DILU;
32 tolerance 1e-05;
33 relTol 0.1;
34 }
35
36 k
37 {
38 solver PBiCG;
39 preconditioner DILU;
40 tolerance 1e-05;
41 relTol 0.1;
42 }
43
44 epsilon
45 {
46 solver PBiCG;
47 preconditioner DILU;
48 tolerance 1e-05;
49 relTol 0.1;
50 }
51
52 R
53 {
54 solver PBiCG;
55 preconditioner DILU;
56 tolerance 1e-05;
57 relTol 0.1;
58 }
59
60 nuTilda
61 {
62 solver PBiCG;
63 preconditioner DILU;
64 tolerance 1e-05;
65 relTol 0.1;
66 }
67 }
68
69 SIMPLE
70 {
71 nNonOrthogonalCorrectors 0;
72 }
73
74 relaxationFactors
75 {
76 p 0.3;
77 U 0.7;
78 k 0.7;
79 epsilon 0.7;
80 R 0.7;
81 nuTilda 0.7;
82 }
83
84
85 // *************************************************************************
//
4.5.3 PISO と SIMPLE アルゴリズム
OpenFOAM のほとんどの流体力学ソルバアプリケーションは，pressure-implicit split-
operator (PISO) もしくは semi-implicit method for pressure-linked equations (SIMPLE)
Open∇FOAM-1.7.1
U-124 第 4 章 OpenFOAM のケース
アルゴリズムを使用します．これらのアルゴリズムは，速度と圧力の方程式を解くための
反復法で，PISO は過渡状態の問題に，SIMPLE は定常状態の問題に使います．
両アルゴリズムはいくつかの初期解を求め，次に，それらを修正するという方法をとり
ます．SIMPLE は 1 段階の修正しかしませんが，PISO は 1 段階以上で，大概は 4 段階以
下の修正をします．したがって，U-120 ページの入力例に示したように nCorrectors キー
ワードで PISO ディクショナリの補正数を定めます．
非直交性メッシュからなる追加補正は標準の OpenFOAM ソルバアプリケーションの
SIMPLE と PISO の両方で利用できます．例えば面が直行座標系に並べられる 6 面体のセ
ルのメッシュのように，メッシュ内の各面において隣接するセルの中心間のベクトルに面
が平行であるなら，メッシュは直交しています．非直交の補正数は U-120 ページの入力例
に示すように nNonOrthogonalCorrectors キーワードによって定めます．例えば，直交
メッシュを 0 として非直交性の度合いによって最大で 20 まで増加するようにするなど非直
交の補正数は解くケースのメッシュに対応させます．
4.5.3.1 圧力参照
非圧縮の閉鎖系では圧力は相対的で，重要なのは絶対値ではなく範囲です．この場合，ソ
ルバはセル内の pRefValue の基準面を，p が圧力の変数解の名前の場合，pRefCell に設定し
ます．圧力が p_rgh であるところでは，名前はそれぞれ p_rghRefValue と p_rghRefCell
です．これらの入力は，一般に PISO/SIMPLE サブディクショナリに格納されて，ケース
に応じてソルバがそれらを必要としたときに使われます．もしこれを忘れるとソルバは実
行されずに，エラーメッセージが出ます．
4.5.4 その他のパラメタ
標準の OpenFOAM ソルバアプリケーションの多くの fvSolutions ディクショナリには，
これまでこのセクションで説明した以外の項目はありません．しかし，一般に，fvSolution
ディクショナリはソルバ，アルゴリズム，または実際の何かを制御するどんなパラメータ
をもっていてもおかしくありません．どんなソルバでも，必要なパラメタを把握するため
にソースコードを見ることができます．結局，何かパラメータやサブディクショナリがな
ければ，ソルバが実行されるとき，詳細なエラーメッセージが印字されて終了するでしょ
う．そのとき，それに応じて不足のパラメタを加えて下さい．
Open∇FOAM-1.7.1
第5章
メッシュの生成と変換
本章では，OpenFOAM におけるメッシュの生成に関する話題について述べます．5.1 節で
は OpenFOAM においてメッシュがどのように記述されるか概説します．5.3 節では六面
体格子ブロックのメッシュの生成を行う blockMesh ユーティリティについて説明します．
5.4 節では三角表面形状から自動的に六面体格子や分割六面体格子の複雑なメッシュを生成
する snappyHexMesh ユーティリティについて説明します．5.5 節ではサードパーティの製
品で生成したメッシュを，OpenFOAM で読み込むことができるフォーマットに変換する
手法もあることを述べます．
5.1 メッシュの記法
この節では，OpenFOAM の C++ のクラスがどのようにメッシュを扱うか，その仕様
について説明します．メッシュは数値解析において不可欠のものであり，妥当で精密な解
を得るためには一定の条件を満している必要があります．OpenFOAM は，実行時，メッ
シュが妥当かどうかの一連の条件を満しているか厳しくチェックし，もしその条件を満し
ていない場合には，実行を止めます．このため OpenFOAM が実行する前に，サードパー
ティ製のメッシャで生成した大規模なメッシュを修正することに疲れてしまうかもしれま
せん．OpenFOAM 上で受けいれられるようにするために，根気良く修正する羽目に陥いる
ことがあります．それは残念なことではありますが，メッシュの妥当性のチェックを行わ
なかったら，計算が始まる前に解は発散してしまうこともあるわけですから，OpenFOAM
がメッシュの妥当性を常にチェックすることは決して悪いことではありません．
通常，OpenFOAM は，任意の多角形の面に囲まれた 3 次元で定義される任意の多面体
セルによってメッシュを定義しますので，セルの面の数は無制限であり，その面について
も，辺の数は無制限で配列についても何の制約もありません．このような汎用性が高いメッ
シュを OpenFOAM では polyMesh と定義しています．プログラマ・ガイドの 2.3 節におい
てより詳細に述べますが，このような形式のメッシュを用いていると，特に計算領域の幾何
形状が複雑であったり，それらが何度も変更されるときに，メッシュの生成やその操作に
おいてとても大きな自由度があることだけを，ここでは述べておくことにします．しかし
ながら，このようにメッシュが無条件の汎用性をもった代償として，従来のツールによっ
て生成されたメッシュを変換するのは難しいこともあります．そのため，OpenFOAM の
ライブラリは，既存のセル形状セットを元にした従来のメッシュのフォーマットを上手く
扱う cellShape ツールを提供しています．
U-126 第 5 章 メッシュの生成と変換
5.1.1 メッシュの仕様と妥当性の制約
OpenFOAM のメッシュのフォーマットである polyMesh や cellShape ツールを説明する
前に，まず，OpenFOAM におけるメッシュの妥当性の制約について述べたいと思います．
メッシュが満していなければならない条件とは以下の通りです．
5.1.1.1 点
点というのは，3 次元空間における位置であり，メートル (m) 単位のベクトルによって
定義されます．点の集まりはリストに蓄積され，個々の点はリストにおける位置を表わし，
0 から始まるラベルにより参照されます．この点のリストには，別々の点でありながら位
置が全く同一である点や，一つの面にも属さない点が含まれることはありません．
5.1.1.2 面
面は点を順番に並べたものであり，ひとつひとつの点はラベルによって参照されます．
面における点のラベル順は，隣接した二つの点が一つの辺によって接続されるように付け
られるため，面の周囲をぐるっと廻るように点の番号を追うことになります．点と同様に，
面の集まりはリストで管理され，個々の面は，リストにおける位置を表わすラベルによっ
て参照されます．面の法線方向ベクトルの向きは右手の法則により決まります．すなわち，
図 5.1 のように，面に向って見たとき，点の順序が反時計廻りであったら，法線方向ベク
トルはこちらを向いていることになります．
4
3
0
2
1
Sf
図 5.1 面における点の順序から決まる面領域ベクトル
面には 2 種類あります．
内部の面 これらの面は必ず二つのセルに接続されており，その数が 2 を超えることはあ
りません．また，内部の面において，その法線方向ベクトルが，より大きなラベル
をもつセルに向くように，点のラベルの番号付けがなされます．つまり，セル 2 と
セル 5 を接続している面だったら，その法線はセル 5 を向くわけです．
境界の面 これらは領域の境界にあるので，一つのセルにしか属しません．したがって，あ
る境界の面を参照するのは，一つのセルと境界パッチだけです．点ラベルの番号付
けは，面の法線が計算領域の外側に向くように設定されます．
Open∇FOAM-1.7.1
5.1 メッシュの記法 U-127
5.1.1.3 セル
セルは，面を任意の順序で並べたものです．セルは以下に示す性質が必ず必要です．
切れ目なく連続である セル群は計算領域全体を完全にカバーしており，かつ，お互いに
重複してはなりません．
凸である 全てのセルは凸で，かつ，セル中心はセルの内側にある必要があります．
閉じている 全てのセルは幾何的にも位相的（トポロジ的）にも閉じていなければなりま
せん．ここで，セルが幾何的に閉じているためには，全ての面領域ベクトルがセル
の外側を向いているとして，それらのベクトル和が，正確にゼロ・ベクトルとなる
必要があります．また，セルが位相的に閉じているためには，問題において，セル
中の全ての辺が，二つの面により使用されている必要があります．
直交性がある メッシュ内部の全ての面に対し，中心間ベクトルというのを，隣接する二
つのセルの中心間を，小さいほうのラベルのセル中心から大きいほうのラベルのセ
ル中心への向きで結んだベクトルとして定義することができます．直交性の制約と
いうのは，内部の全ての面に対し，先に述べた面の面積ベクトルと中心間ベクトル
のなす角が，常に 90◦ 未満であることをいいます．
5.1.1.4 境界
境界というのはパッチのリスト（集合）であり，これら一つ一つは，ある境界条件が割
り当てられています．ここで，パッチというのは面のラベルのリストであり，境界の面の
みで形成され，内部の面を含みません．この境界は閉じていることが条件であるので，境
界における全面領域ベクトルの和は，数値計算上ゼロ・ベクトルになります．
5.1.2 polyMesh の記述
constant ディレクトリのサブディレクトリである polyMesh には，そのケースの polyMesh
データが全て収められています．この polyMesh の記述は面ベースであり，既に述べまし
たように，内部のセルは二つのセルと接続し，境界面はセルと境界のパッチを指定します．
各面には「保有」セルと「隣接」セルが割り当てられ，面を通じた接続は，保有セルと隣
接セルのラベルによって簡潔に記述することができます．境界の場合には，面に接続され
たセルがその面の保有者であり，隣接セルには −1 のラベルが割り充てられます．以上を
踏まえた上で，以下のファイルで構成される入出力の詳細をご覧ください．
points セルの頂点を記述するベクトルのリストです．ここで，リストにおける最初のベ
クトルは頂点 0，次のベクトルの頂点 1 という風に番号付けします．
faces 面のリストです．各面は点中の頂点の番号のリストで成り立ってます．ここで，先
程と同様に，リスト中の最初の面の番号は 0 です．
owner 保有セルのラベルのリストです．面のリストと同じ順番に並んでますので，リスト
の最初のラベルは 0 番の面の保有セルのラベル，次のラベルは 1 番の面の保有セル
のラベルということになります．
neighbour 隣接セルのラベルのリストです．
boundary パッチのリストです．以下のように，パッチ名の宣言で始まる各パッチに対す
Open∇FOAM-1.7.1
U-128 第 5 章 メッシュの生成と変換
るディクショナリで構成されます．
movingWall
{
type patch;
nFaces 20;
startFace 760;
}
startFace はそのパッチにおける最初の面のラベル番号です．また nFaces は，そ
のパッチ中の面数です．
備考：計算対象にいくつセルがあるか知りたい場合には，owner ファイルの FoamFile ヘッ
ダにおける nCells を見てください．
5.1.3 cellShape ツール
別の標準的（でより単純）なメッシュ形式を，OpenFOAM のライブラリで扱えるよう
に変換する際に，特に必要となるであろう cellShape というツールについても説明しておき
たいと思います．
多くのメッシュ・ジェネレータや後処理システムは，実際にあり得る多面体セルの形状種
類に対し，その一部だけをサポートするものがほとんどです．それらは，メッシュをセル形
状セットといった，3 次元のセル幾何形状の限られた組み合わせで定義します．OpenFOAM
のライブラリには，これらの一般的な形状集の定義がありますので，上記のようなメッシュ
を先の節で述べた polyMesh 形式に変換することができます．
OpenFOAM によってサポートされる cellShape モデルを表 5.1 に示します．形状は，形
状モデルにおける番号付けスキームに従って付けれらた頂点ラベルの順序によって定義さ
れます．点や面，辺に対する番号付けスキームも表 5.1 に書いてあります．点の番号付け
は，形状がねじれたり，他の形状に変化することがないようにしなければならないので，同
じ点番号は複数回使用できないことになります．さらに，重複した点は OpenFOAM では
使う必要はありません．なぜなら，OpenFOAM で使用可能な形状は，六面体の変種を全
てカバーしているからです．
セルの記述は，セルモデルの名前と，ラベルの順序リストという二つの部分より行いま
す．例えば，以下の点のリストを使うと，
8
(
(0 0 0)
(1 0 0)
(1 1 0)
(0 1 0)
(0 0 0.5)
(1 0 0.5)
(1 1 0.5)
(0 1 0.5)
)
六面体セルは以下のように書けます．
(hex 8(0 1 2 3 4 5 6 7))
ここで，六面体セルの形状は hex というキーワードで記述しましたが，他の形状について
Open∇FOAM-1.7.1
5.2 境界 U-129
は，表 5.1 に示したキーワードを使って記述できます．
5.1.4 1 次元や 2 次元，軸対称問題
OpenFOAM は 3 次元の空間用に設計されており，全てのメッシュもそのように定義し
ます．しかしながら，OpenFOAM では，1 次元や 2 次元そして軸対称問題も解くことがで
き，それには，法線方向が意図する方向であるパッチに対して，特殊な境界条件を適用し
ます．具体的には，1 次元や 2 次元問題では empty のパッチタイプを使い，軸対称問題では
wedge タイプを使います．両者の使用法については 5.2.2 項で触れ，軸対称問題用の wedge
幾何形状の生成法については 5.3.3 項において述べます．
5.2 境界
本節では境界について述べます．境界はやや複雑です．なぜなら，形状の構成によって
規定される単純なものではなく，境界条件や境界間の接続を通して解法を規定する不可欠
の部分であるためです．境界はメッシュ，物理量，離散化，計算法といった多くの要素に
関連しており，便宜上この章で扱います．
まず考えるべきことは，境界条件の適用のために，境界はバラバラにされてパッチの組
み合わせになるということです．一つのパッチは一つ以上の境界面に閉じられた領域をも
ち，それらが物理的に接続している必要はありません．
下に階層を示すように，パッチに関する性質は 3 種類あり，図 5.2 では各レベルにおけ
るさまざまなパッチの名前を挙げています．下で示す階層は OpenFOAM ライブラリの階
層構造と類似しています．
Base type（基底型） 形状や情報の伝達を規定
Primitive type （基本型） 物理量の境界条件を規定
Derived type（派生型） Primitive type から派生した，複雑な境界条件を規定
5.2.1 パッチの形式の類型化
パッチの種類はメッシュと物理量のファイルに規定されます．もう少し正確にいえば，
• 基底型は constant/polyMesh ディレクトリにある boundary ファイル内の各パッチに
対応する type キーワードに従って記述されます．
• 数値パッチ型は，基本型または派生型となり，フィールドファイルの各パッチに対
応する type キーワードに従って記述されます．
例として sonicFoam のケースにおける boundary ファイルと p ファイル（圧力物理量ファイ
ル）を示します．
17
18 6
19 (
20 inlet
21 {
22 type patch;
Open∇FOAM-1.7.1
U-130 第 5 章 メッシュの生成と変換
セルタイプ キーワード 点の番号付け 面の番号付け 辺の番号付け
六面体 hex
2
7
3
10
4
6
5
0 1
2
3
5
4 0
1
2
3
4
5
6
7
8 9
1011
くさび形 wedge
2
10
3 4
56
0
1
2
35
4
0
1
2
3
5
6
7
8
9
10
4
三角柱 prism
2
10
3 4
5
0
1
3
4
2
0
1
2
3
4
5
6 7
8
四角錐 pyr
2
10
4
3
0
2
34
1
0
1
2
3
4 5
67
四面体 tet 0 1
2
3
1
2
3
0
0
1
2
3
4
5
くさび状四面体 tetWedge
2
10
3 4
0
1
3
2
0
1
2
3
4
5
6
表 5.1 cellShapes における頂点，面，辺の番号付け
Open∇FOAM-1.7.1
5.2 境界 U-131
Derived type
ﬁxedGradient
ﬁxedValue
Primitive type
calculated
mixed
directionMixed
zeroGradient
symmetry
empty
wedge
cyclicBase type
processor
patch
wall
e.g. inletOutlet
図 5.2 境界タイプの階層
23 nFaces 50;
24 startFace 10325;
25 }
26 outlet
27 {
28 type patch;
29 nFaces 40;
30 startFace 10375;
31 }
32 bottom
33 {
34 type symmetryPlane;
35 nFaces 25;
36 startFace 10415;
37 }
38 top
39 {
40 type symmetryPlane;
41 nFaces 125;
42 startFace 10440;
43 }
44 obstacle
45 {
46 type patch;
47 nFaces 110;
48 startFace 10565;
49 }
50 defaultFaces
51 {
52 type empty;
53 nFaces 10500;
54 startFace 10675;
55 }
56 )
57
58 // *************************************************************************
//
17 dimensions [1 -1 -2 0 0 0 0];
18
19 internalField uniform 1;
20
21 boundaryField
Open∇FOAM-1.7.1
U-132 第 5 章 メッシュの生成と変換
22 {
23 inlet
24 {
25 type fixedValue;
26 value uniform 1;
27 }
28
29 outlet
30 {
31 type waveTransmissive;
32 field p;
33 phi phi;
34 rho rho;
35 psi psi;
36 gamma 1.4;
37 fieldInf 1;
38 lInf 3;
39 value uniform 1;
40 }
41
42 bottom
43 {
44 type symmetryPlane;
45 }
46
47 top
48 {
49 type symmetryPlane;
50 }
51
52 obstacle
53 {
54 type zeroGradient;
55 }
56
57 defaultFaces
58 {
59 type empty;
60 }
61 }
62
63 // *************************************************************************
//
boundary ファイルにおける type には，symmetryPlane や empty といった形態的制約を受
けるパッチを除くすべてのパッチに対し patch と記述されています．p ファイルには inlet
や bottom といった面に適用される基本型と outlet に適用される複雑な派生型が記述さ
れています．二つのファイルを比較すると，単純な patch ではなく，symmetryPlane や
empty である場合，基底型及び数値型で一致していることがわかります．
5.2.2 基底型
以下に基底型の種類を挙げます．これらを規定するキーワードは表 5.2 にまとめてあり
ます．
patch メッシュに対する形状的，位相的情報をなにももたないパッチ条件のための基礎的
なパッチ (wall の場合を除く)．流入口や流出口など．
wall 特に専門家が壁の境界を規定するときに，壁に適合するパッチが以下のように特定
可能である必要がある場合があります．良い例としては，壁が wall パッチの型で
特定されなければならない壁乱流モデルがあり，壁に隣接するセルの中心からの距
Open∇FOAM-1.7.1
5.2 境界 U-133
wedge 1
wedge 2
対称軸
パッチ
座表面に沿った
くさび形にする
パッチ
5±
<
図 5.3 wedge パッチを利用した軸対象形状
種類 意味
patch 一般的なパッチ
symmetryPlane 対称面
empty 2 次元形状の前後の面
wedge 軸対称形状のための，くさび型の前後
cyclic 周期境界面
wall 壁面（乱流の壁関数に使用）
processor 並列計算時のプロセッサ間の境界
表 5.2 基底型の境界の種類
離がパッチの一部として格納されます．
symmetryPlane 対称面
empty OpenFOAM が常に 3 次元で形状を生成する一方で，2 次元（1 次元）を解くこと
も可能です．そのためには，解が必要とされない 3 番目（2 番目）の次元に法線が向
いている各パッチに特別な empty 条件を当てはめます．
wedge シリンダのような 2 次元の軸対称問題では，図 5.3 で示すように，小さい角度 (例え
ば < 5◦) のくさびで，座標面の一つにまたがる対称面に沿って伸びている一つのセル
として形状が記述されます．軸対称くさび面は wedge 型という独自のパッチである
必要があります．blockMesh を使ったくさびの形状の生成に関する詳細は 5.3.3 項に
述べられています．
cyclic 熱交換管のような繰り返しの多い形状では，二つのパッチをあたかも一つのように
扱うことができるようにする場合があります．単一の cyclic パッチは，faceList
において面を二つに分割します．そして図 5.4 に示すように，二つの面のセットを
結び付けます．面の各組は同じ領域のものである必要がありますが，同じ方向のも
のである必要はありません．
processor 数多くの処理の中で，計算が平行して行われている場合は，だいたい同じ数の
格子を各処理が計算するために，メッシュは分けられる必要があります．メッシュ
の中の異なる部分間の境界は processor 境界とよばれます．
Open∇FOAM-1.7.1
U-134 第 5 章 メッシュの生成と変換
2
3
1
1
2
3
faceList
4
5
6
4
5
6
cyclic
計算上のリンク
繰り替えされる形状
図 5.4 cyclic パッチを利用した周期境界の連続形状
5.2.3 基本型
表 5.3 に基本型の種類を挙げます．
種類 物理量 ϕ に対して与える条件 Data to specify
ﬁxedValue ϕ の値が一定 value
ﬁxedGradient ϕ の勾配が一定 gradient
zeroGradient ϕ の勾配が 0 –
calculated ϕ の境界条件が他の物理量から決まる –
mixed ﬁxedValue と ﬁxedGradient の組み合わせ，valueFraction
に依存する条件
refValue，
refGradient，
valueFraction，
value
directionMixed 例えば法線方向と接線方向の異なるレベルでの組み合わせ
のような，テンソルの valueFraction に対しては mixed
条件
refValue，
refGradient，
valueFraction，
value
表 5.3 基本型のパッチの種類
5.2.4 派生型
OpenFOAM には多数の派生型境界条件があり，ここには掲載しきれません．かわりに，
ごく一部を表 5.4 に紹介します．利用できる全てのモデルの一覧を得たければ，OpenFOAM
のソースコードを参照してください．派生型境界条件のソースコードは以下のような場所
に見つかります．
• $FOAM SRC/ﬁniteVolume/ﬁelds/fvPatchFields/derived の中
• 特定のモデルライブラリの中．これはターミナルで以下のようなコマンドを実行す
ることで探せます．
Open∇FOAM-1.7.1
5.3 blockMesh ユーティリティを使ったメッシュ生成 U-135
find $FOAM_SRC -name "*derivedFvPatch*"
• 特定のソルバの中．これはターミナルで以下のようなコマンドを実行することで探
せます．
find $FOAM_SOLVERS -name "*fvPatch*"
5.3 blockMesh ユーティリティを使ったメッシュ生成
このセクションでは，OpenFOAM とともに供給されるメッシュ生成ユーティリティの
blockMesh について説明します．blockMesh ユーティリティは，勾配付けや曲がった辺を
使ったパラメトリックなメッシュを作成します．
メッシュはケースの constant/polyMesh ディレクトリに位置する blockMeshDict という
ディクショナリファイルから生成します．blockMesh はこのディクショナリを読み込んで
メッシュを生成し，同じディレクトリの points，faces，cells および boundary ファイルに
メッシュ・データを書き出します．
blockMesh がよりどころとする原則は，一つあるいは複数の 3 次元の六面体のブロックに
領域を分割することです．ブロックの辺は，直線，円弧またはスプラインであるかもしれま
せん．メッシュは，ブロックの各方向の多くのセルとして表面上指定され，これは blockMesh
がメッシュ・データを生成するのに十分な情報です．
各ブロックの幾何形状は八つの頂点，六面体の各隅のひとつによって定義されます．頂点
はラベルを使用することで各頂点にアクセスできるようにリストに書かれています． Open-
FOAM は常に C++ の慣習に従って，リストの最初の要素をラベル ‘0’ とします．リスト
に従って，各頂点に番号付けがされているブロックの例を図 5.5 に示します．頂点 1 と 5 を
接続する辺は，blockMesh で曲がった辺を指定できるのを読者に思いおこさせるために曲
がっています．
5.3.3 項で説明されるように，1 組以上の頂点をお互いの上で潰すことによって八つ未満
の頂点をもつブロックを生成することが可能です．
各ブロックは，右手系である局所座標系 (x1, x2, x3) をもちます．右手系の軸群は，Oz
軸を見下ろしたとき，Ox 軸上の点から Oy 軸上への円弧が時計回りとなるように定義され
ます．局所座標系は以下に従ってブロックの定義で提示された頂点の順序に従って定義さ
れます．
• 軸の原点はブロックの定義における最初の入力です．私たちの例では頂点 0 です．
• x1 の方向は，頂点 0 から頂点 1 まで動くことによって示されます．
• x2 の方向は，頂点 1 から頂点 2 まで動くことによって示されます．
• 頂点 0，1，2，3 は x3 = 0 の平面を定義します．
• 頂点 4 は頂点 0 から x3 方向に動くことによって，見つけられます．
• 頂点 5，6，および 7 は，頂点 1，2，および 3 からそれぞれ x3 の方向に動くことで，
同様に見つけられます．
Open∇FOAM-1.7.1
U-136 第 5 章 メッシュの生成と変換
ﬁxedValueから派生意味指定するデータ
movingWallVelocityノーマルパッチの値を置き換えるのでパッチのフラックスは0value
pressureInletVelocity流入口のpが分かっているとき，Uは，フラックスから評価され，パッチはノーマル．value
pressureDirectedInletVelocity流入口のpが分かっているとき，Uは，inletDirectionのフラックスから計算される．value，
inletDirection
surfaceNormalFixedValue大きさによって，ベクトル境界条件をノーマルパッチに指定します．ベクトルの+veはドメイン
を指す．
value
totalPressure全圧p0=p+1
2ρ|U|2
は固定．Uが変わるとそれに従いpも調整される．p0
turbulentInlet平均値のスケールに基づく変動変数について計算するreferenceField,
fluctuationScale
ﬁxedGradient/zeroGradientから派生
ﬂuxCorrectedVelocityフラックスから流入口のUの法線成分を計算するvalue
wallBuoyantPressure気圧勾配に基づくﬁxedGradient圧を設定する—
mixedから派生
inletOutletUの向きによってﬁxedValueとzeroGradientの間でUとpを切り替えるinletValue，value
outletInletUの向きによってﬁxedValueとzeroGradientの間でUとpを切り替えるoutletValue，
value
pressureInletOutletVelocitypressureInletVelocityとinletOutletの組み合わせvalue
pressureDirectedInletOutletVelocitypressureDirectedInletVelocityとinletOutletの組み合わせvalue，
inletDirection
pressureTransmissive周囲の圧力p∞に超音速圧縮波を伝えるpInf
supersonicFreeStream斜めの衝撃をp∞，T∞，U∞の環境に伝えるpInf，TInf，UInf
その他
slipϕがスカラならzeroGradient，ϕがベクトルなら法線成分はﬁxedValue0で，接線成分はzeroGradient—
partialSlip混合zeroGradient/slip条件はvalueFractionによる．slipならば1．valueFraction
Note:pは圧力,Uは速度
表5.4派生型の種類
Open∇FOAM-1.7.1
5.3 blockMesh ユーティリティを使ったメッシュ生成 U-137
0
3
9
1
2
x2
x3
x10
3
4
5
7 62
1
4 5
6
7
10
8
11
図 5.5 ひとつのブロック
キーワード 説明 指定するデータ
convertToMeters 頂点座標の倍率 0.001 とすれば mm
vertices 頂点座標のリスト (0 0 0)
edges
arc もしくは spline の辺を書くた
めに使用
arc 1 4 (0.939 0.342 -0.5)
block 頂点ラベルとメッシュサイズの順序
リスト
hex (0 1 2 3 4 5 6 7)
(10 10 1)
simpleGrading (1.0 1.0 1.0)
patches パッチのリスト symmetryPlane base
( (0 1 2 3) )
mergePatchPairs マージするパッチのリスト
5.3.2 項参照
表 5.5 blockMeshDict に使用するキーワード
5.3.1 blockMeshDict ファイルの記述
blockMeshDict ファイルは，表 5.5 で説明されているキーワードを使用するディクショナ
リです．convertToMeters キーワードは，メッシュ記述におけるすべての頂点の座標にか
けられる尺度因子を指定します．例えば，
convertToMeters 0.001;
は，すべての座標に 0.001 をかけることを意味します．すなわち，blockMeshDict ファイル
で引用された値が mm になります．
5.3.1.1 頂点
メッシュのブロックの頂点は，vertices と名づけられた標準のリストとして以下のよう
に与えられます．例えば図 5.5 での私たちの例のブロックに関しては，頂点は以下のとお
りです．
vertices
(
( 0 0 0 ) // vertex number 0
( 1 0 0.1) // vertex number 1
Open∇FOAM-1.7.1
U-138 第 5 章 メッシュの生成と変換
( 1.1 1 0.1) // vertex number 2
( 0 1 0.1) // vertex number 3
(-0.1 -0.1 1 ) // vertex number 4
( 1.3 0 1.2) // vertex number 5
( 1.4 1.1 1.3) // vertex number 6
( 0 1 1.1) // vertex number 7
);
5.3.1.2 辺
2 頂点をつなぐ辺のそれぞれは，デフォルトでまっすぐであると仮定されています．し
かしながら，どんな辺も，edges と名づけられるリストにおける入力で曲がるように指定
されるかもしれません．そのリストはオプションです．幾何形状がどんな曲がった辺も含
んでいないなら，それは省略されるかもしれません．
曲がった辺のための各入力は，表 5.6 に挙げられているものからカーブのタイプを指定
するキーワードとともに始まります．
キーワード選択 説明 追加するエントリ
arc 円弧 円弧上の 1 点
simpleSpline スプライン曲線 補間点リスト
polyLine 線群 補間点リスト
polySpline スプライン群 補間点リスト
line 直線 —
表 5.6 blockMeshDict ディクショナリで使用可能なエッジタイプ
そして，キーワードの後には辺が接続する二つの頂点のラベルが続きます．それに続い
て，辺が通り過ぎる内挿点を指定しなければなりません．arc には，円弧が横切ることに
なる一つの内挿点が必要です．simpleSpline，polyLine，および polySpline に関して
は，内挿点のリストが必要です．line 辺は，デフォルトとして実行されるオプションと全
く同等であり，内挿点を全く必要としません．line 辺を使用する必要は全くありませんが，
それが完全性のために含まれていることに注意してください．図 5.6 での私たちの例のブ
ロックでは，内挿点 (1.1, 0.0, 0.5) を通して以下のように頂点 1 と 5 をつなぐ arc 辺を指定
します．
edges
(
arc 1 5 (1.1 0.0 0.5)
);
5.3.1.3 ブロック
ブロックの定義は blocks と名づけられたリストに含まれています．各ブロックの定義
は，セクション 5.3 節で示された順序をもつ頂点ラベルのリストからなる複合入力です．
ベクトルが各方向に必要なセルの数，タイプ，および各方向のセル拡大比のリストを与え
ます．
そして，ブロックは以下のとおり定義されます．
blocks
(
hex (0 1 2 3 4 5 6 7) // vertex numbers
(10 10 10) // numbers of cells in each direction
simpleGrading (1 2 3) // cell expansion ratios
);
Open∇FOAM-1.7.1
5.3 blockMesh ユーティリティを使ったメッシュ生成 U-139
それぞれのブロックの定義は以下のとおりです．
Vertex numbering OpenFOAM-1.7.1/cellModels ファイルに定義されているように，最初
の入力がブロックの形状識別子です．いつもブロックが六面体であるので，いつも
形は hex です．U-135 ページで説明された方法で並べられた頂点番号のリストが従
います．
Number of cells 2 番目の入力はそのブロックの x1，x2，x3 とそれぞれの方向のセルの数
を与えます．
Cell expansion ratios 3 番目の入力はブロックにおける各方向へのセルの拡大比を与えま
す．拡大比は，メッシュが指定された方向に段階的なものにするか，または精製され
るのを可能にします．比率 δe は図 5.6 に示すように，ブロックのひとつの辺に沿っ
た終わりのセルの幅の，辺に沿った始めのセル幅 δs への比です．以下のキーワード
のそれぞれは blockMesh で利用可能な勾配付けの仕様の二つのタイプの一つを指定
します．
simpleGrading 簡単な記述で，局所的な x1，x2 と x3 方向それぞれに一様な拡大比
を，三つの拡大比だけで指定します．例えば
simpleGrading (1 2 3)
edgeGrading 完全なセルの拡大比の記述は，図 5.5 に矢印で「最初のセルから最後
のセル」の方向を表したスキームに従って番号付けられたブロックの各辺に比
率を与えます．例えば，このようなものです．
edgeGrading (1 1 1 1 2 2 2 2 3 3 3 3)
これは，辺 0–3 に沿ったセル幅の比率が 1，辺 4–7 に沿った比率が 2 であり，辺
8–11 に沿った比率が 3 であるということであることを意味しており，上述した
simpleGrading の例にまったく同等です．
±s ±e
拡大率 =
±e
±s
拡大方向
図 5.6 ブロックの辺に沿って段階わけされたメッシュ
5.3.1.4 パッチ
patches というリストでメッシュのパッチを与えます．リストにおける各パッチは以下
を含む複合記入です．
• パッチタイプ，いくつかの境界条件が適用されている一般的なパッチか，表 5.1 に
リストアップされていてセクション 5.2.2 項で説明される特定の幾何的条件のどち
らか．
• パッチを作るブロックの面のリスト，便利にパッチを特定できる名前が推奨される
ものの，名前はユーザの選択に任されます．例えば quoteTextinlet，この名前は，
境界条件をフィールドデータファイルに設定するための識別子として使用されます．
blockMesh は patches リストから省かれるどんな境界パッチからも面を集め，それ
らに defaultFaces とよばれる empty タイプからなるデフォルトパッチを割り当て
Open∇FOAM-1.7.1
U-140 第 5 章 メッシュの生成と変換
ます．これは，2 次元の幾何形状において，それらが必要に応じて empty パッチに
集められるのを知りながら，ユーザは 2 次元平面にあるブロック面を省略する選択
ができることを意味します．
図 5.5 での例のブロックに戻って，もし左面に流入があり，右面における流出があり，他
の四つの表面が壁であるならば，以下のとおりパッチは定義できるでしょう．
patches // keyword
(
patch // patch type for patch 0
inlet // patch name
(
(0 4 7 3) // block face in this patch
) // end of 0th patch definition
patch // patch type for patch 1
outlet // arbitrary patch name
(
(1 2 6 5)
)
wall
walls
(
(0 1 5 4)
(0 3 2 1)
(3 7 6 2)
(4 5 6 7)
)
);
それぞれのブロック面は四つの頂点番号のリストによって定義されます．頂点が与えられ
る順序は，ブロックの中から見て，どの頂点からも始めても，他の頂点を定義するために
時計回りに面を回るようなものにならなければなりません．
5.3.2 複数のブロック
1 ブロック以上を使用することでメッシュを作成できます．そのような事情では，メッ
シュは前述のテキストで説明されるように作成されます．唯一の追加設定がブロック間の
接続です．そこに，二つの異なる可能性があります．
face matching あるブロックのパッチを包括する面の組が，別のブロックのパッチを包括
する面の組と全く同じ位置にあるものです．
face merging あるブロックのパッチからの面のグループは，二つのブロックをつなげなが
ら新しい内部の面の組を作成するために，別のブロックのパッチからの面の別のグ
ループに関連づけられます．
face matching で 2 ブロックをつなげるためには，接続を形成する二つのパッチが patches
リストから単に無視されるべきです．blockMesh は，面が外部の境界を形成せず，同じと
ころに位置する各組を，2 ブロックからのセルを接続する，ひとつの内部面に結合するの
を特定します．
もうひとつの face marging は，併合されるブロックパッチがまず patches リストで定義
されることを必要とします．面が併合されるパッチのそれぞれの組が，mergePatchPairs
というオプションリストに含まなければなりません．mergePatchPairs の形式は以下のと
おりです．
Open∇FOAM-1.7.1
5.3 blockMesh ユーティリティを使ったメッシュ生成 U-141
mergePatchPairs
(
( <masterPatch> <slavePatch> ) // merge patch pair 0
( <masterPatch> <slavePatch> ) // merge patch pair 1
...
)
パッチの組は，最初のパッチはマスタになり，2 番目はスレイブになると解釈されます．併
合するための規則は以下のとおりです
• マスタパッチの面は元々定義されているままで，すべての頂点は元の位置にあります．
• スレイブパッチの面は，スレイブとは多少異なるマスタパッチに投影されます．
• スレイブ面のどんな頂点の位置も，面の最小許容値より短いあらゆる辺を除去する
ために，blockMesh によって調整されるかもしれません．
• パッチが図 5.7 に示されるように重なるなら，併合しない各面が，境界条件を適用
しなければならない，元のパッチの外部面として残ります．
• パッチのすべての面が併合されているなら，パッチ自体は表面を全く含まないので，
除去されます．
1
2
パッチ
内部の接続面の領域
外部の境界面の領域
パッチ
図 5.7 重なったパッチのマージ
結果的に，スレイブパッチのオリジナルの幾何形状が，併合の間必ずしも，完全に保存
されるというわけではないということです．したがって，たとえば，円筒状のブロックが，
より大きいブロックにつなげられている場合では，円筒状の形が正しく保存されるように，
マスタパッチを円筒状のブロックにするのが賢いでしょう．併合手順を確実に成功させる
ためのいくつかの追加の推奨策があります．
• 2 次元の幾何学形状では，2 次元平面の外での 3 次元目のセルサイズは，2 次元平面
でのセルの幅・高さと同様であるべきです．
• 二度パッチを併合すること，すなわち，mergePatchPairs で二度それを含めるのは
勧められません．
Open∇FOAM-1.7.1
U-142 第 5 章 メッシュの生成と変換
• 併合されるべきパッチが，他の併合されるパッチと共通の辺を共有するところでは，
両方がマスタパッチとして宣言されるべきです．
5.3.3 8 頂点未満のブロックの作成
八つ未満の頂点でブロックを作成するために，1 組以上の頂点をお互いの上で潰すことが
可能です．頂点を潰す最も一般的な例としては，セクション 5.2.2 項で説明した wedge パッ
チタイプを使用する 2 次元の軸対称問題のための 6 面のくさび型ブロックを作成するとき
があります．図 5.8 に示す私たちの例における，ブロックの簡易型のバージョンを使用す
ることで，過程をわかりやすく例証します．頂点 7 を頂点 4 に，頂点 6 を頂点 5 に置いて
潰すことによって，くさび型ブロックを作成したいということです．これは，ブロック番
号 7 を 4 で，6 を 5 でそれぞれ交換することによって簡単にできます．するとブロック番
号はこのようになります．
hex (0 1 2 3 4 5 5 4)
0
3
4
7 6
5
1
2
図 5.8 くさび形をしたブロックを六つの接点で作る
潰れている頂点を含むブロック面を考えることで，同じことがパッチにも適用でき，以前
(4 5 6 7) だったものが，(4 5 5 4) になります．これは面積をもたないブロック面で，
polyMesh で面のないパッチを生成します．これは boundary ファイルにおいて同様の場合
でも見ることができることと同じです．パッチは blockMeshDict で，empty として指定さ
れるべきです．そしてどんなフィールドの境界条件も結果的に empty であるはずです．
5.3.4 blockMesh の実行
3.3 節で説明されたように，<case>ディレクトリのケースに対して blockMesh を実行す
るためには，以下のようにすればコマンドラインで実行できます．
blockMesh -case <case>
blockMeshDict ファイルは，サブディレクトリ constant/polyMesh に存在しなければなりま
せん．
Open∇FOAM-1.7.1
5.4 snappyHexMesh ユーティリティを使ったメッシュ生成 U-143
5.4 snappyHexMesh ユーティリティを使ったメッシュ生成
OpenFOAM のメッシュ生成ユーティリティ snappyHexMesh について解説します．snap-
pyHexMesh は STL 形式の三角の表面形状から六面体と分割六面体の 3 次元メッシュを自
動的に生成します．はじめのメッシュの細分化と，後に現れる分割の六進法のメッシュ
の表面形状への変形を繰り返して表面形状に近づいていきます．オプションとして，現れ
たメッシュを縮小させ，レイヤセルを挿入することができます．メッシュの細分化のレベ
ルは非常に柔軟性が高く，表面の処理はあらかじめ定義したメッシュの水準に適合します．
snappyHexMesh は毎回負荷を平均化して並列動作をします．
STL 表面形状
図 5.9 snappyHexMesh における 2 次元メッシュ問題の概略図
5.4.1 snappyHexMesh によるメッシュ生成の過程
図 5.9 に示す概略図を用いてメッシュを snappyHexMesh によって生成する流れを説明し
ます．Stereolithography (STL) 形式の表面形状で描かれた対象を囲む長方形の部分（図中
のグレーの部分）にメッシュを作成することを目的とします．これは外部の空気力学のシ
ミュレーションにおいて典型的な手法です．あくまでも snappyHexMesh は 3 次元メッシュ
の生成ツールですが，簡単のためここでは 2 次元の図を使用しています．
snappyHexMesh を実行するには以下の準備が必要です．
• 2 進法または ASCII で表された STL 形式による表面形状データをケースディレクト
リの triSurface サブディレクトリに置く．
• 5.4.2 項で述べる blockMesh を使用して，解析領域の範囲とメッシュ密度の基準を決
めるために六角形の基礎メッシュを作成しておく．
• ケースの system ディレクトリにある snappyHexMeshDict ディクショナリに，適切
な内容を入力する．
snappyHexMeshDict ディクショナリには，メッシュ生成の様々な段階を管理する最上位での
変更や，各過程における個々のサブディレクトリがあります．入力例を表 5.7 に示します．
snappyHexMesh で読み込む形状は snappyHexMeshDict 内の geometory の部分に記述し
ます．形状は STL 形状または OpenFOAM における幾何実体によって指定されます．以下
Open∇FOAM-1.7.1
U-144 第 5 章 メッシュの生成と変換
キーワード 意味 例
castellatedMesh ギザギザのメッシュを作成するかどうか true
snap 表面のスナップの有無 true
doLayers レイヤの追加の有無 true
mergeTolerance 初期メッシュの有界ボックスの比として許容値をまとめ
る
1e-06
debug 中間メッシュと画面プリントの記述の制御
最終メッシュのみ記述 0
中間メッシュの記述 1
後処理のため cellLevel を付けた volScalarField を
記述
2
.obj ファイルとして現在の交点を記述 4
geometry 表面に使用した全てのジオメトリのサブディクショナリ
castellatedMeshControls 城壁メッシュ制御のサブディクショナリ
snapControls 表面スナップ制御のサブディクショナリ
addLayersControls レイヤ追加制御のサブディクショナリ
meshQualityControls メッシュ特性制御のサブディクショナリ
表 5.7 snappyHexMeshDict の最上位のキーワード
に例を示します．
geometry
{
sphere.stl // STL filename
{
type triSurfaceMesh;
regions
{
secondSolid // Named region in the STL file
{
name mySecondPatch; // User-defined patch name
} // otherwise given sphere.stl_secondSolid
}
}
box1x1x1 // User defined region name
{
type searchableBox; // region defined by bounding box
min (1.5 1 -0.5);
max (3.5 2 0.5);
}
sphere2 // User defined region name
{
type searchableSphere; // region defined by bounding sphere
centre (1.5 1.5 1.5);
radius 1.03;
}
};
5.4.2 六面体基礎メッシュの作成
snappyHexMesh を実行する前に blockMesh を使用して図 5.10 が示すように，解析領域を
カバーする六面体セルの基礎メッシュを作成します．基礎メッシュの生成時は以下の点に
注意しなければなりません．
• メッシュは六面体のみで構成されていること
• セルのアスペクト比がほぼ 1 であること．少なくとも連続したスナップが行われる
表面近傍でそうでなければスナップの収束に時間がかかり，不良の原因となる．
• STL の表面とセルのエッジが最低でも一箇所は交差すること．つまり，一つのセル
Open∇FOAM-1.7.1
5.4 snappyHexMesh ユーティリティを使ったメッシュ生成 U-145
だけのメッシュでは機能しない．
図 5.10 snappyHexMesh 実行前の基礎メッシュの生成
5.4.3 面と輪郭に合わせたセルの分割
セルの分割は，snappyHexMeshDict の castellatedMeshControls サブディクショナリにお
いて設定して実行します．castellatedMeshControls の入力の例を表 5.8 に示します．
キーワード 意味 例
locationInMesh メッシュが作成される領域内の位置ベクトル (5 0 0)
ベクトルが細分化の前または最中にセルの面と一致しては
いけない
maxLocalCells 細分化中におけるプロセッサあたりのセルの数の最大値 1e+06
maxGlobalCells 細分化中におけるセルの数の総数 (i.e. 除去の前) 2e+06
minRefinementCells 細分化すべきセルの数の最低値．この値以下だと停止 0
nCellsBetweenLevels 異なる細分化レベル間のセルの緩衝レイヤーの数 1
resolveFeatureAngle 角度がこの値を超えている交点をもつセルに最高レベルの
細分化を行う
30
features 細分化に対する機能リスト
refinementSurfaces 細分化に対する表面ディクショナリ
refinementRegions 細分化に対する領域ディクショナリ
表 5.8 snappyHexMeshDict の castellatedMeshControls サブディクショナリのキーワード
図 5.11 で示されたように，最初に領域内で指定された輪郭に従って選択されたセルで分
割が開始します．
castellatedMeshControls サブディクショナリの輪郭のリストにおいて edgeMesh ファ
イルの名前と細分化のレベルを記述します．
features
(
{
file "someLine.eMesh"; // file containing edge mesh
level 2; // level of refinement
}
);
輪郭の細分化に続き，図 5.12 に示すように，指定された表面における分割のためにセル
が選択されます．
Open∇FOAM-1.7.1
U-146 第 5 章 メッシュの生成と変換
図 5.11 snappyHexMesh の輪郭によるセルの分割
図 5.12 snappyHexMesh の表面によるセルの分割
castellatedMeshControlsのreﬁnementSurfaceディクショナリで，各STL表面のディク
ショナリ入力と，型の最小，最大細分化のデフォルトレベルの指定を行います．(<min> <max>)
最小レベルは表面のいたるところに適用され，最大レベルは resolveFeatureAngle に規
定される角度を超過する交点をもつセルに適用されます．
細分化は STL 表面の特定領域に対して複数回行うことができます．領域の入力は regions
サブディクショナリに収められています．各領域の入力に対するキーワードは領域の名前
そのものであり，細分化のレベルはさらにサブのディクショナリに含まれます．以下の入
力例を参考にしてください．
refinementSurfaces
{
sphere.stl
{
level (2 2); // default (min max) refinement for whole surface
regions
{
secondSolid
{
level (3 3); // optional refinement for secondSolid region
}
}
}
}
Open∇FOAM-1.7.1
5.4 snappyHexMesh ユーティリティを使ったメッシュ生成 U-147
5.4.4 セルの除去
輪郭と表面の分割が完了するとセルの除去が始まります．セルの除去には領域内の有
界表面によって完全に囲まれる一つ以上の範囲が必要です．セルが保持される領域は，
castellatedMeshControls の locationInMesh キーワードに指定される領域内の位置ベ
クトルによって特定されます．セルの体積のほぼ 50 % 以上が領域内に存在する場合保持さ
れます．残りのセルは図 5.13 に示すように除去されます．
図 5.13 snappyHexMesh におけるメッシュの除去
5.4.5 特定領域内のセルの分割
特定領域に含まれるセルはさらに細分化されます．図 5.14 では長方形の濃いグレーの
領域が該当します．castellatedMeshControls 内の reﬁnementRegions サブディクショナリで
は，geometry サブディクショナリにおいて指定された領域の細分化の入力を行います．細
分化の mode と対象領域は以下のとおりです．
inside 領域の内部を細分化します．
outside 領域の外部を細分化します．
distance 表面からの距離にしたがって細分化します．レベルキーワードを用いることで
複数の距離にある異なるレベルにも適用できます．
refinementRegions では，細分化のレベルを levels 入力リストによって (<距離> <レベ
ル>) のように記述します．inside と outside の細分化の場合，<distance>は不要で無視
されますが，指定する必要があります．以下に入力例を示します．
refinementRegions
{
box1x1x1
{
mode inside;
levels ((1.0 4)); // refinement level 4 (1.0 entry ignored)
}
sphere.stl
{ // refinement level 5 within 1.0 m
mode distance; // refinement level 3 within 2.0 m
levels ((1.0 5) (2.0 3)); // levels must be ordered nearest first
}
Open∇FOAM-1.7.1
U-148 第 5 章 メッシュの生成と変換
}
図 5.14 snappyHexMesh の領域によるセルの分割
5.4.6 面へのスナップ
メッシュを生成する次の段階として，メッシュを平滑化するためにセルの頂点を表面に
移動します．その手順は以下の通りです．
1. ギザギザの境界面の頂点を STL 表面上に移動する
2. 最後に移動した境界の頂点を用いて内部メッシュの緩和を求める
3. メッシュの水準に影響をもたらす頂点を探す
4. 最初の数値 (1) での頂点の移動を減らし，2 からメッシュの質が満足できるレベル
に達するまで繰り返す．
表 5.9 に示す snappyHexMeshDict の snapControls サブディクショナリにおいて設定をし
ます．
キーワード 意味 例
nSmoothPatch 表面との一致に至る前に行うパッチの平滑化の回数 3
tolerance 局所的な輪郭の最大長さに対する点と表面の距離の比の許容範囲 4.0
nSolveIter メッシュの置き換え時の緩和計算の回数 30
nRelaxIter メッシュのスナップ時の緩和計算の最大回数 5
表 5.9 snapControls のキーワード
図 5.15 に概略図に例を示します．（メッシュの動きは多少現実と異なるように見えてい
ます．）
5.4.7 メッシュレイヤ
境界面に沿った不規則なセルを作りもしますが，スナップによるメッシュの生成は目的
に合致するでしょう．メッシュをかける過程にはさらにオプションがあり，図 5.16 の暗く
影のついた部分が示すように，境界面に沿って並べられた六面体のセルのレイヤを追加し
ます．
Open∇FOAM-1.7.1
5.4 snappyHexMesh ユーティリティを使ったメッシュ生成 U-149
図 5.15 snappyHexMesh における表面のスナップ
図 5.16 レイヤの挿入
メッシュのレイヤの追加は，以下の手順のように既存のメッシュを境界から縮小させ，
レイヤを挿入することで行われます．
1. 表面に対して法線方向の厚み分だけメッシュを投影させる．
2. 最後に移動した境界面の頂点をもとに内部メッシュの緩和を計算する
3. 有効性を確認し，満足されていない場合は投影された厚みを減らし，2 からやり直
す．いかなる厚みでも有効性が満足できない場合はレイヤを挿入しない．
4. 有効性が確認できたらレイヤメッシュを挿入する．
5. メッシュを再度チェックし，不良箇所が見られる場合はレイヤを除去し 2 に戻る．
レイヤの追加の手順は snappyHexMeshDict の addLayersControls サブディクショナリの
設定によって行われます．入力されるものは表 5.10 に示すとおりです．
レイヤのサブディクショナリはレイヤが適用される各パッチと必要な表面レイヤの数の
入力を含んでいます．パッチ名は，レイヤ追加が表面幾何形状ではなく既存メッシュに関
連付けられるので使われ，したがって，表面領域ではなく，パッチに適用されます．レイ
ヤの入力例は以下のとおりです．
layers
{
Open∇FOAM-1.7.1
U-150 第 5 章 メッシュの生成と変換
キーワード 意味 例
layers レイヤのディクショナリ
relativeSizes レイヤ厚さを，レイヤ外部の歪んでいないセル
の大きさに対する相対値とするか，または絶対
値とするか
true/false
expansionRatio レイヤメッシュの拡大比率 1.0
finalLayerRatio 壁から最も遠い層の厚さ．relativeSizes エン
トリにより相対値か絶対値かが決まる
0.3
minThickness セルのレイヤの最小の厚さ．相対値または絶対
値（同上）
0.25
nGrow 点がなければ生成されない面に結合されたレイ
ヤの数．輪郭に近いレイヤ追加の収束に役立つ．
1
featureAngle この角度以上では表面は押し出されない 60
nRelaxIter 緩和反復のスナップ最大数 5
nSmoothSurfaceNormals 表面法線のスムージング反復数 1
nSmoothNormals 内部メッシュの運動方向のスムージング反復数 3
nSmoothThickness 表面パッチ上の滑らかなレイヤの厚さ 10
maxFaceThicknessRatio 極端にゆがんでいるセルでレイヤの生成を止め
る
0.5
maxThicknessToMedialRatio 中間の距離と厚さの比が大きくなるとレイヤの
生成を減少する
0.3
minMedianAxisAngle 中間の軸点選択に使う角度 130
nBufferCellsNoExtrude 新しいレイヤの末端のためのバッファ領域を作
成
0
nLayerIter レイヤを追加する反復計算全体の最大反復数 50
nRelaxedIter この反復回数を超えた後は，meshQuality の re-
laxed サブディクショナリにおける制御値が使わ
れる
20
表 5.10 snappyHexMeshDict の addLayersControls サブディクショナリのキーワード
sphere.stl_firstSolid
{
nSurfaceLayers 1;
}
maxY
{
nSurfaceLayers 1;
}
}
5.4.8 メッシュの品質制御
メッシュの品質は snappyHexMeshDict の meshQualityControls サブディクショナリへ入
力することで制御できます．入力は表 5.11 に示します．
5.5 メッシュの変換
ユーザは，他のパッケージを使用してメッシュを生成し，OpenFOAM が用いる形式に
それらを変換できます．表 3.6 に示したような様々なメッシュ変換ユーティリティが用意
されています．
よく使われるメッシュ変換ユーティリティのいくつかを以下に挙げ，使い方を紹介します．
ﬂuentMeshToFoam Fluent の.msh メッシュファイルを読み込みます．2 次元，3 次元両方
Open∇FOAM-1.7.1
5.5 メッシュの変換 U-151
キーワード 意味 例
maxNonOrtho 非直交性上限角．180 は不可 65
maxBoundarySkewness 境界面ひずみ上限値． < 0 は不可 20
maxInternalSkewness 内部面ひずみ上限値． < 0 は不可 4
maxConcave 凹み上限角．180 は不可 80
minFlatness 実際の領域に対する最小の投影面積比率．-1 は不可 0.5
minVol 最小のピラミッドボリューム．大きな絶対値の負の数（例
えば-1e30）は不可
1e-13
minArea 最小面領域． < 0 は不可
minTwist 最小面ねじれ． < −1 は不可 0.05
minDeterminant 最小正常セルの行列式．1 = hex， ≤ 0 は不法なセル 0.001
minFaceWeight 0 → 0.5 0.05
minVolRatio 0 → 1.0 0.01
minTriangleTwist Fluent 計算可能性では > 0
nSmoothScale エラー分布反復数 4
errorReduction エラー点の置換のための減少量
relaxed 上述の各キーワードエントリに対して，レイヤ追加プロセ
ス中に反復回数が nRelaxedIter を超えたときに使われる
修正値を含んだサブディクショナリ
relaxed
{
...
}
表 5.11 snappyHexMeshDict の meshQualityControls サブディクショナリのキーワード
に使えます．
starToFoam STAR-CD/PROSTAR のメッシュファイルを読み込みます．
gambitToFoam GAMBIT の.neu ニュートラルファイルを読み込みます．
ideasToFoam ANSYS の.ans 形式で書かれた I-DEAS メッシュを読み込みます．
cfx4ToFoam .geo 形式で書かれた CFX メッシュを読み込みます．
5.5.1 ﬂuentMeshToFoam
Fluent は，.msh 拡張子をもつ単一のファイルに，メッシュ・データを書き出します．
ASCII 書式でファイルを書かなければなりませんが，それは，Fluent のデフォルトの選択
ではありません．2 次元の幾何形状を含んでいる単一の流れの Fluent メッシュを変換する
ことは可能です．OpenFOAM では，2 次元幾何形状は，現在のところ，3 次元でメッシュ
を定義することで扱われます．そこでは，前面と背面は empty 境界パッチタイプと定義さ
れます．2 次元の Fluent メッシュを読みこむときに，コンバータは，自動的に 3 次元目の
方向にメッシュを拡張し，frontAndBackPlanes と名づけ，空のパッチを加えます．
また，以下の特徴が見られます．
• OpenFOAM コンバータは，Fluent の境界条件の定義をできるだけ把握しようと試
みるでしょう．しかしながら，OpenFOAM と Fluent の境界条件の間に明確で，直
接的な対応は全くないので，ユーザはケースを実行する前に境界条件をチェックす
るべきです．
• 2 次元メッシュから軸対称なメッシュを生成することは現在サポートされていませ
んが，ご要望があれば実装されるでしょう．
• 複数の媒質からなるメッシュは受入れられません．もし複数の流体媒質が存在して
いると，それらは単一の OpenFOAM メッシュに変換されるでしょう．もし固体領
Open∇FOAM-1.7.1
U-152 第 5 章 メッシュの生成と変換
域が検出されると，コンバータは，それを排除しようと試みるでしょう．
• Fluent はメッシュの内部にパッチを定義することをユーザに許しています．つまり，
面の両側にセルが存在する場合です．そのようなパッチは OpenFOAM では許容さ
れていないので，コンバータはそれらを排除しようと試みるでしょう．
• 現在，埋め込まれたインタフェースと細分化のツリーに関するサポートは全くあり
ません．
Fluent .msh ファイルの変換は，必要なディレクトリとファイルを作成することによって
まず新しい OpenFOAM ケースを作ることで始まります．ケースディレクトリは system の
サブディレクトリに controlDict ファイルを含みます．そしてコマンド・プロンプトにおい
て，ユーザは以下を実行することになります．
fluentMeshToFoam <meshFile>
ここで <meshFile> は絶対パスか相対パスによる.msh ファイルの名前です．
5.5.2 starToFoam
このセクションは STAR-CD コードで生成されたメッシュを，OpenFOAM のメッシュ
のクラスが読むことができる書式に変換する方法を説明します．メッシュは STAR-CD と
ともに供給されるどのパッケージでも生成できます．例えば PROSTAR，SAMM，ProAM
およびそれらの派生物です．コンバータは，統合された任意のカップルマッチングを含む
どんなただ一つの流れのメッシュも受け入れ，すべてのセルタイプがサポートされます．
コンバータがサポートしない特徴は以下のとおりです．
• 複数の流れのメッシュの仕様
• バッフル，すなわち，領域内に挿入された厚さなしの壁
• 部分境界，カップルマッチのうちの覆われていない部分は境界面であると考えられ
ます．
• スライドするインターフェース
複数の流れのメッシュに関しては，メッシュ変換は，別々のメッシュとしてそれぞれの個々
の流れを書くことによって実現され，OpenFOAM でそれらを組み立て直すことができます．
OpenFOAM は，5.1 節で指定されたかなり厳しい妥当性評価基準に整合しているメッシュ
の入力だけを受け入れるという方針を採ります．無効なメッシュを用いて実行されること
はなく，それ自体が無効なメッシュは変換できません．以下のセクションは，STAR-CD と
ともに供給されたメッシュ生成パッケージを用いてメッシュを生成する際に，OpenFOAM
形式に変換できることを保証するために取らなければならない方法を説明します．これか
らのセクションにおいて重複を避けるために，STAR-CD とともに供給されるメッシュ生
成ツールは，STAR-CD という総称によって参照されることにします．
5.5.2.1 変換における一般的なアドバイス
ユーザは starToFoam の変換を試みる前に，STAR-CD のメッシュをチェックするツール
を動かすべきです．そして，変換の後に，checkMesh ユーティリティは新たに変換された
Open∇FOAM-1.7.1
5.5 メッシュの変換 U-153
メッシュで実行されるべきです．あるいはまた，starToFoam はユーザが問題のあるセルを
より近くで見ることができるようにするための PROSTAR コマンドを含む警告を発行する
かもしれません．問題の多いセルとマッチは，OpenFOAM を用いてメッシュを使おうと
する前に，チェックされ修正されるべきです．無効なメッシュは OpenFOAM で動きませ
んが，それが正当性評価基準を課さない別の環境では動くかもしれないということを覚え
ていてください．
コンバータにおいて許容度を合わせることで，許容度のマッチングに関するいくつかの
問題を克服できます．しかしながら，有効性への限界があり，デフォルトレベルからマッチ
ング許容度を増加させることが明らかに必要であるということは，オリジナルのメッシュ
が正確でないことを示します．
5.5.2.2 不要なデータの消去
メッシュ生成が終了したら，流体セルが作成されて，他のすべてのセルが取り除かれる
と仮定して，あらゆる不要な頂点を取り除き，セル境界と頂点番号を圧縮してください．
これは以下の PROSTAR コマンドで実行されます．
CSET NEWS FLUID
CSET INVE
CSET は空であるべきです．これがそうでないなら，CSET でセルを調べて，モデルを調整
してください．もしセルを本当に必要としていないなら，PROSTAR コマンドを使用する
ことでそれらを取り除くことができます．
CDEL CSET
同様に，頂点も取り除かれる必要があるでしょう．
CSET NEWS FLUID
VSET NEWS CSET
VSET INVE
これらの必要とされていない頂点を取り除く前に，必要とされていない境界面は，除かれ
る前に，集められなければなりません．
CSET NEWS FLUID
VSET NEWS CSET
BSET NEWS VSET ALL
BSET INVE
BSET が空でないなら，必要とされていない境界面は以下のコマンドを使用して削除するこ
とができます．
BDEL BSET
このとき，モデルは定義された境界面と同様に，流体セルとそれを支持する頂点だけを含
むべきです．すべての境界面はセルの頂点によって完全に支えられるべきです．もしそう
でないなら，すべてが正常になるまで幾何学形状を正常化し続けます．
Open∇FOAM-1.7.1
U-154 第 5 章 メッシュの生成と変換
5.5.2.3 デフォルトの境界条件の削除
デフォルトで，STAR-CD は明示的に境界領域に関連づけられていないどんな境界面に
対して壁境界を適用します．残っている境界面は，割り当てられた境界タイプ 0 として
default 境界領域に集められます．OpenFOAM は，人為ミスを誘発するので，意図的に
未定義の界面のための default 境界条件の概念をもっていません．例えば，すべての関連
付けられていない面にデフォルト条件を意図して与えたかどうかをチェックする手段は全
くありません．
したがって，メッシュが首尾よく変換されるために，各 OpenFOAM メッシュに対する
すべての境界を指定しなければなりません．default 境界は，以下で説明された手順を用い
ることで実体をもつものに変えられる必要があります．
1. Wire Surface オプションで幾何学形状をプロットしてください．
2. default 領域 0 と同じパラメータで余分な境界領域を定義してください．そして，
すべての見えている面を，境界ツールでゾーンオプションを選択して，モデルのスク
リーンに描かれている全体の周りに多角形を描くことによって，10 といった新しい
領域に加えてください．PROSTAR の以下のコマンドを発行することによって，こ
れができます．
RDEF 10 WALL
BZON 10 ALL
3. 私たちはセットからすべての以前に定義された境界タイプを外すことになるでしょ
う．境界領域に行ってください．
BSET NEWS REGI 1
BSET NEWS REGI 2
... 3, 4, ...
境界セットに関連している頂点を集め，次に頂点に関連している境界面を集めてく
ださい．それらは元のセットのように 2 倍あるでしょう．
BSET NEWS REGI 1
VSET NEWS BSET
BSET NEWS VSET ALL
BSET DELE REGI 1
REPL
これは境界領域 1 の上で定義された境界領域 10 の面を与えるはずです．BDEL BSET
と共にそれらを削除してください．すべての領域にこれらを繰り返してください．
5.5.2.4 モデルの再番号付け
コマンドを使用することでモデルの番号を付け替えて，チェックしてください．
CSET NEW FLUID
CCOM CSET
VSET NEWS CSET
VSET INVE (Should be empty!)
VSET INVE
Open∇FOAM-1.7.1
5.5 メッシュの変換 U-155
VCOM VSET
BSET NEWS VSET ALL
BSET INVE (Should be empty also!)
BSET INVE
BCOM BSET
CHECK ALL
GEOM
内部の PROSTAR の照合は，最後の二つのコマンドで実行されます．コマンドはいくつか
の予見できない誤りを明らかにするかもしれません．また，PROSTAR は幾何学形状にで
はなく，STAR-CD のために因子を適用するだけであるので，スケール因子に注意してく
ださい．因子が 1 でないなら，OpenFOAM の scalePoints ユーティリティを使用してくだ
さい．
5.5.2.5 メッシュデータの出力
メッシュがいったん完成されたら，モデルのすべての統合されたマッチをカップルタイプ
1 に置いてください．他のすべてのタイプが，任意のマッチを示すのに使用されるでしょう．
CPSET NEWS TYPE INTEGRAL
CPMOD CPSET 1
そして，計算格子の構成要素をそれら自身のファイルに書かなければなりません．これは
コマンドを発行し，境界に対して PROSTAR を用いることで行われます．
BWRITE
デフォルトでは，これは.23 ファイル（3.0 の前のバージョン）か.bnd ファイル（バージョ
ン 3.0 以降）に書きます．セルに対しては，以下のコマンド，
CWRITE
がセルを.14 か.cel ファイルに出力します．頂点に対しては，以下のコマンド，
VWRITE
が.15 か.vrt ファイルに出力します．現在の既定の設定では，ASCII 書式でファイルを書
き出します．カップルが存在しているなら，拡張子.cpl をもつ追加カップルファイルが以
下のコマンドをタイプすることによって書きだされる必要があります．
CPWRITE
三つのファイルに出力した後に，PROSTAR を終了するか，ファイルを閉じてください．パ
ネルに目を通して，すべての STAR-CD のサブモデル，材料，および流体の特性に注目し
てください．材料の特性と数学的モデルは，OpenFOAM ディクショナリファイルを作成
し，編集することで設定される必要があるでしょう．
PROSTAR ファイルを変換する手順は最初に，必要なディレクトリを作成することで新
しい OpenFOAM のケースを作ることです．同じディレクトリの中に PROSTAR ファイル
を格納しなければなりません．そして，ユーザはファイル拡張子を変えなければなりませ
ん．.23 と.14 と.15 (STAR-CD バージョン 3.0 以前) か，.pcs と.cls と.vtx (STAR-CD
Open∇FOAM-1.7.1
U-156 第 5 章 メッシュの生成と変換
バージョン 3.0 以降) から，それぞれ.bnd，.cel，および.vrt に変えます．
5.5.2.6 .vrt ファイルの問題
.vrt ファイルは，フリー・フォーマットというよりむしろ指定された幅に関するデータ
列で書かれています．座標値が続く頂点番号を与えるデータの典型的な行は，以下のとお
りであるかもしれません．
19422 -0.105988957 -0.413711881E-02 0.000000000E+00
縦座標が科学表記法で書かれていて，負であるなら，値の間には，スペースが全くないか
もしれません．例えば以下のような状況です．
19423 -0.953953117E-01-0.338810333E-02 0.000000000E+00
starToFoam コンバータは，縦座標の値を区切るためにスペースを区切り文字としてデータ
を読むので，前の例を読むとき，問題になります．したがって，OpenFOAM は必要なと
ころで値の間にスペースを挿入するための簡単なスクリプト，foamCorrectVrt を含んでい
ます．すると，それが前の例を以下のように変換するでしょう．
19423 -0.953953117E-01 -0.338810333E-02 0.000000000E+00
したがって，必要ならば starToFoam コンバータを動かす前に，以下のようにタイプするこ
とで foamCorrectVrt スクリプトを実行するべきです．
foamCorrectVrt <file>.vrt
5.5.2.7 OpenFOAM のフォーマットへのメッシュの変換
ここで，OpenFOAM の実行に必要な境界，セル，およびポイントファイルを作成する
ために，変換ユーティリティ starToFoam を実行できます．
starToFoam <meshFilePrefix>
<meshFilePrefix> は，メッシュファイルの絶対か相対パスを含んでいる接頭語の名前で
す．ユーティリティの実行後に，OpenFOAM 境界タイプは boundary ファイルを手で編
集することによって指定されるべきです．
5.5.3 gambitToFoam
GAMBITは.neu拡張子をもつ単一のファイルにメッシュ・データを書き出します．GAM-
BIT の.neu ファイルを変換する手順は，最初に新しい OpenFOAM ケースを作成し，そし
てユーザがコマンド・プロンプトで以下のコマンドを実行します．
gambitToFoam <meshFile>
ここで <meshFile> は絶対か相対パスによる.neu ファイルの名前です．
GAMBIT ファイル形式は例えば，壁，対称面，周期境界といったような境界パッチの種
類に関する情報を提供しません．したがって，すべてのパッチがタイプパッチとして作成
されます．メッシュ変換の後に必要に応じてリセットしてください．
Open∇FOAM-1.7.1
5.6 異なるジオメトリ間のフィールドマッピング U-157
5.5.4 ideasToFoam
OpenFOAM は I-DEAS によって生成されたメッシュを変換できますが，.ans ファイ
ルとして ANSYS 形式で書きだされます．.ans ファイルを変換する手順は最初に新しい
OpenFOAM ケースを作成し，そしてユーザがコマンド・プロンプトから以下のように実
行します．
ideasToFoam <meshFile>
ここで <meshFile> は絶対か相対パスによる.ans ファイルの名前です．
5.5.5 cfx4ToFoam
CFX は.geo 拡張子をもつ単一のファイルにメッシュ・データを書き出します．CFX の
メッシュ形式は，ブロック構造です．すなわち，メッシュは相互の関係と頂点の位置の情
報をもつブロックの組として指定されます．OpenFOAM はメッシュを変換して，できる
だけよく CFX 境界条件を得ようと試みるでしょう．単一の OpenFOAM メッシュに変換
される全ての領域とともに，多孔質や固体領域などに関する情報を含む CFX の 3 次元の
「パッチ」定義は無視されます．CFX は「デフォルト」パッチの概念をサポートし，そこで
は，境界条件が定義されていない外部の面のそれぞれが壁として扱われます．これらの面
はコンバータで集められ，OpenFOAM メッシュの defaultFaces パッチに入れられ，タイ
プ wall が与えられます．もちろん，それに続けてパッチタイプを変えることができます．
CFX での OpenFOAM の 2 次元幾何形状は，一つのセルの厚さ [**] の 3 次元メッシュ
として作成されます．もしユーザが CFX によって作成されたメッシュで 2 次元のケース
を動かしたいなら，前後の面に関する境界条件は empty として設定されるべきです．ユー
ザは，計算面の他のすべての面に関する境界条件が正しく設定されていることを確かめる
べきです．現在，2 次元の CFX メッシュから軸対称の幾何形状を作成するための機能はあ
りません．
CFX の.geo ファイルを変換する手順は最初に新しい OpenFOAM ケースを作成し，そ
してユーザがコマンド・プロンプトから以下のように実行します．
cfx4ToFoam <meshFile>
ここで <meshFile> は絶対か相対パスによる.geo ファイルの名前です．
5.6 異なるジオメトリ間のフィールドマッピング
mapFields ユーティリティは，別のジオメトリに対応するフィールドに与えられたジオメ
トリに関連する一つ以上のフィールドをマップします．フィールドが関連するジオメトリ
の間のどんな類似性も必要とされないほど完全に一般化されています．しかしながら，ジ
オメトリが一貫している場合は，マッピングの過程を簡素化する特別なオプションを用い
て mapFields を実行できます．
mapFields について述べるために，いくつかの用語を定義する必要があります．まず，デー
タがソースからターゲットまでマップされるといいます．ソースとターゲットフィールド
Open∇FOAM-1.7.1
U-158 第 5 章 メッシュの生成と変換
の両方の幾何形状と境界タイプ，あるいは条件がまったく同じであるなら，フィールドは
一貫していると考えられます．mapFields がマップするフィールド・データは，ターゲット
となるケースの controlDict の startFrom/startTime によって指定された時間ディレクトリ
の中のフィールドです．データは，ソースとなるケースの同等な時間ディレクトリから読
み込まれて，ターゲットとなるケースの同等な時間ディレクトリに写像されます．
5.6.1 一貫したフィールドのマッピング
一貫したフィールドのマッピングは，以下の -consistent コマンドラインオプションを
使用しながら，mapFields を（ターゲット）ケース上で実行することによって，簡単に実行
されます．
mapFields <source dir> -consistent
5.6.2 一貫しないフィールドのマッピング
フィールドが図 5.17 のように一貫していないとき，mapFields はターゲットとなるケー
スの system ディレクトリに mapFieldsDict ディクショナリを必要とします．以下の規則が
マッピングに適用されます．
• フィールド・データはどこでも，可能である限り，ソースからターゲットにマップさ
れます．すなわち，私たちの例では，代替されないままで残っている網掛け領域を
除いて，ターゲットとなる幾何形状に含まれるすべてのフィールド・データがソー
スからマップされます．
• 別の方法で mapFieldsDict ディクショナリで指定されない限り，パッチフィールド・
データは代替されないままです．
mapFieldsDict ディクショナリは，パッチデータに関するマッピングを指定する二つのリ
ストを含んでいます．最初のリストは，図 5.17 のように幾何形状が一致するソースとター
ゲットとなるパッチの組の間のデータのマッピングを指定する patchMap です．リストは，
ソースとターゲットとなるパッチの名前のそれぞれの組を含んでいます．2 番目のリスト
は，ターゲットとなるパッチの名前を含む cuttingPatches です．そのターゲットのパッ
チの値は，ターゲットとなるパッチが切断するソースの内部のフィールドからマップされま
す．私たちの例における左下のターゲットとなるパッチにように，ターゲットとなるパッ
チがソースの内部のフィールドの一部を切断するだけの状況では，内部のフィールドに含
まれるそれらの値はマップされ，外部にある値は変わりません．mapFieldsDict ディクショ
ナリの例は以下に示します．
17
18 patchMap ( lid movingWall );
19
20 cuttingPatches ( fixedWalls );
21
22
23 // *************************************************************************
//
Open∇FOAM-1.7.1
5.6 異なるジオメトリ間のフィールドマッピング U-159
cuttingPatches
ソースフィールド形状
ターゲットフィールド形状
内側のターゲットパッチには
を使ってマップできる
一致するターゲットパッチには
を使ってマップできるpatchMap
図 5.17 一貫しないフィールドをマップする
mapFields <source dir>
5.6.3 並列なケースのマッピング
mapFields を実行するとき，並列計算のためにソースとターゲットとなるケースのどちら
かもしくは両方を分解するなら，追加オプションが必要になります．
-parallelSource ソースケースが並列計算のために分解される場合
-parallelTarget ターゲットケースが並列計算のために分解される場合
Open∇FOAM-1.7.1
第6章
後処理
本章では，OpenFOAM での後処理のオプションについて述べます．OpenFOAM には
オープンソースの可視化アプリケーションである ParaView を用いた後処理のユーティリ
ティである paraFoam が提供されており，これについては 6.1 節で述べています．後処理の
別の方法としては，EnSight や Fieldview 等のサードパーティから供給されている製品を
使う方法や Fluent の後処理を使う方法があります．
6.1 paraFoam
OpenFOAM で提供されているメインの後処理用のツールは，オープンソースの可視化
アプリケーションである ParaView で走る読み込みのモジュールです．このモジュールは，
OpenFOAM により提供されている ParaView のバージョン 3.6.1 を用いている二つのライ
ブラリである PV3FoamReader と vtkPV3Foam にコンパイルされています．最新のバイナ
リでリリースされているソフトウエアについても適切に走るはずですが，このバージョンの
ParaView をお使いになることを推奨します．ParaView に関する詳細な内容およびドキュ
メントについては http://www.paraview.org や http://www.kitware.com/products/
paraviewguide.html のサイトから入手することができます．
ParaView はそのデータ処理とレンダリングのエンジンに Visualization Toolkit (VTK)
を使っているため，VTK フォーマットであれば，どのようなデータでも読み込むことがで
きます．OpenFOAM には foamToVTK ユーティリティがあり，ネイティブな書式のデー
タを VTK の書式に変換することができ，このことは，VTK ベースの画像ツールであれば，
OpenFOAMのcaseの後処理として使えることを意味しています．このことは，OpenFOAM
で ParaView を使うことの代替法を提供しています．ユーザには高度な使い方，並列処理
における可視化を経験してほしいことから，フリーの VisIt を推奨します．これは，http:
//llnl.gov/visit/ から入手できます．
要約すると，OpenFoam の後処理用のツールとしては，ParaView の読み込みモジュー
ルを推奨します．代わりの方法としては，OpenFOAM のデータを ParaView に読み込ま
せるために VTK フォーマットに変換する方法と，VTK ベースのグラフィックツールを用
いる方法があります．
6.1.1 paraFoam の概要
paraFoam は，OpenFOAM で提供されている読み込みモジュールを用いて，ParaView
U-162 第 6 章 後処理
を立ち上げる厳密なスクリプトです．他の OpenFoam のユーティリティ同様に，ルート
ディレクトリのパスまたは -case オプションと，引数としてのケース名を入力して実行さ
れます
paraFoam -case <caseDir>
ParaView が立ち上がり，オープンすると図 6.1 のようになります．ケースは左側のパネル
でコントロールされますが，それには次のような項目があります
Pipeline Browser は，ParaView の中でオープンしているモジュールをリストアップして
おり，選択されたモジュールは黄色にハイライトされ，このモジュールに関するグ
ラフィックスは，脇の目のボタンをクリックすることにより，有効・無効の切り替
えができます．
Properties パネル には，時間や領域，およびフィールドなどのケースに関する入力条件の
選択項目があります．
Display パネル は，色など，選択されたモジュールの可視化の描画をコントロールします．
Information パネル はメッシュのジオメトリとサイズのようなケースの統計値を表示し
ます．
図 6.1 paraFoam の画面
ParaView はツリー構成に基づいた構造で操作するようになっており，その中で，トップ
レベルのケースのモジュールからサブモジュールのケースを作成するフィルタをかけるこ
Open∇FOAM-1.7.1
6.1 paraFoam U-163
とができます．例えば，圧力のコンタのプロットは，すべての圧力データをもつケースモ
ジュールのサブモジュールとすることができます．ParaView の長所は，ユーザが数多く
のサブモジュールを作ることができることと，画像やアニメーションのどちらでも作るこ
とができるという点にあります．例えば，ソリッドのジオメトリ，メッシュおよび速度ベ
クトル，圧力のコンタのプロットなどが追加できますし，これらアイテムについては必要
に応じてオン・オフすることができます．
システムの一般的な操作は選択をし，Properties パネルの緑の Apply ボタンをクリックす
ることを基本としています．追加項目ボタンとしては，必要に応じて GUI のリセットを行
う Reset ボタン，アクティブになっているモジュールを削除する Delete ボタンがあります．
6.1.2 Properties パネル
ケースモジュールの Properties パネルにはタイムステップや領域，およびフィールドの
設定の機能があります．コントロール方法については，図 6.2 に説明を記載しています．現
在の読み込みモジュールにおいて，ディレクトリ内のデータを ParaView に書き込むこと
は，特に価値はありません．6.1.4 項節に書いてあるように，現在の読み込みモジュールに
おいて，Current Time Controls あるいは VCR Controls ツールバー内のボタンで，表示
のための時間データを選択することができます．paraFoam の操作においては，何らかの変
更を行ったときには Accept をクリックする必要があります．この Accept ボタンは，ユー
ザが変更するつもりがなかった場合を考慮して，警告を与えるために緑色にハイライトさ
れます．この操作方法は，承諾する前に多くの選択ができるという長所をもっており，特
に，大きなケースでは，データ処理が最小限で行えるという便利さがあります．しばしば
ファイルのケースデータが変更され，（たとえばフィールドデータが新しい時間ディレクト
リに書き込まれたりしたために）ParaView を書き換える必要がある場合があります．変
更を書き込む際には，Properties パネル一番上の Update GUI ボタンをチェックすることに
よって変更します．
6.1.3 Display パネル
Display パネルには，与えられたケースモジュールのデータの可視化に関する機能があり
ます．
以下が特に重要な点です．
• データのレンジは，フィールドの最大値・最小値に対して自動的に更新はされませ
んので，特に，初期のケースモジュールをロードしたときには，適切なインターバ
ルを Rescale to Data Range で選択するように注意する必要があります．
• Edit Color Map ボタンでは，二つのパネルによるウィンドウが開きます．
1. Color Scale パネルではスケールの色を選択することができます．標準の青∼赤
の CFD スケールを選択するには，Choose Preset をクリックし，Blue to Red
Rainbox HSV を選択します．
2. Color Legend パネルではカラーバーの凡例の色を切り替えたり，フォントのよ
うな凡例のレイアウトを決定します．
Open∇FOAM-1.7.1
U-164 第 6 章 後処理
領域や
それぞれのパッチを選択
internalMesh
ケースモジュールに
読み込むフィールドを選択
図 6.2 ケースモジュールのプロパティパネル
• 基本となるメッシュは Style パネルにある Representation メニューの Wrireframe
を選択することにより表示されます．
• Wrireframe が選択されている場合のメッシュのようなジオメトリは Color By メ
ニューから Solid Color を選択し，Set Solid Color ウィンドウで指定することによ
り可視化することができます．
• イメージは Opacity の値 (1 = solid，0 = invisible) を修正することにより半透明に
することができます．
6.1.4 ボタンツールバー
ParaView の各機能はメインウインドウ上部のメニューバーのプルダウンメニューだけで
なく，その下にあるボタンツールバーから選択することもできます．表示するツールバー
は View メニューの Toolbars から選択することができます．各ツールバーの初期設定の配
置は図 6.4 のようになっており，それぞれどのプルダウンメニューの項目に対応するかを
示しています．多くのボタンの機能はアイコンから明快ですし，Help メニューの tooltips
にチェックがされていればポインタを上に置いたときに簡潔な注を表示させることができ
ます．
Open∇FOAM-1.7.1
6.1 paraFoam U-165
6.1.5 ビューの操作
本セクションでは，paraFoam におけるオブジェクトのビューの設定と取り扱いに関する
操作について説明します．
6.1.5.1 View settings
View Settings を Edit メニューから選択すると，General，Lights，Annotation の 3 項
目からなる Render View Options ウインドウが表示されます．General には開始時に設定す
べき以下の項目があります．
• 背景色，印刷物には白が望ましい
• CFD，特に 2 次元のケースでは Use Parallel Projection（平行投影）が通常用いられる
Lights には Light Kit パネルに光源の詳細設定があります．Headlight パネルでは直接光
をコントロールします．Headlight ボタンを白色光の強度 1 にすれば鮮明な色の画像を得
られるでしょう．
Annotation では，ビューウィンドウにおける軸や原点などの注釈の表示の有無を設定し
ます．Orientation Axes で x，y，z 軸の色など，軸の表示設定をします．
6.1.5.2 General settings
SettingsをEditメニューから選択するとGeneralとRender Viewの項目からなるOptions
ウインドウが表示されます．
General パネルでは ParaView の挙動の初期値を設定します．特に，Auto Accept をチェッ
クすると Properties ウインドウで行った変更が Apply ボタンをクリックすることなく自動
で表示に反映されるようになります．大きな解析ケースではこのオプションは使わない方
がよいでしょう．というのもいくつもの変更を行う際にそのつど再描画されるのは煩わし
く，一度で反映させた方がよいと思われるからです．
Render View パネルには General，Camera，Server の三つの項目があります．General パ
ネルでは level of detail (LOD) で回転や平行移動，サイズ変更といった操作時のレンダリ
ングの精度を設定できます．レベルを下げることで多数のセルからなるケースにおいても
視点操作時の再描画速度を早くすることができます．
Camera パネルでは 3D または 2D における視点の移動を設定します．回転，平行移動，
ズームといった操作をマウスと shift キー，control キーを組み合わせて行うことができま
すが，割当ては任意に設定することができます．
6.1.6 コンタのプロット
コンタのプロットは，上部のメニューバーの Filter メニューから Contour を選択するこ
とにより作成することができます．フィルタはあたえられたモジュール上で役割を果たす
ことから，モジュール自体が 3D のケースの場合には，コンタは constant value を表す 2D
表示（同一面：アイソサーフェス）に設定されます．コンタに関する Properties にはユー
ザが編集できる Isosurfaces のリストがあり，New Range ウィンドウにより使いやすくなっ
ています．スカラフィールドはプルダウンメニューにより選択することができます．
Open∇FOAM-1.7.1
U-166 第 6 章 後処理
6.1.6.1 cutting plane の使い方
まれに，同一面でのコンタの作成でなく，断面のコンタを作成したい場合があります．こ
のためには，最初に Slice フィルタを用いて，コンタをプロットしたい切断面を作成する必
要があります．この Slice フィルタにより，ユーザはそれぞれ center と normal/radius を
使って，Slice Type メニューの中に Plane，Box または Sphere のカッティングを指定する
ことができます．マウスを使っても同じように切断面の操作を行うことができます．
その後，コンタのラインを作成するために，切断された面で Contour フィルタを実行す
ることができます．
6.1.7 ベクトルのプロット
ベクトルのプロットは Glyph フィルタを用いて作成します．フィルタは Vectors で選択
されたフィールドを読み込み，Arrow によりクリアなベクトル画像を提供するための Glyph
Types のレンジを用意します．それぞれのグリフは，ユーザが最も効果的にパネルをコン
トロールするために選択されています． Promerties パネルのリマインダには，グリフのた
めの主要な Scale Mode メニューがあります．その中でも最もよく使うオプションは，ベ
クトルの大きさに比例したグリフの長さの Vector，各々のグリフの長さが同じにする Oﬀ，
また，Set Scale Factor はグリフの基本的な長さをコントロールします．
6.1.7.1 セルの中心でのプロット
ベクトルは，デフォルトによりセルの頂点上に作成されますが，セルの中心にプロット
データを作成したい場合もあります．この場合には，最初に case モジュールに対して Cell
Centers を適用し，その後セルの中心の計算結果のために Glyph フィルタを適用します．
6.1.8 流線
流線は，Stream Tracer フィルタを用いて作成されたトレーサラインを用いて作成され
ます．トレーサの Seed パネルで，Line Source あるいは Point Cloud 全般のトレーサポイ
ントの配分を指定します．ユーザは線のようなトレーサソースを見ることができますが，
白で表示させている場合は背景を変更しなければなりません．トレーサの軌跡の間隔とト
レーサのステップの長さは Stream Tracer パネルの下にあるテキストボックスで指定しま
す．望み通りのトレーサのラインを作成するプロセスは大部分が試行錯誤であり，ステッ
プの長さを減少させることによりと同じように円滑にはっきりと表示することができます
が，反面計算時間が長くなります．トレーサのラインが作成できた後は，より高品質な画
像を作り出すために Tubes フィルタを Tracer モジュールに適用することができます．こ
の Tubes は各々のトレーサのラインをたどっており，厳密な円筒型にはなっていませんが，
固定された側面と半径の数値を持っています．上述のように側面の数値が 10 に設定された
とき，Tubes は円筒型として表示されますが，くどいようですが，これには計算コストが
かかります．
Open∇FOAM-1.7.1
6.2 Fluent による後処理 U-167
6.1.9 画像の出力
画像を出力する最も簡単な方法は File メニューから Save Screeshot を選択することで
す．選択すると，保存する画像の解像度を指定するウインドウが現れます．自動的に解像
度が設定されるよう，アスペクト比を固定するボタンがあります．ピクセル解像度を設定
すると画像が保存されます．より高画質で保存するには，解像度を幅 1000 ピクセル以上
にするとよいでしょう．A4 サイズの書面や PDF の図として，シャープな仕上がりになり
ます．
6.1.10 アニメーション出力
アニメーションを作成するには，まず File メニューから Save Animation を選択します．
解像度などいくつかの項目を設定するダイアログウインドウが表示されるので，必要な解
像度を指定します．それ以外では，タイムステップごとのフレーム数が重要です．これは
直感的には 1 と設定するでしょうが，アニメーションのフレーム数を多くするためにより
大きな値にしてもかまいません．この方法は特に，mpeg など，動画プレイヤーの再生速
度に制限がある場合に，アニメーションの速度を遅くしたいときに有効です．
Save Animation ボタンを押すと，ファイル名やファイル形式を設定する別のウイン
ドウが現れます．OK を押すと，“<ファイル名>_<画像番号>.<拡張子>” という名前で一
群の画像ファイルが保存されます．例えば animation というケースの 3 番目の画像は，
“animation_0002.jpg” となります．（画像番号は 0000 から始まります）
一連の画像が保存されると，適当なソフトを使って動画に変換することができます．Im-
ageMagick パッケージに含まれる変換ユーティリティは，以下のようにコマンドラインか
ら実行できます．
convert animation*jpg movie.mpg
mpg 動画を作成する際に初期設定の -quality 90% から動画のクオリティを上げるといい
でしょう．これによって粒状ノイズを削減することができます．
6.2 Fluent による後処理
Fluent を，OpenFOAM で実行したケースに，ポストプロセッサとして適用することも
可能です．その目的のために，二つの変換器が提供されています．foamMeshToFluent は，
OpenFOAM のメッシュを Fluent フォーマットに変換し，それを.msh ファイルとして書き
出します．そして，foamDataToFluent は，OpenFOAM の結果のデータを，Fluent が読むこ
とができる.dat ファイルに変換します．foamMeshToFluent は，普通の方法で実行すること
ができます．その結果のメッシュは，そのケースディレクトリの ﬂuentInterface サブディレ
クトリに書き出されます．すなわち，<caseName>/ﬂuentInterface/<caseName>.msh です．
foamDataToFluentは，OpenFOAMのデータの結果を，Fluentフォーマットに変換します．
変換は，二つのファイルに制御されます．まず，controlDict ディクショナリは，startTime を
設定し，変換される結果のセットを与えます．これは，変換される結果のセットを与えます．
もしあなたが，最新の結果を変換したければ，startFromを latestTimeと設定することがで
Open∇FOAM-1.7.1
U-168 第 6 章 後処理
きます．translationを指定する 2番目のファイルは，foamDataToFluentDictディクショナ
リです．このファイルは，constant ディレクトリに置かれています．foamDataToFluentDict
ディクショナリの例を以下に示します．
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.7.1 |
5 | \\ / A nd | Web: www.OpenFOAM.org |
6 | \\/ M anipulation | |
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 location "system";
14 object foamDataToFluentDict;
15 }
16 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
17
18 p 1;
19
20 U 2;
21
22 T 3;
23
24 h 4;
25
26 k 5;
27
28 epsilon 6;
29
30 gamma 150;
31
32
33 // *************************************************************************
//
ディクショナリは，次の形式のエントリを含んでいます．
<fieldName> <fluentUnitNumber>
<fluentUnitNumber>は，Fluent ポストプロセッサが使うラベルです．Fluent は，ある決
まったセットのフィールドしか認識しません．<fluentUnitNumber>の数の基本的なセッ
トは，表 6.1 に引用されています．
Fluent 名 ユニット番号 共通 OpenFOAM 名
PRESSURE 1 p
MOMENTUM 2 U
TEMPERATURE 3 T
ENTHALPY 4 h
TKE 5 k
TED 6 epsilon
SPECIES 7 —
G 8 —
XF RF DATA VOF 150 gamma
TOTAL PRESSURE 192 —
TOTAL TEMPERATURE 193 —
表 6.1 ポストプロセッサのための Fluent のユニット番号
ディクショナリは，ユーザがポストプロセスに必要とする，全てのエントリを含まなけ
Open∇FOAM-1.7.1
6.3 Fieldview による後処理 U-169
ればなりません．たとえば，我々の例では，圧力 p と速度 U のためのエントリをいれてい
ます．デフォルトエントリのリストは，表 6.1 に記述されています．ユーザは，他のユー
ティリティのように，foamDataToFluent を実行することができます．
Fluent でその結果を見るためには，ケースのディレクトリの ﬂuentInterface サブディレ
クトリに移動して，3 次元のバージョンの Fluent を次のようにして開始します．
fluent 3d
メッシュとデータファイルは，ロードされ，その結果が可視化されます．メッシュは，File
メニューの Read Case を選択することで読むことができます．あるデータタイプを読むた
めには，サポートアイテムを選択するべきです．例えば，k と epsilon の乱流データを読
むには，ユーザは，Define -> Models -> Viscous メニューから k-epsilon を選択する
ことになります．次に，データファイルは，File メニューの Read Data を選択すること
で，読むことができます．
注意すべき点：ユーザは，OpenFOAM 形式への変換に使われたオリジナルの Fluent メッ
シュファイルを，OpenFOAM の解を Fluent フォーマットに変換したものと合わせて使っ
てはなりません．なぜなら，ゾーンの番号付けの順序が保証できないからです．
6.3 Fieldview による後処理
OpenFOAM は，OpenFOAM のケースを Fieldview でポストプロセスするための機能を
提供しています．後処理ユーティリティの foamToFieldview を使って，OpenFOAM のケー
スデータを Fieldview .uns ファイルの形式に変換することができます．
foamToFieldview は，他の OpenFOAM のユーティリティと同じように実行することがで
きます．foamToFieldview は Fieldview というディレクトリをケースディレクトリの中に作
成します．すでに Fieldview ディレクトリが存在していた場合は削除されます．
デフォルトでは，foamToFieldview は全ての time ディレクトリのデータを読み込んで，
<case>_nn.uns のようなファイルのセットに出力します．nn は連番で，最初の time ディ
レクトリの時刻歴データでは 1 から始まり，その後 2，3，4 と続きます．
ユーザーは，オプション -time <time> を使用して，特定の time ディレクトリのデータ
だけを変換することもできます．<time> は，一般的，科学的，または固定の形式です．
Fieldview の一部の機能は，境界条件に関する情報を必要とします．たとえば流線を計算
するとき，境界面についての情報を使用します．foamToFieldview はデフォルトで境界面の
情報を含むように試みます．ユーザは，コマンドオプション -noWall を使って，境界面情
報を含まないように変換することもできます．
Fieldview の uns ファイルの拡張子は.uns です．変換元となった OpenFOAM のケース
名にドット . を含んでいる場合，Fieldview は一連のデータを時系列データと解釈するこ
とができず，単一のデータ（定常データ）とみなすかもしれません．
6.4 EnSight による後処理
foamToEnsight を使って OpenFOAM のデータを EnSight の形式に変換するか，
Open∇FOAM-1.7.1
U-170 第 6 章 後処理
ensight74FoamExec モジュールを使って直接 EnSight から読み込むことによって EnSight
で後処理を行うことができます．
6.4.1 EnSight の形式への変換
foamToEnSightは OpenFOAM のデータを EnSightの形式に変換します．foamToEnSight
は普通のアプリケーションと同様に実行できます．foamToEnsight はケースディレクトリ
内に Ensight というディレクトリを作成します．この際，既存の Ensight ディレクトリは削
除されます．各時刻のディレクトリを読み込み，ケースファイルとデータファイルのまと
まりとして書き込みます．ケースファイルは EnSight_Case という名前でデータファイル
の詳細が含まれます．各データファイルは EnSight_nn.ext という名前で，nn は最初の時間
ディレクトリの時刻を 1 として通し番号が入ります．ext は物理量に応じた拡張子です．た
とえば，T は温度で，mesh はメッシュです．変換が完了すると EnSight で通常の方法で読
み込むことができます．
• EnSight の GUI において，File -> Data (Reader) を選択する．
• ファイルボックス内で適切な EnSight_Case ファイルを強調表示させる．
• Format の選択肢は，EnSight のデフォルトの Case です．
• Case をクリックし，Okay を選択する．
6.4.2 ensight74FoamExec reader モジュール
EnSight ではユーザ定義のモジュールを用いて他の形式のファイルを EnSight に変換する
ことが可能です．OpneFOAM には ensight74FoamExec というモジュールが libuserd-foam
ライブラリにコンパイルされています．EnSight に必要なのはこのライブラリで，次節で
述べるファイルシステムに置かれる必要があります．
6.4.2.1 EnSight の読込モジュールの設定
EnSight リーダの実行には，環境変数が適切である必要があります．$WM_PROJECT_
DIR/etc/apps/ensightFoam 内の bashrc または cshrc ファイルで設定を行います．EnSight
に関する環境変数は表 6.2 の$CEI_や$ENSIGHT7_です．EnSight の通常インストール時の
パス設定では，$CEI_HOME のみ手動で設定すればよいはずです．
環境変数 説明とオプション
$CEI_HOME EnSight がインストールされるパス (例：/usr/local/ensight) はデフォ
ルトでシステムパスに加わる
$CEI_ARCH $CEI_HOME/ensight74/machines のマシンディレクトリ名に対応す
る名前から選択したマシン構造．デフォルト設定ではlinux_2.4 と
sgi_6.5_n32 を含む
$ENSIGHT7_READER EnSight がユーザの定義した libuserd-foam 読込みライブラリを探すパ
ス，デフォルトでは$FOAM_LIBBIN に設定
$ENSIGHT7_INPUT デフォルトでは dummy に設定
表 6.2 EnSight で用いる環境変数の設定
Open∇FOAM-1.7.1
6.5 データのサンプリング U-171
6.4.2.2 読込モジュールの利用
EnSight reader を使う際の主要な問題は，解析ケースを OpenFOAM ではディレクトリ
で定義するのに対し，EnSight では特定のファイルによって定義されている必要があると
いうことです．EnSight はディレクトリ名の選択ができないので，以下の手順で，特にケー
スの詳細を選択する際に注意しながら読込モジュールを使います．
1. EnSight の GUI において，File -> Data (Reader) を選択します．
2. Format メニューから OpenFOAM の選択ができるはずです．できない場合は，環境
変数の設定に問題があります．
3. File Selection ウインドウからケースディレクトリを探し，Directories 欄の /. また
は /.. で終わる，上二つのうち一つを強調表示させ，(Set) Geometry を選択します．
4. パスフィールドには解析ケースが入っています．(Set) Geometry の欄には/が含ま
れるはずです．
5. Okay をクリックすると EnSight がデータを読み込み始めます．
6. データが読込まれると，新しく Data Part Loader ウインドウが現れ，どの部分を読
込むか尋ねられるので，Load all を選択します．
7. Data Part Loader のウインドウが表示されているといくつかの機能が動かないので，
メッシュが EnSight のウインドウに表示されたら閉じます．
6.5 データのサンプリング
OpenFOAM はフィールドデータの任意の位置における値を取得するユーティリティ，
sample を提供しています．グラフ上にプロットするために 1 次元の線上，または等値面画
像を表示するために 2 次元平面上のデータが取得されます．データ取得位置は，ケースの
system ディレクトリにある，sampleDict で指定します．データは良く知られているグラフ
パッケージ，Grace/xmgr，gnuplot，jPlot のような様々な形式で書き出すことができます．
sampleDict ディクショナリは，$FOAM_UTILITIES/postProcessing/sampling/sample の
sample ソースコードディレクトリにあるsampleDict の例をコピーすることで作成できま
す．$FOAM_TUTORIALS/solidDisplacementFoam の plateHole チュートリアルのケースに
も 1D 線型データ取得のための記述例があります．
17
18 interpolationScheme cellPoint;
19
20 setFormat raw;
21
22 sets
23 (
24 leftPatch
25 {
26 type uniform;
27 axis y;
28 start ( 0 0.5 0.25 );
29 end ( 0 2 0.25 );
30 nPoints 100;
31 }
32 );
33
34 surfaces ();
35
Open∇FOAM-1.7.1
U-172 第 6 章 後処理
36 fields ( sigmaxx );
37
38
39 // *************************************************************************
//
キーワード オプション 説明
interpolationScheme cell セル中心の値でセル全体が一定とみなす
cellPoint セルの値から線型重み付け補間
cellPointFace 線型重み付けまたはセル表面から補間
setFormat raw ASCII 生データ
gnuplot gnuplot 形式データ
xmgr Grace/xmgr 形式データ
jplot jPlot 形式データ
surfaceFormat null 出力しない
foamFile 点，面，値のファイル
dx DX スカラまたはベクトル形式
vtk VTK ASCII 形式
raw xyz 座標と値．gnuplot の splot などで使われる
stl ASCII STL．表面のみ，値なし
fields サンプルするフィールドのリスト，たとえば速度 U の場合，
U U の全成分を出力
sets 1 次元の sets サブディクショナリのリスト．表 6.4 を参照
surfaces 2 次元の surfaces サブディクショナリリスト．表 6.5 および表 6.6 を参照
表 6.3 sampleDict におけるキーワード指定
このファイルには，次の入力項目があります．
interpolationScheme データ内挿のスキーム
sets フィールドが線型サンプルされる (1D) 解析領域の中の位置
surfaces フィールドが面型サンプルされる (2D) 解析領域の中の位置
setFormat 線データ出力のフォーマット
surfaceFormat 面データ出力のフォーマット
ﬁelds サンプルされるフィールド
interpolationScheme には，多面体の各セルを四面体に分割し，サンプルされる値が四面
体頂点の値から補間されるcellPointとcellPointFaceオプションがあります．cellPoint
では，四面体の頂点は，多面体のセルの中心と，面の頂点三つからなります．セルの中心
と一致する頂点は，セル中心のフィールド値を継承し，他の頂点はセルの中心の値から内
挿した値をとります．cellPointFace では，四面体頂点の内の一つが，面の中心とも一致
します．面が交差するセルの中心での値による内挿スキームによって，フィールド値を継
承します．
ラインサンプリングのための setFormat エントリは，生データフォーマットと，グラフ
描画パッケージのための gnuplot，Grace/xmgr，jPlot フォーマットがあります．データ
は，ケースディレクトリの sets ディレクトリに書き出されます．そのディレクトリは，一
連の時刻ディレクトリに分割され，データファイルは，その中に格納されます．各々のデー
タファイルは，フィールド名，サンプルセット名，そして出力フォーマットに関係した拡
Open∇FOAM-1.7.1
6.5 データのサンプリング U-173
張子をもつ名前が付けられます．拡張子は，生データでは.xy，Grace/xmgr 用には.agr，
jPlot には.dat となります．gnuplot のフォーマットは，生の形式のデータと，それに加え
てコマンドファイルを含んでいます．このコマンドファイルは，.gplt という拡張子をも
ち，グラフを生成するためのものです．sample が実行されるときは，既存の sets ディレク
トリが削除されるので注意してください．
サーフェスサンプリングのための surfaceFormat エントリは，生データフォーマット
とグラフ描画パッケージのための gnuplot，Grace/xmgr，jPlot フォーマットがあります．
データは，ケースディレクトリの，surfaces ディレクトリに書き出されます．そのディレ
クトリは時間ディレクトリに分割され，データファイルは sets と同様にその中に格納され
ます．
fields リストは，データを取得したいフィールドが記述されます．sample ユーティリ
ティは，次の限定された関数を，ベクトルやテンソルフィールドを修正することができる
ように，解析することができます．例えば，U のためには，
U.component(n) これは，ベクトル（テンソル）の n 番目の要素を書く．n = 0, 1, . . .
mag(U) これは，ベクトル（テンソル）の大きさを書く
sets リストは，サンプルされるべきデータの位置の，サブディクショナリで構成されます．
各サブディクショナリは，そのセットの名前に従って名前が付けられ，表 6.4 にも示すよ
うにデータ取得位置に関する記述がなされます．
例えば，uniform サンプリングは，start と end ポイントで指定した直線上に，均等に
分割した n 点でデータを取得します．全ての sets には，type とグラフ用の縦軸の長さを
指定する axis キーワードを与えます．
必要項目
サンプル型 データ取得位置
name
axis
start
end
nPoints
points
uniform 線上に一様配分 • • • • •
face 指定された線とセル表面の交点 • • • •
midPoint 線・面の交点と交点の中点 • • • •
midPointAndFace 中点および面 • • • •
curve 曲線に沿った指定された点 • • •
cloud 指定された点 • • •
入力項目 説明 オプション
type データ取得の型 上の一覧参照
axis Output of sample location x x 軸
y y 軸
z z 軸
xyz xyz 軸
distance 点 0 からの距離
start データ取得線の始点 e.g. (0.0 0.0 0.0)
end データ取得線の終点 e.g. (0.0 2.0 0.0)
nPoints データ取得点の数 e.g. 200
points データ取得点一覧
表 6.4 sets サブディクショナリにおけるエントリ
Open∇FOAM-1.7.1
U-174 第 6 章 後処理
キーワード 説明 オプション
basePoint 平面上の点 e.g. (0 0 0)
normalVector 平面の法線ベクトル e.g. (1 0 0)
interpolate 補間の有無 true/false
triangulate 三角形で分割するか（オプション） true/false
表 6.5 surfaces サブディクショナリにおける surfaces 用のエントリ
キーワード 説明 オプション
patchName パッチ名 e.g. movingWall
interpolate データ補間の有無 true/false
triangulate 三角形で分割するか（オプション） true/false
表 6.6 surfaces サブディクショナリにおける patch 用のエントリ
surfaces リストは，データ取得位置のサブディクショナリのリストによって構成されま
す．各サブディクショナリは，表面の名前に従った名前が付けられ，type で始まる一連の
記述で構成されます．平面上の点と法線ベクトルで定義され，表 6.5 に示される項目の記
述がなされる plane か，または，既存の境界パッチと一致し，表 6.6 に示される項目の記
述がなされる patch のいずれかです．
6.6 ジョブのモニタと管理
本節では，まず正しく実行された OpenFOAM のジョブについて言及し，3.3 節節で説明
したソルバの基本的な実行についてまで述べます．$WM_PROJECT_DIR/etc/controlDict
ファイルの DebugSwitches の，level デバッグスイッチが 1 または 2（デフォルト）であっ
たなら，ソルバの実行時に方程式の解の状態を標準出力，例えばスクリーンに出力します．
以下では cavity チュートリアルを解く際の出力の冒頭部分を例として挙げています．ここ
から解かれる各々の方程式について，レポート行に，ソルバ名，解かれる変数，その初期
と最終の残差，そして反復回数が書かれていることが読み取れます．
Starting time loop
Time = 0.005
Max Courant Number = 0
BICCG: Solving for Ux, Initial residual = 1, Final residual = 2.96338e-06, No Iterations 8
ICCG: Solving for p, Initial residual = 1, Final residual = 4.9336e-07, No Iterations 35
time step continuity errors : sum local = 3.29376e-09, global = -6.41065e-20, cumulative = -6.41065e-20
ICCG: Solving for p, Initial residual = 0.47484, Final residual = 5.41068e-07, No Iterations
34
time step continuity errors : sum local = 6.60947e-09, global = -6.22619e-19, cumulative = -6.86725e-19
ExecutionTime = 0.14 s
Time = 0.01
Max Courant Number = 0.585722
BICCG: Solving for Ux, Initial residual = 0.148584, Final residual = 7.15711e-06, No Iterations
6
BICCG: Solving for Uy, Initial residual = 0.256618, Final residual = 8.94127e-06, No Iterations
6
ICCG: Solving for p, Initial residual = 0.37146, Final residual = 6.67464e-07, No Iterations
33
time step continuity errors : sum local = 6.34431e-09, global = 1.20603e-19, cumulative = -5.66122e-19
ICCG: Solving for p, Initial residual = 0.271556, Final residual = 3.69316e-07, No Iterations
33
time step continuity errors : sum local = 3.96176e-09, global = 6.9814e-20, cumulative = -4.96308e-19
ExecutionTime = 0.16 s
Time = 0.015
Max Courant Number = 0.758267
BICCG: Solving for Ux, Initial residual = 0.0448679, Final residual = 2.42301e-06, No Iterations
6
BICCG: Solving for Uy, Initial residual = 0.0782042, Final residual = 1.47009e-06, No Iterations
Open∇FOAM-1.7.1
6.6 ジョブのモニタと管理 U-175
7
ICCG: Solving for p, Initial residual = 0.107474, Final residual = 4.8362e-07, No Iterations
32
time step continuity errors : sum local = 3.99028e-09, global = -5.69762e-19, cumulative = -1.06607e-18
ICCG: Solving for p, Initial residual = 0.0806771, Final residual = 9.47171e-07, No Iterations
31
time step continuity errors : sum local = 7.92176e-09, global = 1.07533e-19, cumulative = -9.58537e-19
ExecutionTime = 0.19 s
6.6.1 計算実行用の foamJob スクリプト
残差や反復回数，クーラン数などがレポートデータとしてスクリーンを横切るのをモニ
タすれば十分でしょう．代わりに，レポートをログファイルにリダイレクトすることで計
算速度を向上させることもできます．このために foamJob スクリプトは，便利なオプショ
ンを提供しています．<solver>を指定して実行することで，計算がバックグラウンドで実
行され，出力を log という名前のファイルに記録します．
foamJob <solver>
その他のオプションは，foamJob -help を実行することで見ることができます．log ファ
イルは，UNIX tail コマンドを用いることで見たいときに見ることができます．一般的に
は，follow を意味する-f オプションを一緒に用いることで log ファイルに新しいデータが
記録されるのを捉えることができます．
tail -f log
6.6.2 計算モニタ用の foamLog スクリプト
log ファイルを読むことで，ジョブをモニタするには，限界があります．特に，長い期間
にわたって，傾向を抽出するのは困難です．したがって，foamLog スクリプトによって残
差や反復回数，クーラン数のデータを抽出し，グラフにプロットできるように一連のファ
イルとして出力することができます．スクリプトは次のように実行します．
foamLog <logFile>
ファイルは，ケースディレクトリの logs という名前のサブディレクトリの中に保存されま
す．各々のファイルは，<var>_<subIter>という名前が付けられます．ここで，<var> は，
ログファイルの中で指定される変数の名前で，<subIter> は，そのタイムステップにおけ
る繰り返し回数です．解かれた変数に対して，初期残差はその変数名<var>をとり，最終
残差は<var>FinalRes という名前をとります．デフォルトでは，ファイルは，時刻と抽出
された値という 2 列のフォーマットで表されます．
例として，cavity チュートリアルでは，解が定常状態に収束するのかを見るために，観察
したいのは Ux 方程式の初期残差です．この場合，logs/Ux_0 ファイルからデータを取り出
し，図 6.5 のようにプロットします．ここでは，残差は単調に収束許容値まで減少してい
るが読み取れます．
foamLog は，log ファイルから，うまくそれができるようにファイルを作成します．cavity
チュートリアルの例では次のファイルがあります．
Open∇FOAM-1.7.1
U-176 第 6 章 後処理
• クーラン数，Courant_0
• Ux 方程式の初期と最終の残差である，Ux_0 と UxFinalRes_0，そして反復回数の
UxIters_0 (そしてこれと同等の Uy データ)
• 累積，全体そしてローカルの連続誤差．これは，p 方程式ごとに出す．contCumula-
tive_0，contGlobal_0，contLocal_0，contCumulative_1，contGlobal_1，contLocal_1
• p方程式から，残差と反復回数p_0, pFinalRes_0，pIters_0，p_1，pFinalRes_1，pIters_1
• 実行時間，executionTime
Open∇FOAM-1.7.1
6.6 ジョブのモニタと管理 U-177
ケースデータを見るかどうか
形状・要素を何で色付けするか
カラーマップの範囲・外観
外形，面，格子または点
データの補間手法
画像の不透明度を変える
例えば半透明にするなど
形状変更ツール
図 6.3 Display パネル
主な操作
選択の制御
よく使うフィルタ
元に戻す・やり直し
動画の制御
現在時刻の制御
アクティブな変数の制御・表示
カメラの制御
中心軸の制御
図 6.4 ParaView のツールバー
Open∇FOAM-1.7.1
U-178 第 6 章 後処理
Time [s]
Ux0
0.180.160.140.120.100.080.060.040.020.00
1e+00
1e­01
1e­02
1e­03
1e­04
1e­05
図 6.5 cavity チュートリアルにおける Ux の初期残差
Open∇FOAM-1.7.1
第7章
モデルと物性値
OpenFOAM は特定のクラスの問題に対し，各々に対応した幅広い範囲のソルバを内蔵
しています．ユーザは，特定のケースに対してモデリングを行う際に最初にソルバの選択
ができるように，その方程式とアルゴリズムは一つ一つが異なったものとなっています．
ソルバーは，一般的には 3.5 節に，ケースに対して適切なソルバが見つけやすいように記
述してありますので，この中から選択して下さい．各々のケースを定義するためには，最
終的にはパラメータと物理的特性が必要となりますが，いくつかのモデリングのオプショ
ンはケースの constant ディレクトリの中のディクショナリに登録されている中から実行時
に指定することができます．本章では，一般的なモデルと，実行時に指定される関連した
プロパティについて詳しく説明します．
7.1 熱物理モデル
熱物性モデルは，エネルギ，熱および物理的な特性が関与しています．
thermophysicalProperties ディレクトリは，thermophysical モデルのライブラリを使用す
るすべてのソルバにより読み込まれます．熱物性モデルは，OpenFOAM の中では，その
他のプロパティについても計算される圧力温度 (p–T) システムとして構築されます．これ
は，シミュレーションの中で使用される完全な熱物性モデルを指定する thermoType と呼
ばれる必須のディクショナリ登録です．熱物性のモデリングは，状態の基礎方程式を定義
しているレイヤからスタートし，前のレイヤからプロパティを読込んだモデリングのレイ
ヤを追加します．thermoType の名称は，表 7.1 にリストアップしているモデリングのマル
チレイヤを意味しています．
状態方程式 — equationOfState
icoPolynomial 液体などの非圧縮性流体に対する多項式の状態方程式
perfectGas 理想気体状態方程式
標準熱特性 — thermo
eConstThermo 内部エネルギ e とエントロピ s の評価を備えた，比熱 cp 一定の
モデル
hConstThermo エンタルピ h とエントロピ s の評価を備えた，比熱 cp 一定のモ
デル
hPolynomialThermo h と s を評価する多項式の係数の関数により cp が評価される
janafThermo JANAF の熱物性表の係数から cp が評価され，それにより h，s
が評価される．
派生熱特性 — specieThermo
U-180 第 7 章 モデルと物性値
specieThermo cp，h，そして/または，s から得られた特殊な熱特性
輸送特性 — transport
constTransport 一定の輸送特性
polynomialTransport 多項式に基づく温度依存輸送特性
sutherlandTransport 温度依存する輸送輸送のためのサザーランドの公式
混合特性 — mixture
pureMixture 不活性ガス混合の一般熱モデル計算
homogeneousMixture 正規化燃料質量分率 b に基づく混合気燃焼
inhomogeneousMixture b と総燃料質量分率 ft に基づく混合気燃焼
veryInhomogeneousMixture b と ft と未燃燃料質量分率 fu に基づく混合気燃焼
dieselMixture ft と fu に基づく混合気燃焼
basicMultiComponentMixture 複数の成分に基づく基本的な混合気
multiComponentMixture 複数の成分に基づく派生的な混合気
reactingMixture 熱力学と反応スキームを用いた混合気燃焼
egrMixture 排気ガス再循環の混合気
熱モデル — thermoModel
hPsiThermo エンタルピ h と圧縮率 ψ に基づく一般熱物理モデル計算
hsPsiThermo 顕在エンタルピ hs と圧縮率 ψ に基づく一般熱物理モデル計算
ePsiThermo 内部エネルギ e と圧縮率 ψ に基づく一般熱物理モデル計算
hRhoThermo エンタルピ h に基づく一般熱物理モデル計算
hsRhoThermo∗
顕在エンタルピ hs に基づく一般熱物理モデル計算
hPsiMixtureThermo エンタルピ h と ψ に基づいて混合気燃焼のエンタルピを計算す
る
hsPsiMixtureThermo 顕在エンタルピ hs と ψ に基づいて混合気燃焼のエンタルピを計
算する
hRhoMixtureThermo エンタルピ h と ρ に基づいて混合気燃焼のエンタルピを計算す
る
hsRhoMixtureThermo 顕在エンタルピ hs と ρ に基づいて混合気燃焼のエンタルピを計
算する
hhuMixtureThermo 未燃ガスと混合気燃焼のエンタルピ計算
表 7.1 熱物性モデリングの階層
通常 thermoType のエントリは次の形式をとります．
thermoModel<mixture<transport<specieThermo<thermo<equationOfState>>>>>
次に示すのは thermoType のエントリの例です．
hThermo<pureMixture<constTransport<specieThermo<hConstThermo<perfectGas>>>>>
7.1.1 熱物性データ
基本的な熱物理の性質は，入力データから，各々の種 (species) のために指定される．そ
のデータは，種のために，次に示す形式の複合的なエントリを使って指定される．この複
合的なエントリは，キーワード mixture が使われる．
mixture <specieCoeffs> <thermoCoeffs> <transportCoeffs>
∗
訳注：原文では hRhoThermo となっているが，おそらく誤植．
Open∇FOAM-1.7.1
7.1 熱物理モデル U-181
物性係数 <specieCoeffs> は，表 7.2 にリストされるエントリを含み，その順番は入力で
指定される順番となる．
説明 入力
文字列名 e.g. mixture
この種のモル数 nmoles
分子量 W (kg/kmol)
表 7.2 物性係数
熱物理の係数 <thermoCoeffs> は，見かけ上，他の性質がそれから導出される，比熱容
量を評価することに関連している．現在の thermo モデルは，以下に示す通りである．
hConstThermo 一定の cp と融解熱 Hf を仮定する．これらは，単純に <specieCoeffs>
の後に二つの値 cp と Hf を続けて指定する．
eConstThermo 一定の cv と融解熱 Hf を仮定する．これらは，単純に <specieCoeffs> の
後に二つの値 cv と Hf を続けて指定する．
janafThermo cp を温度の関数として計算する．このとき，一連の係数は，熱力学の JANA
表のものを用いる．順序づけられた係数のリストを，表 7.3 に示した．関数は，温
度の下限 Tl と上限 Th の間で妥当性が確認されている．係数のセットが二つ指定さ
れる．最初のセットは常温 Tc 以上の温度についてのものである．（そして，Th 以下
である．二つめのセットは Tc より低く Tl より高い範囲についてのもの）．cp を温度
の関数として表すと，
cp = R((((a4T + a3)T + a2)T + a1)T + a0) (7.1)
加えて，a5，a6 という積分定数がある．これらは，それぞれ，h と s を評価するた
めに使われ，高温と低温の両方で同じ定数が用いられる．
hPolynomialThermo cp を温度の関数として，任意次数の多項式によって計算する．次の
ケースがその使用例である：
$FOAM_TUTORIALS/lagrangian/porousExplicitSourceReactingParcelFoam/ﬁlter
説明 入力
下限温度 Tl (K)
上限温度 Th (K)
常温 Tc (K)
高温度係数 a0. . . a4
高温度エンタルピ補正 a5
高温度エントロピ補正 a6
低温度係数 a0. . . a4
低温度エンタルピ補正 a5
低温度エントロピ補正 a6
表 7.3 JANAF 熱力学的係数
移動係数 <transportCoeffs> は，動的粘性率，熱伝導度，層流熱伝導度（エンタルピ
方程式のため）を評価するために使われる．現在の transport モデルは，以下に説明する
通りである．
Open∇FOAM-1.7.1
U-182 第 7 章 モデルと物性値
constTransport µ とプラントル数 Pr = cpµ/κ が一定であると仮定する．ここでは，
<thermoCoeffs> の後に µ と Pr の二つの値を続けて指定する．
sutherlandTransport µ を温度 T の関数として計算する．これには，サザーランド係数 As
とサザーランド温度 Ts を用いる．この二つの数は，<thermoCoeffs> の後に続けて
指定する．µ は，次のように計算される．
µ =
As
√
T
1 + Ts/T
(7.2)
polynomialTransport µ と κ を温度 T の関数として，任意次数の多項式から計算する．
次は，fuel という名前の種についてのエントリの例である．これは，sutherlandTransport
と janafThermo を使ってモデルされている．また，エントリの説明のためにコメントが入っ
ている．
fuel // keyword
fuel 1 44.0962 // specie
200 5000 1000 // -- janafThermo --
7.53414 0.0188722 -6.27185e-06 9.14756e-10 -4.78381e-14
-16467.5 -17.8923
0.933554 0.0264246 6.10597e-06 -2.19775e-08 9.51493e-12
-13958.5 19.2017 // -----------------
1.67212e-06 170.672; // sutherlandTransport
次に示すのは，airという名前の種についての，エントリの例である．これは，constTransport
と hConstThermo でモデルされている．エントリの説明のためにコメントが入っている．
mixture // keyword
air 1 28.9 // specie
1000 2.544e+06 // hConstThermo
1.8e-05 0.7; // constTransport
7.2 乱流モデル
乱流のモデリングを含むあらゆるソルバは turbulenceProperties ディクショナリを読み込
みます．このファイルの中では，simulationType キーワードで使用する乱流モデルとし
て次のいずれかを選択します．
laminar 乱流モデルを使用しない
RASModel レイノルズ平均応力 (RAS) モデル
LESModel ラージ・エディ・シミュレーション (LES) モデル
RASModel が選択されているとき，RAS モデリングの選択は，同じく constant ディレク
トリにある RASProperties ファイルで設定します．RAS 乱流モデルは，表 3.9 に示した利
用可能なモデルの長いリストから，RASModel エントリで選択します．同様に，LESModel
が選択された場合，LES モデリングの詳細は LESProperties ディクショナリで記述し，LES
乱流モデルは LESModel エントリで選択します．RASProperties に必要なエントリは，表 7.4
に，また LESProperties ディクショナリについては表 7.5 に示します．
非圧縮性および圧縮性の RAS 乱流モデル，等容変化および非等容変化 LES モデル，そ
してデルタモデルは，表 3.9 に示しています．これらの使用例は$FOAM_TUTORIALS 以
Open∇FOAM-1.7.1
7.2 乱流モデル U-183
RASModel RAS モデルの名前
turbulence 乱流モデルの on/oﬀ スイッチ
printCoeffs シミュレーション開始時にモデル係数をターミナルに出力するスイッチ
<RASModel>Coeffs 各 RASModel における係数のディクショナリ（省略可能）
表 7.4 RASProperties ディクショナリにおけるキーワードエントリ
LESModel LES モデルの名前
delta デルタモデルの名前
<LESModel>Coeffs 各 LES モデルにおける係数のディクショナリ
<delta>Coeffs 各デルタモデルにおける係数ディクショナリ
表 7.5 LESProperties ディクショナリにおけるキーワードエントリ
下に見つかります．
7.2.1 モデル係数
RAS モデルの係数には，それぞれのソースコードの中でデフォルト値が与えられていま
す．もしこのデフォルト値を上書きしたければ，モデル名に Coeffs を加えたキーワード名
（たとえば kEpsilon モデルなら kEpsilonCoeffs）のサブディクショナリを，RASProperties
ファイルに追加することで実現できます．もし RASProperties ファイルで printCoeffs ス
イッチが on になっていれば，計算開始時にモデルが作成されたときに，該当する...Coeffs
ディクショナリの例が標準出力に表示されます．ユーザは，これを RASProperties にコピー
して，必要に応じて数値を変更すればよいでしょう．
7.2.2 壁関数
OpenFOAM では，個別のパッチの境界条件として適用する，様々な壁関数が利用可能
になっています．これにより，異なる壁領域に異なる壁関数モデルを適用することが可能
になります．壁関数モデルの選択は，非圧縮性 RAS においては 0/nut ファイルの νt，圧
縮性 RAS においては 0/mut ファイルの µt，非圧縮性 LES においては 0/nuSgs ファイルの
νsgs，圧縮性 LES においては 0/muSgs ファイルの µsgs によって指定します．たとえば，あ
る 0/nut ファイルは，
17
18 dimensions [0 2 -1 0 0 0 0];
19
20 internalField uniform 0;
21
22 boundaryField
23 {
24 movingWall
25 {
26 type nutWallFunction;
27 value uniform 0;
28 }
29 fixedWalls
30 {
31 type nutWallFunction;
32 value uniform 0;
33 }
34 frontAndBack
35 {
36 type empty;
37 }
Open∇FOAM-1.7.1
U-184 第 7 章 モデルと物性値
38 }
39
40
41 // *************************************************************************
//
本リリースでは様々な壁関数モデルが利用できます．たとえば，nutWallFunction，
nutRoughWallFunction，nutSpalartAllmarasStandardRoughWallFunction，
nutSpalartAllmarasStandardWallFunction，そしてnutSpalartAllmarasWallFunction．
ユーザは，当該ディレクトリから，すべての壁関数モデルのリストを参照できます．
find $FOAM SRC/turbulenceModels -name wallFunctions
それぞれの壁関数境界条件では，E，kappa，そして Cmu というオプションのキーワー
ドエントリで E，κ，そして Cµ のデフォルト値を上書きできます．nut や mut ファイル
のいずれかのパッチで壁関数を選択したならば，epsilon フィールドの対応するパッチでは
epsilonWallFunction を，乱流場 k，q，R の対応するパッチには kqRwallFunction を選
択する必要があります．
Open∇FOAM-1.7.1
索引
記号・数字
# include
C++ 構文 U-76, U-83
/*...*/
C++ 構文 U-83
//
C++ 構文 U-83
OpenFOAM ファイル構文 U-104
<delta>Coeffs
キーワード U-183
<LESModel>Coeffs
キーワード U-183
<RASmodel>Coeffs
キーワード U-183
0
ディレクトリ U-104
0.000000e+00
ディレクトリ U-104
1D
メッシュ U-129
1 次元
メッシュ U-129
2D
メッシュ U-129
2 次元
メッシュ U-129
A
addLayersControls
キーワード U-144
adiabaticFlameT
ユーティリティ U-97
adjustableRunTime
キーワードエントリ U-64, U-111
adjustTimeStep
キーワード U-64
agglomerator
キーワード U-122
algorithms
ツール U-98
alphaContactAngle
境界条件 U-61
anisotropicFilter
モデル U-102
Annotation
ウィンドウパネル U-26, U-165
ansysToFoam
ユーティリティ U-94
APIfunctions
モデル U-101
Apply
ボタン U-163, U-165
applyBoundaryLayer
ユーティリティ U-93
applyWallFunctionBoundaryConditions
ユーティリティ U-93
arc
キーワード U-137
キーワードエントリ U-138
ascii
キーワードエントリ U-111
attachMesh
ユーティリティ U-94
Auto Accept
ボタン U-165
autoMesh
ライブラリ U-99
autoPatch
ユーティリティ U-94
autoReﬁneMesh
ユーティリティ U-95
B
backward
キーワードエントリ U-118
barotropicCompressibilityModels
ライブラリ U-100
basicMultiComponentMixture
モデル U-100, U-180
basicThermophysicalModels
ライブラリ U-100
binary
キーワードエントリ U-111
BirdCarreau
モデル U-102
block
キーワード U-137
blockMesh
実行可能な頂点の番号付け U-139
ユーティリティ U-39, U-93, U-135
blockMeshDict
ディクショナリ U-20, U-22, U-37, U-51,
U-135, U-142
blocks
キーワード U-22, U-31, U-138
boundary
ディクショナリ U-127, U-135
boundaryField
キーワード U-23, U-108
boundaryFoam
U-186 索引
ソルバ U-91
bounded
キーワードエントリ U-116, U-117
boxToCell
キーワード U-62
boxTurb
ユーティリティ U-93
bubbleFoam
ソルバ U-91
buoyantBoussinesqPimpleFoam
ソルバ U-92
buoyantBoussinesqSimpleFoam
ソルバ U-92
buoyantPimpleFoam
ソルバ U-92
buoyantSimpleFoam
ソルバ U-92
buoyantSimpleRadiationFoam
ソルバ U-92
C
C++ 構文
# include U-76, U-83
/*...*/ U-83
// U-83
cacheAgglomeration
キーワード U-122
calculated
境界条件 U-134
cAlpha
キーワード U-66
castellatedMesh
キーワード U-144
castellatedMeshControls
キーワード U-144
castellatedMeshControls
ディクショナリ U-145, U-147
cavitatingFoam
ソルバ U-91
CEI_ARCH
環境変数 U-170
CEI_HOME
環境変数 U-170
cell
キーワードエントリ U-172
cellLimited
キーワードエントリ U-117
cellPoint
キーワードエントリ U-172
cellPointFace
キーワードエントリ U-172
cells
ディクショナリ U-135
cellSet
ユーティリティ U-94
cfdTools
ツール U-99
cfx4ToFoam
ユーティリティ U-94, U-151
changeDictionary
ユーティリティ U-93
channelFoam
ソルバ U-91
Chart Options
ウィンドウ U-36
checkMesh
ユーティリティ U-94, U-152
chemistryModel
モデル U-101
ライブラリ U-101
chemistrySolver
モデル U-101
chemkinToFoam
ユーティリティ U-97
Choose Preset
ボタン U-163
chtMultiRegionFoam
ソルバ U-92
chtMultiRegionSimpleFoam
ソルバ U-92
Chung
ライブラリ U-100
class
キーワード U-105
clockTime
キーワードエントリ U-111
cloud
キーワード U-173
Co
ユーティリティ U-96
coalChemistryFoam
ソルバ U-92
coalCombustion
ライブラリ U-99
coldEngineFoam
ソルバ U-92
collapseEdges
ユーティリティ U-95
Color By
メニュー U-164
Color Legend
ウィンドウ U-29
ウィンドウパネル U-163
Color Scale
ウィンドウパネル U-163
combinePatchFaces
ユーティリティ U-95
compressed
キーワードエントリ U-111
compressibleInterFoam
ソルバ U-91
compressibleLESmodels
ライブラリ U-102
compressibleRASModels
Open∇FOAM-1.7.1
U-187
ライブラリ U-101
constant
ディレクトリ U-103, U-179
constLaminarFlameSpeed
モデル U-100
constTransport
モデル U-100, U-180
containers
ツール U-98
controlDict
ディクショナリ U-24, U-31, U-44, U-53,
U-64, U-103, U-158
conversion
ライブラリ U-99
convertToMeters
キーワード U-137
corrected
キーワードエントリ U-116, U-117
cpuTime
キーワードエントリ U-111
CrankNicholson
キーワードエントリ U-118
createBaﬄes
ユーティリティ U-94
createPatch
ユーティリティ U-94
createTurbulenceFields
ユーティリティ U-96
CrossPowerLaw
モデル U-102
CrossPowerLaw
キーワードエントリ U-62
cubeRootVolDelta
モデル U-102
cubicCorrected
キーワードエントリ U-118
cubicCorrection
キーワードエントリ U-116
Current Time Controls
メニュー U-28, U-163
curve
キーワード U-173
cyclic
境界条件 U-133
cyclic
キーワードエントリ U-133
D
db
ツール U-98
DeardorﬀDiﬀStress
モデル U-102
debug
キーワード U-144
decomposePar
ユーティリティ U-86, U-87, U-97
decomposeParDict
ディクショナリ U-86
decompositionMethods
ライブラリ U-99
defaultFieldValues
キーワード U-62
deformedGeom
ユーティリティ U-94
Delete
ボタン U-163
delta
キーワード U-88, U-183
deltaT
キーワード U-111
diagonal
キーワードエントリ U-121
DIC
キーワードエントリ U-121
DICGaussSeidel
キーワードエントリ U-121
dieselEngineFoam
ソルバ U-92
dieselFoam
ソルバ U-92
dieselMixture
モデル U-100, U-180
dieselSpray
ライブラリ U-99
DILU
キーワードエントリ U-121
dimensionedTypes
ツール U-98
dimensions
キーワード U-23, U-108
dimensionSet
ツール U-98
directionMixed
境界条件 U-134
Display
ウィンドウパネル U-26, U-28, U-162,
U-163
distance
キーワードエントリ U-147, U-173
distributed
キーワード U-88, U-89
divSchemes
キーワード U-113
dnsFoam
ソルバ U-92
doLayers
キーワード U-144
dsmc
ライブラリ U-99
dsmcFieldsCalc
ユーティリティ U-97
dsmcFoam
ソルバ U-92
dsmcInitialise
Open∇FOAM-1.7.1
U-188 索引
ユーティリティ U-93
dx
キーワードエントリ U-172
dynamicFvMesh
ライブラリ U-99
dynamicMesh
ライブラリ U-99
dynMixedSmagorinsky
モデル U-102
dynOneEqEddy
モデル U-102
dynSmagorinsky
モデル U-102
E
eConstThermo
モデル U-100, U-179
edgeGrading
キーワード U-139
edgeMesh
ライブラリ U-99
edges
キーワード U-137
Edit
メニュー U-165
Edit Color Map
ボタン U-163
egrMixture
モデル U-100, U-180
electrostaticFoam
ソルバ U-92
empty
境界条件 U-20, U-129, U-133
empty
キーワードエントリ U-133
Enable Line Series
ボタン U-36
endTime
キーワード U-24, U-111
キーワードエントリ U-110
engine
ライブラリ U-99
engineCompRatio
ユーティリティ U-97
engineFoam
ソルバ U-92
engineSwirl
ユーティリティ U-93
ENSIGHT7_INPUT
環境変数 U-170
ENSIGHT7_READER
環境変数 U-170
ensight74FoamExec
ユーティリティ U-170
ensightFoamReader
ユーティリティ U-95
enstrophy
ユーティリティ U-96
ePsiThermo
モデル U-100, U-180
equilibriumCO
ユーティリティ U-97
equilibriumFlameT
ユーティリティ U-97
errorEstimation
ライブラリ U-99
errorReduction
キーワード U-151
estimateScalarError
ユーティリティ U-98
Euler
キーワードエントリ U-118
execFlowFunctionObjects
ユーティリティ U-97
expandDictionary
ユーティリティ U-98
expansionRatio
キーワード U-150
exponential
モデル U-101
extrude2DMesh
ユーティリティ U-93
extrudeMesh
ユーティリティ U-93
F
face
キーワード U-173
faceAreaPair
キーワードエントリ U-122
faceLimited
キーワードエントリ U-117
faces
ディクショナリ U-127, U-135
faceSet
ユーティリティ U-94
FDIC
キーワードエントリ U-121
featureAngle
キーワード U-150
features
キーワード U-145
ﬁeldFunctionObjects
ライブラリ U-99
fields
キーワード U-172
ﬁelds
ツール U-98, U-99
fieldValues
キーワード U-62
ﬁeldview9Reader
ユーティリティ U-95
ﬁles
ファイル U-77
Open∇FOAM-1.7.1
U-189
finalLayerRatio
キーワード U-150
ﬁnancialFoam
ソルバ U-93
ﬁniteVolume
ライブラリ U-98
ﬁniteVolume
ツール U-99
ﬁreFoam
ソルバ U-92
firstTime
キーワードエントリ U-110
fixed
キーワードエントリ U-111
ﬁxedGradient
境界条件 U-134
ﬁxedValue
境界条件 U-134
ﬂattenMesh
ユーティリティ U-94
ﬂowType
ユーティリティ U-96
ﬂuent3DMeshToFoam
ユーティリティ U-94
ﬂuentInterface
ディレクトリ U-167
ﬂuentMeshToFoam
ユーティリティ U-94, U-150
ﬂuxCorrectedVelocity
境界条件 U-136
fluxRequired
キーワード U-113
FOAM_RUN
環境変数 U-103
foamCalc
ユーティリティ U-34
foamCalcFunctions
ライブラリ U-99
foamCorrectVrt
スクリプト／エイリアス U-156
foamDataToFluent
ユーティリティ U-95, U-167
foamDebugSwitches
ユーティリティ U-98
FoamFile
キーワード U-105
foamFile
キーワードエントリ U-172
foamFormatConvert
ユーティリティ U-98
foamInfoExec
ユーティリティ U-98
foamJob
スクリプト／エイリアス U-175
foamLog
スクリプト／エイリアス U-175
foamMeshToFluent
ユーティリティ U-94, U-167
foamToEnsight
ユーティリティ U-95
foamToEnsightParts
ユーティリティ U-96
foamToFieldview9
ユーティリティ U-96
foamToGMV
ユーティリティ U-96
foamToStarMesh
ユーティリティ U-94
foamToTecplot360
ユーティリティ U-96
foamToVTK
ユーティリティ U-96
foamUpgradeFvSolution
ユーティリティ U-93
forces
ライブラリ U-99
format
キーワード U-105
fourth
キーワードエントリ U-116, U-117
functions
キーワード U-111
fvDOM
ライブラリ U-100
fvMatrices
ツール U-99
fvMesh
ツール U-99
fvMotionSolver
ライブラリ U-99
fvSchemes
ディクショナリ U-54, U-65, U-103,
U-112, U-113
fvSolution
ディクショナリ U-103, U-119
G
g
ファイル U-63
gambitToFoam
ユーティリティ U-94, U-151
GAMG
キーワードエントリ U-55, U-120, U-121
Gamma
キーワードエントリ U-116
Gauss
キーワードエントリ U-117
GaussSeidel
キーワードエントリ U-121
general
モデル U-101
General
ウィンドウパネル U-165
general
Open∇FOAM-1.7.1
U-190 索引
キーワードエントリ U-111
geometry
キーワード U-144
global
ツール U-98
gmshToFoam
ユーティリティ U-94
gnuplot
キーワードエントリ U-111, U-172
gradSchemes
キーワード U-113
graph
ツール U-98
graphFormat
キーワード U-111
GuldersEGRLaminarFlameSpeed
モデル U-100
GuldersLaminarFlameSpeed
モデル U-100
H
hConstThermo
モデル U-100, U-179
Help
メニュー U-164
HerschelBulkley
モデル U-102
hhuMixtureThermo
モデル U-100, U-180
hierarchical
キーワードエントリ U-87, U-88
homogeneousMixture
モデル U-100, U-180
hPolynomialThermo
モデル U-100, U-179
hPsiMixtureThermo
モデル U-100, U-180
hPsiThermo
モデル U-100, U-180
hRhoMixtureThermo
モデル U-100, U-180
hRhoThermo
モデル U-100, U-180
hsPsiMixtureThermo
モデル U-100, U-180
hsPsiThermo
モデル U-100, U-180
hsRhoMixtureThermo
モデル U-100, U-180
hsRhoThermo
モデル U-100, U-180
I
icoErrorEstimate
ユーティリティ U-98
icoFoam
ソルバ U-19, U-23, U-25, U-26, U-91
icoMomentError
ユーティリティ U-98
icoPolynomial
モデル U-100, U-179
ideasToFoam
ユーティリティ U-151
ideasUnvToFoam
ユーティリティ U-94
IFCLookUpTableGen
ユーティリティ U-97
incompressibleLESmodels
ライブラリ U-102
incompressibleRASModels
ライブラリ U-101
incompressibleTransportModels
ライブラリ U-102
Information
ウィンドウパネル U-162
inhomogeneousMixture
モデル U-100, U-180
inletOutlet
境界条件 U-136
inside
キーワードエントリ U-147
insideCells
ユーティリティ U-94
interfaceProperties
モデル U-102
interFoam
ソルバ U-91
interMixingFoam
ソルバ U-91
internalField
キーワード U-23, U-108
interPhaseChangeFoam
ソルバ U-91
interpolation
ツール U-99
interpolations
ツール U-98
interpolationScheme
キーワード U-172
interpolationSchemes
キーワード U-113
J
janafThermo
モデル U-100, U-179
jplot
キーワードエントリ U-111, U-172
K
kEpsilon
モデル U-101
kivaToFoam
ユーティリティ U-94
kOmega
Open∇FOAM-1.7.1
U-191
モデル U-101
kOmegaSST
モデル U-101, U-102
L
lagrangian
ライブラリ U-99
lagrangianIntermediate
ライブラリ U-99
Lambda2
ユーティリティ U-96
LamBremhorstKE
モデル U-101
laminar
モデル U-101
laminar
キーワードエントリ U-44, U-182
laminarFlameSpeedModels
ライブラリ U-100
laplaceFilter
モデル U-102
laplacianFoam
ソルバ U-90
laplacianSchemes
キーワード U-113
latestTime
キーワードエントリ U-40, U-110
LaunderGibsonRSTM
モデル U-101
LaunderSharmaKE
モデル U-101
layers
キーワード U-150
leastSquares
キーワード U-54
キーワードエントリ U-117
LESdeltas
ライブラリ U-102
LESﬁlters
ライブラリ U-101
LESModel
キーワード U-183
キーワードエントリ U-44, U-182
levels
キーワード U-147
libs
キーワード U-85, U-111
LienCubicKE
モデル U-101
LienCubicKELowRe
モデル U-101
LienLeschzinerLowRe
モデル U-101
Lights
ウィンドウパネル U-165
limited
キーワードエントリ U-116, U-117
limitedCubic
キーワードエントリ U-116
limitedLinear
キーワードエントリ U-116
line
キーワードエントリ U-138
Line Style
メニュー U-37
linear
ライブラリ U-100
linear
キーワードエントリ U-116, U-118
linearUpwind
キーワードエントリ U-116, U-118
liquidMixture
ライブラリ U-101
liquids
ライブラリ U-101
location
キーワード U-105
locationInMesh
キーワード U-145, U-147
locDynOneEqEddy
モデル U-102
lowReOneEqEddy
モデル U-102
LRDDiﬀStress
モデル U-102
LRR
モデル U-101
M
Mach
ユーティリティ U-96
Make
ディレクトリ U-77
make
スクリプト／エイリアス U-75
Make/ﬁles
ファイル U-79
manual
キーワードエントリ U-87
manual/
キーワードエントリ U-88
manualCoeffs
キーワード U-88
mapFields
ユーティリティ U-31, U-40, U-45, U-58,
U-93, U-158
Marker Style
メニュー U-37
matrices
ツール U-98
maxAlphaCo
キーワード U-64
maxBoundarySkewness
キーワード U-151
Open∇FOAM-1.7.1
U-192 索引
maxCo
キーワード U-64
maxConcave
キーワード U-151
maxDeltaT
キーワード U-64
maxFaceThicknessRatio
キーワード U-150
maxGlobalCells
キーワード U-145
maxInternalSkewness
キーワード U-151
maxLocalCells
キーワード U-145
maxNonOrtho
キーワード U-151
maxThicknessToMedialRatio
キーワード U-150
mdEquilibrationFoam
ソルバ U-92
mdFoam
ソルバ U-92
mdInitialise
ユーティリティ U-93
mechanicalProperties
ディクショナリ U-53
memory
ツール U-98
mergeLevels
キーワード U-122
mergeMeshes
ユーティリティ U-94
mergeOrSplitBaﬄes
ユーティリティ U-94
mergePatchPairs
キーワード U-137
mergeTolerance
キーワード U-144
meshes
ツール U-98
meshQualityControls
キーワード U-144
meshTools
ライブラリ U-99
method
キーワード U-88
metis
キーワードエントリ U-87, U-88
metisCoeffs
キーワード U-88
MGridGen
キーワードエントリ U-122
MGridGenGAMGAgglomeration
ライブラリ U-99
mhdFoam
ソルバ U-92
midPoint
キーワード U-173
キーワードエントリ U-116
midPointAndFace
キーワード U-173
minArea
キーワード U-151
minDeterminant
キーワード U-151
minFaceWeight
キーワード U-151
minFlatness
キーワード U-151
minMedianAxisAngle
キーワード U-150
minRefinementCells
キーワード U-145
minThickness
キーワード U-150
minTriangleTwist
キーワード U-151
minTwist
キーワード U-151
minVol
キーワード U-151
minVolRatio
キーワード U-151
mirrorMesh
ユーティリティ U-94
mixed
境界条件 U-134
mixedSmagorinsky
モデル U-102
mixtureAdiabaticFlameT
ユーティリティ U-97
mode
キーワード U-147
modifyMesh
ユーティリティ U-95
molecularMeasurements
ライブラリ U-99
molecule
ライブラリ U-99
momentScalarError
ユーティリティ U-98
moveDynamicMesh
ユーティリティ U-94
moveEngineMesh
ユーティリティ U-95
moveMesh
ユーティリティ U-95
movingWallVelocity
境界条件 U-136
MPI
openMPI U-88
mshToFoam
ユーティリティ U-94
multiComponentMixture
Open∇FOAM-1.7.1
U-193
モデル U-100, U-180
multiphaseInterFoam
ソルバ U-91
MUSCL
キーワードエントリ U-116
N
n
キーワード U-88
nAlphaSubCycles
キーワード U-66
nBufferCellsNoExtrude
キーワード U-150
nCellsBetweenLevels
キーワード U-145
neighbour
ディクショナリ U-127
netgenNeutralToFoam
ユーティリティ U-94
Newtonian
モデル U-102
Newtonian
キーワードエントリ U-62
nextWrite
キーワードエントリ U-111
nFaces
キーワード U-128
nFinestSweeps
キーワード U-122
nGrow
キーワード U-150
nLayerIter
キーワード U-150
none
キーワードエントリ U-114, U-121
NonlinearKEShih
モデル U-101
nonNewtonianIcoFoam
ソルバ U-91
normal
モデル U-101
noWriteNow
キーワードエントリ U-110
nPostSweeps
キーワード U-122
nPreSweeps
キーワード U-122
nPreSweepsh
キーワード U-122
nRelaxedIter
キーワード U-150
nRelaxIter
キーワード U-148, U-150
nSmoothNormals
キーワード U-150
nSmoothPatch
キーワード U-148
nSmoothScale
キーワード U-151
nSmoothSurfaceNormals
キーワード U-150
nSmoothThickness
キーワード U-150
nSolveIter
キーワード U-148
NSRDSfunctions
モデル U-101
null
キーワードエントリ U-172
numberOfSubdomains
キーワード U-88
O
object
キーワード U-105
objToVTK
ユーティリティ U-95
ODE
ライブラリ U-99
oneEqEddy
モデル U-102
Opacity
テキストボックス U-164
OpenFOAM
アプリケーション U-73
ケース U-103
ファイルフォーマット U-104
ライブラリ U-73
OpenFOAM
ライブラリ U-98
OpenFOAM ファイル構文
// U-104
openMPI
MPI U-88
メッセージパッシングインターフェイス
U-88
Options
ウィンドウ U-165
options
ファイル U-77
order
キーワード U-88
Orientation Axes
ボタン U-26, U-165
OSspeciﬁc
ライブラリ U-99
outletInlet
境界条件 U-136
outside
キーワードエントリ U-147
owner
ディクショナリ U-127
P
Open∇FOAM-1.7.1
U-194 索引
p
フィールド U-25
p_rghRefCell
キーワード U-124
p_rghRefValue
キーワード U-124
P1
ライブラリ U-100
paraFoam U-26, U-161
partialSlip
境界条件 U-136
particleTracks
ユーティリティ U-97
patch
境界条件 U-132
patch
キーワードエントリ U-133, U-174
patchAverage
ユーティリティ U-97
patches
キーワード U-137, U-139
patchIntegrate
ユーティリティ U-97
patchMap
キーワード U-158
patchSummary
ユーティリティ U-98
PBiCG
キーワードエントリ U-120
PCG
キーワードエントリ U-120
pdf
ライブラリ U-101
pdfPlot
ユーティリティ U-97
PDRFoam
ソルバ U-92
Pe
ユーティリティ U-96
perfectGas
モデル U-100, U-179
pimpleDyMFoam
ソルバ U-91
pimpleFoam
ソルバ U-91
Pipeline Browser
ウィンドウ U-26, U-162
PISO
ディクショナリ U-25
pisoFoam
ソルバ U-19, U-91
Plot Over Line
メニューエントリ U-36
Plot Type
メニュー U-36
plot3dToFoam
ユーティリティ U-94
points
ディクショナリ U-127, U-135
pointSet
ユーティリティ U-95
polyDualMesh
ユーティリティ U-94
polyLine
キーワードエントリ U-138
polyMesh
クラス U-125, U-127
polyMesh
ディレクトリ U-103
polynomialTransport
モデル U-100, U-180
polySpline
キーワードエントリ U-138
porousExplicitSourceReactingParcelFoam
ソルバ U-92
porousSimpleFoam
ソルバ U-91
postCalc
ライブラリ U-99
postChannel
ユーティリティ U-97
potential
ライブラリ U-99
potentialFoam
ソルバ U-90
powerLaw
モデル U-102
pPrime2
ユーティリティ U-96
PrandtlDelta
モデル U-102
preconditioner
キーワード U-120, U-121
pRefCell
キーワード U-25, U-124
pRefValue
キーワード U-25, U-124
pressure
キーワード U-52
pressureDirectedInletVelocity
境界条件 U-136
pressureInletVelocity
境界条件 U-136
pressureTransmissive
境界条件 U-136
primitives
ツール U-98
printCoeffs
キーワード U-44, U-183
probeLocations
ユーティリティ U-97
processor
境界条件 U-133
processor
Open∇FOAM-1.7.1
U-195
キーワードエントリ U-133
processorN
ディレクトリ U-87
processorWeights
キーワード U-87, U-88
Properties
ウィンドウパネル U-27, U-162
ptot
ユーティリティ U-97
pureMixture
モデル U-100, U-180
purgeWrite
キーワード U-111
PV3FoamReader
ライブラリ U-161
PV3FoamReader
ユーティリティ U-95
PVFoamReader
ライブラリ U-161
PVFoamReader
ユーティリティ U-95
Q
Q
ユーティリティ U-96
QUICK
キーワードエントリ U-116, U-118
qZeta
モデル U-101
R
R
ユーティリティ U-96
radiation
ライブラリ U-100
randomProcesses
ライブラリ U-99
RASModel
キーワード U-183
キーワードエントリ U-44, U-182
RASProperties
ディクショナリ U-44
raw
キーワードエントリ U-111, U-172
reactingFoam
ソルバ U-92
reactingMixture
モデル U-100, U-180
reactingParcelFoam
ソルバ U-92
reactionThermophysicalModels
ライブラリ U-100
realizableKE
モデル U-101
reconstructPar
ユーティリティ U-90, U-97
reconstructParMesh
ユーティリティ U-97
redistributeMeshPar
ユーティリティ U-97
refGradient
キーワード U-134
reﬁneHexMesh
ユーティリティ U-95
reﬁnementLevel
ユーティリティ U-95
refinementRegions
キーワード U-145, U-147
reﬁnementRegions
キーワード U-147
refinementSurfaces
キーワード U-145
reﬁneMesh
ユーティリティ U-95
reﬁneWallLayer
ユーティリティ U-95
Region Status
ウィンドウパネル U-26
regions
キーワード U-62
relativeSizes
キーワード U-150
relaxed
キーワード U-151
relTol
キーワード U-55, U-120
removeFaces
ユーティリティ U-95
Render View
ウィンドウパネル U-165
Render View Options
ウィンドウ U-165
renumberMesh
ユーティリティ U-95
Rescale to Data Range
ボタン U-28
Reset
ボタン U-163
resolveFeatureAngle
キーワード U-145, U-146
rhoCentralFoam
ソルバ U-91
rhoPimpleFoam
ソルバ U-91
rhoPisoFoam
ソルバ U-91
rhoPorousMRFPimpleFoam
ソルバ U-91
rhoPorousSimpleFoam
ソルバ U-91
rhoReactingFoam
ソルバ U-92
rhoSimpleFoam
ソルバ U-91
Open∇FOAM-1.7.1
U-196 索引
rmdepall
スクリプト／エイリアス U-80
RNGkEpsilon
モデル U-101
roots
キーワード U-88, U-89
RosinRammler
モデル U-101
rotateMesh
ユーティリティ U-95
run
ディレクトリ U-103
runTime
キーワードエントリ U-32, U-111
runTimeModifiable
キーワード U-111
S
sammToFoam
ユーティリティ U-94
sample
ユーティリティ U-97, U-171
sampling
ライブラリ U-99
Save Animation
メニューエントリ U-167
Save Screeshot
メニューエントリ U-167
scalarTransportFoam
ソルバ U-90
scalePoints
ユーティリティ U-155
scaleSimilarity
モデル U-102
scientific
キーワードエントリ U-111
scotch
キーワードエントリ U-87, U-88
scotchCoeffs
キーワード U-88
Seed
ウィンドウパネル U-166
selectCells
ユーティリティ U-95
Set Solid Color
ボタン U-164
setFields
ユーティリティ U-62, U-93
setFormat
キーワード U-172
sets
キーワード U-172
setSet
ユーティリティ U-95
setsToZones
ユーティリティ U-95
Settings
メニューエントリ U-165
settlingFoam
ソルバ U-91
SFCD
キーワードエントリ U-116, U-118
shallowWaterFoam
ソルバ U-91
Show Color Legend
メニューエントリ U-28
simple
キーワードエントリ U-87, U-88
simpleFilter
モデル U-102
simpleFoam
ソルバ U-91
simpleGrading
キーワード U-139
simpleSpline
キーワードエントリ U-138
simulationType
キーワード U-43, U-64, U-182
SI 単位 U-108
skewLinear
キーワードエントリ U-116, U-118
slip
境界条件 U-136
Smagorinsky
モデル U-102
Smagorinsky2
モデル U-102
smapToFoam
ユーティリティ U-96
smoothDelta
モデル U-102
smoother
キーワード U-122
smoothSolver
キーワードエントリ U-120
snap
キーワード U-144
snapControls
キーワード U-144
snappyHexMesh
ユーティリティ U-93, U-143
基礎メッシュ U-144
セルの除去 U-147
セルの分割 U-145
メッシュ生成プロセス U-143
メッシュレイヤ U-148
面へのスナップ U-148
snappyHexMeshDict
ファイル U-143
snGradSchemes
キーワード U-113
Solid Color
メニューエントリ U-164
solidDisplacementFoam
Open∇FOAM-1.7.1
U-197
ソルバ U-53, U-93
solidEquilibriumDisplacementFoam
ソルバ U-93
solidMixture
ライブラリ U-101
solidParticle
ライブラリ U-99
solids
ライブラリ U-101
solver
キーワード U-55, U-120
solvers
キーワード U-120
sonicDyMFoam
ソルバ U-91
sonicFoam
ソルバ U-91
sonicLiquidFoam
ソルバ U-91
SpalartAllmaras
モデル U-101, U-102
SpalartAllmarasDDES
モデル U-102
SpalartAllmarasIDDES
モデル U-102
specie
ライブラリ U-100
specieThermo
モデル U-100, U-180
spectEddyVisc
モデル U-102
spline
キーワード U-137
splitCells
ユーティリティ U-95
splitMesh
ユーティリティ U-95
splitMeshRegions
ユーティリティ U-95
star4ToFoam
ユーティリティ U-94
startFace
キーワード U-128
startFrom
キーワード U-24, U-110
starToFoam
ユーティリティ U-94, U-151
startTime
キーワード U-24, U-110
キーワードエントリ U-24, U-110
steadyState
キーワードエントリ U-118
Stereolithography (STL) U-143
stitchMesh
ユーティリティ U-95
stl
キーワードエントリ U-172
stopAt
キーワード U-110
strategy
キーワード U-87, U-88
streamFunction
ユーティリティ U-96
stressComponents
ユーティリティ U-96
Style
ウィンドウパネル U-26, U-164
subsetMesh
ユーティリティ U-95
supersonicFreeStream
境界条件 U-136
surfaceFormat
キーワード U-172
surfaceMesh
ツール U-99
surfaceNormalFixedValue
境界条件 U-136
surfaces
キーワード U-172
surfMesh
ライブラリ U-99
sutherlandTransport
モデル U-101, U-180
symmetryPlane
境界条件 U-133
symmetryPlane
キーワードエントリ U-133
system
ディレクトリ U-103
systemCall
ライブラリ U-99
T
tetgenToFoam
ユーティリティ U-94
thermalProperties
ディクショナリ U-53
thermophysical
ライブラリ U-179
thermophysicalFunctions
ライブラリ U-101
thermophysicalProperties
ディクショナリ U-179
thermoType
キーワード U-179
timeFormat
キーワード U-111
timePrecision
キーワード U-111
timeScheme
キーワード U-113
timeStep
キーワードエントリ U-24, U-32, U-111
tolerance
Open∇FOAM-1.7.1
U-198 索引
キーワード U-55, U-120, U-148
Toolbars
メニューエントリ U-164
topoChangeFvMesh
ライブラリ U-99
topoSetSource
キーワード U-62
totalPressure
境界条件 U-136
traction
キーワード U-52
transformPoints
ユーティリティ U-95
transportProperties
ディクショナリ U-23, U-40, U-44
transportProperties
ファイル U-62
triSurface
ライブラリ U-99
turbulence
キーワード U-183
turbulenceProperties
ディクショナリ U-43, U-64, U-182
turbulentInlet
境界条件 U-136
tutorials
ディレクトリ U-19
twoLiquidMixingFoam
ソルバ U-91
twoPhaseEulerFoam
ソルバ U-92
type
キーワード U-129
U
U
フィールド U-25
UMIST
キーワードエントリ U-114
uncompressed
キーワードエントリ U-111
uncorrected
キーワードエントリ U-116, U-117
uncoupledKinematicParcelFoam
ソルバ U-92
uniform
モデル U-101
uniform
キーワード U-173
Update GUI
ボタン U-27, U-163
uprime
ユーティリティ U-96
upwind
キーワードエントリ U-116, U-118
USCS
単位 U-107
Use Parallel Projection
ボタン U-26, U-165
utilityFunctionObjects
ライブラリ U-99
V
value
キーワード U-23, U-134
valueFraction
キーワード U-134
vanLeer
キーワードエントリ U-116
VCR Controls
メニュー U-28, U-163
vector
クラス U-107
version
キーワード U-105
vertices
キーワード U-22, U-137
veryInhomogeneousMixture
モデル U-100, U-180
View
メニュー U-164
View Settings
メニューエントリ U-26, U-165
View Settings...
メニューエントリ U-26
volMesh
ツール U-99
vorticity
ユーティリティ U-96
vtk
キーワードエントリ U-172
vtkFoam
ライブラリ U-161
vtkPV3Foam
ライブラリ U-161
W
wall
境界条件 U-61, U-132
wall
キーワードエントリ U-133
wallBuoyantPressure
境界条件 U-136
wallGradU
ユーティリティ U-96
wallHeatFlux
ユーティリティ U-96
Wallis
ライブラリ U-100
wallShearStress
ユーティリティ U-96
wclean
スクリプト／エイリアス U-80
wdot
Open∇FOAM-1.7.1
U-199
ユーティリティ U-97
wedge
境界条件 U-129, U-133, U-142
wedge
キーワードエントリ U-133
WM_ARCH
環境変数 U-81
WM_ARCH_OPTION
環境変数 U-81
WM_COMPILE_OPTION
環境変数 U-81
WM_COMPILER
環境変数 U-81
WM_COMPILER_BIN
環境変数 U-81
WM_COMPILER_DIR
環境変数 U-81
WM_COMPILER_LIB
環境変数 U-81
WM_DIR
環境変数 U-81
WM_JAVAC_OPTION
環境変数 U-81
WM_LINK_LANGUAGE
環境変数 U-81
WM_MPLIB
環境変数 U-81
WM_OPTIONS
環境変数 U-81
WM_PRECISION_OPTION
環境変数 U-81
WM_PROJECT
環境変数 U-81
WM_PROJECT_DIR
環境変数 U-81
WM_PROJECT_INST_DIR
環境変数 U-81
WM_PROJECT_LANGUAGE
環境変数 U-81
WM_PROJECT_USER_DIR
環境変数 U-81
WM_PROJECT_VERSION
環境変数 U-81
wmake
スクリプト／エイリアス U-75
プラットフォーム U-78
Wrireframe
メニューエントリ U-164
writeCellCentres
ユーティリティ U-97
writeCompression
キーワード U-111
writeControl
キーワード U-24, U-64, U-111
writeFormat
キーワード U-57, U-111
writeInterval
キーワード U-24, U-33, U-111
writeMeshObj
ユーティリティ U-94
writeNow
キーワードエントリ U-110
writePrecision
キーワード U-111
X
x
キーワードエントリ U-173
XiFoam
ソルバ U-92
xmgr
キーワードエントリ U-111, U-172
xyz
キーワードエントリ U-173
Y
y
キーワードエントリ U-173
yPlusLES
ユーティリティ U-96
yPlusRAS
ユーティリティ U-96
Z
z
キーワードエントリ U-173
zeroGradient
境界条件 U-134
zipUpMesh
ユーティリティ U-95
あ
後処理 U-161
paraFoam U-161
穴あき板の応力解析 U-47
アプリケーション U-73
依存 U-76
依存リスト U-76
ウィンドウ
Chart Options U-36
Color Legend U-29
Options U-165
Pipeline Browser U-26, U-162
Render View Options U-165
ウィンドウパネル
Annotation U-26, U-165
Color Legend U-163
Color Scale U-163
Display U-26, U-28, U-162, U-163
General U-165
Information U-162
Lights U-165
Properties U-27, U-162
Region Status U-26
Open∇FOAM-1.7.1
U-200 索引
Render View U-165
Seed U-166
Style U-26, U-164
か
風上差分 U-65
環境変数
CEI_ARCH U-170
CEI_HOME U-170
ENSIGHT7_INPUT U-170
ENSIGHT7_READER U-170
FOAM_RUN U-103
WM_ARCH U-81
WM_ARCH_OPTION U-81
WM_COMPILE_OPTION U-81
WM_COMPILER U-81
WM_COMPILER_BIN U-81
WM_COMPILER_DIR U-81
WM_COMPILER_LIB U-81
WM_DIR U-81
WM_JAVAC_OPTION U-81
WM_LINK_LANGUAGE U-81
WM_MPLIB U-81
WM_OPTIONS U-81
WM_PRECISIO_OPTION U-81
WM_PROJECT U-81
WM_PROJECT_DIR U-81
WM_PROJECT_INST_DIR U-81
WM_PROJECT_LANGUAGE U-81
WM_PROJECT_USER_DIR U-81
WM_PROJECT_VERSION U-81
キーワード
<delta>Coeffs U-183
<LESModel>Coeffs U-183
<RASmodel>Coeffs U-183
addLayersControls U-144
adjustTimeStep U-64
agglomerator U-122
arc U-137
block U-137
blocks U-22, U-31, U-138
boundaryField U-23, U-108
boxToCell U-62
cacheAgglomeration U-122
cAlpha U-66
castellatedMesh U-144
castellatedMeshControls U-144
class U-105
cloud U-173
convertToMeters U-137
curve U-173
debug U-144
defaultFieldValues U-62
delta U-88, U-183
deltaT U-111
dimensions U-23, U-108
distributed U-88, U-89
divSchemes U-113
doLayers U-144
edgeGrading U-139
edges U-137
endTime U-24, U-111
errorReduction U-151
expansionRatio U-150
face U-173
featureAngle U-150
features U-145
fields U-172
fieldValues U-62
finalLayerRatio U-150
fluxRequired U-113
FoamFile U-105
format U-105
functions U-111
geometry U-144
gradSchemes U-113
graphFormat U-111
internalField U-23, U-108
interpolationScheme U-172
interpolationSchemes U-113
laplacianSchemes U-113
layers U-150
leastSquares U-54
LESModel U-183
levels U-147
libs U-85, U-111
location U-105
locationInMesh U-145, U-147
manualCoeffs U-88
maxAlphaCo U-64
maxBoundarySkewness U-151
maxCo U-64
maxConcave U-151
maxDeltaT U-64
maxFaceThicknessRatio U-150
maxGlobalCells U-145
maxInternalSkewness U-151
maxLocalCells U-145
maxNonOrtho U-151
maxThicknessToMedialRatio U-150
mergeLevels U-122
mergePatchPairs U-137
mergeTolerance U-144
meshQualityControls U-144
method U-88
metisCoeffs U-88
midPoint U-173
midPointAndFace U-173
minArea U-151
minDeterminant U-151
minFaceWeight U-151
minFlatness U-151
minMedianAxisAngle U-150
minRefinementCells U-145
Open∇FOAM-1.7.1
U-201
minThickness U-150
minTriangleTwist U-151
minTwist U-151
minVol U-151
minVolRatio U-151
mode U-147
n U-88
nAlphaSubCycles U-66
nBufferCellsNoExtrude U-150
nCellsBetweenLevels U-145
nFaces U-128
nFinestSweeps U-122
nGrow U-150
nLayerIter U-150
nPostSweeps U-122
nPreSweeps U-122
nPreSweepsh U-122
nRelaxedIter U-150
nRelaxIter U-148, U-150
nSmoothNormals U-150
nSmoothPatch U-148
nSmoothScale U-151
nSmoothSurfaceNormals U-150
nSmoothThickness U-150
nSolveIter U-148
numberOfSubdomains U-88
object U-105
order U-88
p_rghRefCell U-124
p_rghRefValue U-124
patches U-137, U-139
patchMap U-158
preconditioner U-120, U-121
pRefCell U-25, U-124
pRefValue U-25, U-124
pressure U-52
printCoeffs U-44, U-183
processorWeights U-87, U-88
purgeWrite U-111
RASModel U-183
refGradient U-134
refinementRegions U-145, U-147
reﬁnementRegions U-147
refinementSurfaces U-145
regions U-62
relativeSizes U-150
relaxed U-151
relTol U-55, U-120
resolveFeatureAngle U-145, U-146
roots U-88, U-89
runTimeModifiable U-111
scotchCoeffs U-88
setFormat U-172
sets U-172
simpleGrading U-139
simulationType U-43, U-64, U-182
smoother U-122
snap U-144
snapControls U-144
snGradSchemes U-113
solver U-55, U-120
solvers U-120
spline U-137
startFace U-128
startFrom U-24, U-110
startTime U-24, U-110
stopAt U-110
strategy U-87, U-88
surfaceFormat U-172
surfaces U-172
thermoType U-179
timeFormat U-111
timePrecision U-111
timeScheme U-113
tolerance U-55, U-120, U-148
topoSetSource U-62
traction U-52
turbulence U-183
type U-129
uniform U-173
value U-23, U-134
valueFraction U-134
version U-105
vertices U-22, U-137
writeCompression U-111
writeControl U-24, U-64, U-111
writeFormat U-57, U-111
writeInterval U-24, U-33, U-111
writePrecision U-111
キーワードエントリ
adjustableRunTime U-64, U-111
arc U-138
ascii U-111
backward U-118
binary U-111
bounded U-116, U-117
cell U-172
cellLimited U-117
cellPoint U-172
cellPointFace U-172
clockTime U-111
compressed U-111
corrected U-116, U-117
cpuTime U-111
CrankNicholson U-118
CrossPowerLaw U-62
cubicCorrected U-118
cubicCorrection U-116
cyclic U-133
diagonal U-121
DIC U-121
DICGaussSeidel U-121
DILU U-121
distance U-147, U-173
Open∇FOAM-1.7.1
U-202 索引
dx U-172
empty U-133
endTime U-110
Euler U-118
faceAreaPair U-122
faceLimited U-117
FDIC U-121
firstTime U-110
fixed U-111
foamFile U-172
fourth U-116, U-117
GAMG U-55, U-120, U-121
Gamma U-116
Gauss U-117
GaussSeidel U-121
general U-111
gnuplot U-111, U-172
hierarchical U-87, U-88
inside U-147
jplot U-111, U-172
laminar U-44, U-182
latestTime U-40, U-110
leastSquares U-117
LESModel U-44, U-182
limited U-116, U-117
limitedCubic U-116
limitedLinear U-116
line U-138
linear U-116, U-118
linearUpwind U-116, U-118
manual U-87
manual/ U-88
metis U-87, U-88
MGridGen U-122
midPoint U-116
MUSCL U-116
Newtonian U-62
nextWrite U-111
none U-114, U-121
noWriteNow U-110
null U-172
outside U-147
patch U-133, U-174
PBiCG U-120
PCG U-120
polyLine U-138
polySpline U-138
processor U-133
QUICK U-116, U-118
RASModel U-44, U-182
raw U-111, U-172
runTime U-32, U-111
scientific U-111
scotch U-87, U-88
SFCD U-116, U-118
simple U-87, U-88
simpleSpline U-138
skewLinear U-116, U-118
smoothSolver U-120
startTime U-24, U-110
steadyState U-118
stl U-172
symmetryPlane U-133
timeStep U-24, U-32, U-111
UMIST U-114
uncompressed U-111
uncorrected U-116, U-117
upwind U-116, U-118
vanLeer U-116
vtk U-172
wall U-133
wedge U-133
writeNow U-110
x U-173
xmgr U-111, U-172
xyz U-173
y U-173
z U-173
キャビティ流れ U-19
境界 U-129
境界条件
alphaContactAngle U-61
calculated U-134
cyclic U-133
directionMixed U-134
empty U-20, U-129, U-133
ﬁxedGradient U-134
ﬁxedValue U-134
ﬂuxCorrectedVelocity U-136
inletOutlet U-136
mixed U-134
movingWallVelocity U-136
outletInlet U-136
partialSlip U-136
patch U-132
pressureDirectedInletVelocity U-136
pressureInletVelocity U-136
pressureTransmissive U-136
processor U-133
slip U-136
supersonicFreeStream U-136
surfaceNormalFixedValue U-136
symmetryPlane U-133
totalPressure U-136
turbulentInlet U-136
wall U-61, U-132
wallBuoyantPressure U-136
wedge U-129, U-133, U-142
zeroGradient U-134
許容値
ソルバの―― U-121
ソルバの相対的な―― U-121
クーラン数 U-24
クラス
Open∇FOAM-1.7.1
U-203
polyMesh U-125, U-127
vector U-107
形状 U-139
ケース U-103
勾配
ガウスの定理 U-54
最小二乗フィット U-54
最小二乗法 U-54
コメント U-83
さ
座標系 U-20
座標軸
右手系 U-135
右手系直交デカルト U-20
時間ステップ U-24
時間の
制御 U-110
軸対称
メッシュ U-129
問題 U-133, U-142
次元
OpenFOAM におけるチェック U-107
次元の単位 U-107
実行
並列 U-86
収束 U-41
自由表面 U-58
スクリプト／エイリアス
foamCorrectVrt U-156
foamJob U-175
foamLog U-175
make U-75
rmdepall U-80
wclean U-80
wmake U-75
制御
時間の―― U-110
セル
拡大率 U-139
相対的な許容値 U-121
ソルバ
boundaryFoam U-91
bubbleFoam U-91
buoyantBoussinesqPimpleFoam U-92
buoyantBoussinesqSimpleFoam U-92
buoyantPimpleFoam U-92
buoyantSimpleFoam U-92
buoyantSimpleRadiationFoam U-92
cavitatingFoam U-91
channelFoam U-91
chtMultiRegionFoam U-92
chtMultiRegionSimpleFoam U-92
coalChemistryFoam U-92
coldEngineFoam U-92
compressibleInterFoam U-91
dieselEngineFoam U-92
dieselFoam U-92
dnsFoam U-92
dsmcFoam U-92
electrostaticFoam U-92
engineFoam U-92
ﬁnancialFoam U-93
ﬁreFoam U-92
icoFoam U-19, U-23, U-25, U-26, U-91
interFoam U-91
interMixingFoam U-91
interPhaseChangeFoam U-91
laplacianFoam U-90
mdEquilibrationFoam U-92
mdFoam U-92
mhdFoam U-92
multiphaseInterFoam U-91
nonNewtonianIcoFoam U-91
PDRFoam U-92
pimpleDyMFoam U-91
pimpleFoam U-91
pisoFoam U-19, U-91
porousExplicitSourceReactingParcelFoam U-
92
porousSimpleFoam U-91
potentialFoam U-90
reactingFoam U-92
reactingParcelFoam U-92
rhoCentralFoam U-91
rhoPimpleFoam U-91
rhoPisoFoam U-91
rhoPorousMRFPimpleFoam U-91
rhoPorousSimpleFoam U-91
rhoReactingFoam U-92
rhoSimpleFoam U-91
scalarTransportFoam U-90
settlingFoam U-91
shallowWaterFoam U-91
simpleFoam U-91
solidDisplacementFoam U-53, U-93
solidEquilibriumDisplacementFoam U-93
sonicDyMFoam U-91
sonicFoam U-91
sonicLiquidFoam U-91
twoLiquidMixingFoam U-91
twoPhaseEulerFoam U-92
uncoupledKinematicParcelFoam U-92
XiFoam U-92
ソルバの許容値 U-121
ソルバの相対的な許容値 U-121
た
代数幾何マルチグリッド U-121
ダムの決壊 U-58
単位
SI U-107
Système International U-107
United States Customary System U-107
Open∇FOAM-1.7.1
U-204 索引
USCS U-107
基本―― U-107
測量―― U-107
チュートリアル
穴あき板の応力解析 U-47
ダムの決壊 U-58
天井駆動のキャビティ流れ U-19
直接数値シミュレーション U-65
ツール
algorithms U-98
cfdTools U-99
containers U-98
db U-98
dimensionedTypes U-98
dimensionSet U-98
ﬁelds U-98, U-99
ﬁniteVolume U-99
fvMatrices U-99
fvMesh U-99
global U-98
graph U-98
interpolation U-99
interpolations U-98
matrices U-98
memory U-98
meshes U-98
primitives U-98
surfaceMesh U-99
volMesh U-99
ディクショナリ
blockMeshDict U-20, U-22, U-37, U-51,
U-135, U-142
boundary U-127, U-135
castellatedMeshControls U-145, U-147
cells U-135
controlDict U-24, U-31, U-44, U-53,
U-64, U-103, U-158
decomposeParDict U-86
faces U-127, U-135
fvSchemes U-54, U-65, U-103, U-112,
U-113
fvSolution U-103, U-119
mechanicalProperties U-53
neighbour U-127
owner U-127
PISO U-25
points U-127, U-135
RASProperties U-44
thermalProperties U-53
thermophysicalProperties U-179
transportProperties U-23, U-40, U-44
turbulenceProperties U-43, U-64, U-182
ディレクトリ
0 U-104
0.000000e+00 U-104
constant U-103, U-179
ﬂuentInterface U-167
Make U-77
polyMesh U-103
processorN U-87
run U-103
system U-103
tutorials U-19
テキストボックス
Opacity U-164
天井駆動のキャビティ流れ U-19
な
流れ
層流 U-19
乱流 U-19
粘性係数
動―― U-23, U-44
は
バックグラウンド
プロセス U-26, U-86
表面メッシュ U-143
ファイル
ﬁles U-77
g U-63
Make/ﬁles U-79
options U-77
snappyHexMeshDict U-143
transportProperties U-62
ファイルフォーマット U-104
フィールド
p U-25
U U-25
分解 U-86
マッピング U-157
フォアグラウンド
プロセス U-26
プロセス
バックグラウンド U-26, U-86
フォアグラウンド U-26
ブロック
拡大率 U-139
分解
フィールドの―― U-86
メッシュの―― U-86
並列
実行 U-86
ボタン
Apply U-163, U-165
Auto Accept U-165
Choose Preset U-163
Delete U-163
Edit Color Map U-163
Enable Line Series U-36
Orientation Axes U-26, U-165
Rescale to Data Range U-28
Reset U-163
Set Solid Color U-164
Open∇FOAM-1.7.1
U-205
Update GUI U-27, U-163
Use Parallel Projection U-26, U-165
ま
マッピング
フィールド U-157
マルチグリッド
代数幾何―― U-121
メッシュ
1D U-129
1 次元 U-129
2D U-129
2 次元 U-129
Stereolithography (STL) U-143
解像度 U-30
記法 U-125
勾配付け U-135, U-139
軸対称 U-129
仕様 U-126
生成 U-135, U-143
妥当性の制約 U-126
表面 U-143
分解 U-86
分割六面体 U-143
メッセージパッシングインターフェイス
openMPI U-88
メニュー
Color By U-164
Current Time Controls U-28, U-163
Edit U-165
Help U-164
Line Style U-37
Marker Style U-37
Plot Type U-36
VCR Controls U-28, U-163
View U-164
メニューエントリ
Plot Over Line U-36
Save Animation U-167
Save Screeshot U-167
Settings U-165
Show Color Legend U-28
Solid Color U-164
Toolbars U-164
View Settings U-26, U-165
View Settings... U-26
Wrireframe U-164
モデル
anisotropicFilter U-102
APIfunctions U-101
basicMultiComponentMixture U-100,
U-180
BirdCarreau U-102
chemistryModel U-101
chemistrySolver U-101
constLaminarFlameSpeed U-100
constTransport U-100, U-180
CrossPowerLaw U-102
cubeRootVolDelta U-102
DeardorﬀDiﬀStress U-102
dieselMixture U-100, U-180
dynMixedSmagorinsky U-102
dynOneEqEddy U-102
dynSmagorinsky U-102
eConstThermo U-100, U-179
egrMixture U-100, U-180
ePsiThermo U-100, U-180
exponential U-101
general U-101
GuldersEGRLaminarFlameSpeed U-100
GuldersLaminarFlameSpeed U-100
hConstThermo U-100, U-179
HerschelBulkley U-102
hhuMixtureThermo U-100, U-180
homogeneousMixture U-100, U-180
hPolynomialThermo U-100, U-179
hPsiMixtureThermo U-100, U-180
hPsiThermo U-100, U-180
hRhoMixtureThermo U-100, U-180
hRhoThermo U-100, U-180
hsPsiMixtureThermo U-100, U-180
hsPsiThermo U-100, U-180
hsRhoMixtureThermo U-100, U-180
hsRhoThermo U-100, U-180
icoPolynomial U-100, U-179
inhomogeneousMixture U-100, U-180
interfaceProperties U-102
janafThermo U-100, U-179
kEpsilon U-101
kOmega U-101
kOmegaSST U-101, U-102
LamBremhorstKE U-101
laminar U-101
laplaceFilter U-102
LaunderGibsonRSTM U-101
LaunderSharmaKE U-101
LienCubicKE U-101
LienCubicKELowRe U-101
LienLeschzinerLowRe U-101
locDynOneEqEddy U-102
lowReOneEqEddy U-102
LRDDiﬀStress U-102
LRR U-101
mixedSmagorinsky U-102
multiComponentMixture U-100, U-180
Newtonian U-102
NonlinearKEShih U-101
normal U-101
NSRDSfunctions U-101
oneEqEddy U-102
perfectGas U-100, U-179
polynomialTransport U-100, U-180
powerLaw U-102
PrandtlDelta U-102
Open∇FOAM-1.7.1
U-206 索引
pureMixture U-100, U-180
qZeta U-101
reactingMixture U-100, U-180
realizableKE U-101
RNGkEpsilon U-101
RosinRammler U-101
scaleSimilarity U-102
simpleFilter U-102
Smagorinsky U-102
Smagorinsky2 U-102
smoothDelta U-102
SpalartAllmaras U-101, U-102
SpalartAllmarasDDES U-102
SpalartAllmarasIDDES U-102
specieThermo U-100, U-180
spectEddyVisc U-102
sutherlandTransport U-101, U-180
uniform U-101
veryInhomogeneousMixture U-100,
U-180
や
ユーティリティ
adiabaticFlameT U-97
ansysToFoam U-94
applyBoundaryLayer U-93
applyWallFunctionBoundaryConditions U-
93
attachMesh U-94
autoPatch U-94
autoReﬁneMesh U-95
blockMesh U-39, U-93, U-135
boxTurb U-93
cellSet U-94
cfx4ToFoam U-94, U-151
changeDictionary U-93
checkMesh U-94, U-152
chemkinToFoam U-97
Co U-96
collapseEdges U-95
combinePatchFaces U-95
createBaﬄes U-94
createPatch U-94
createTurbulenceFields U-96
decomposePar U-86, U-87, U-97
deformedGeom U-94
dsmcFieldsCalc U-97
dsmcInitialise U-93
engineCompRatio U-97
engineSwirl U-93
ensight74FoamExec U-170
ensightFoamReader U-95
enstrophy U-96
equilibriumCO U-97
equilibriumFlameT U-97
estimateScalarError U-98
execFlowFunctionObjects U-97
expandDictionary U-98
extrude2DMesh U-93
extrudeMesh U-93
faceSet U-94
ﬁeldview9Reader U-95
ﬂattenMesh U-94
ﬂowType U-96
ﬂuent3DMeshToFoam U-94
ﬂuentMeshToFoam U-94, U-150
foamCalc U-34
foamDataToFluent U-95, U-167
foamDebugSwitches U-98
foamFormatConvert U-98
foamInfoExec U-98
foamMeshToFluent U-94, U-167
foamToEnsight U-95
foamToEnsightParts U-96
foamToFieldview9 U-96
foamToGMV U-96
foamToStarMesh U-94
foamToTecplot360 U-96
foamToVTK U-96
foamUpgradeFvSolution U-93
gambitToFoam U-94, U-151
gmshToFoam U-94
icoErrorEstimate U-98
icoMomentError U-98
ideasToFoam U-151
ideasUnvToFoam U-94
IFCLookUpTableGen U-97
insideCells U-94
kivaToFoam U-94
Lambda2 U-96
Mach U-96
mapFields U-31, U-40, U-45, U-58,
U-93, U-158
mdInitialise U-93
mergeMeshes U-94
mergeOrSplitBaﬄes U-94
mirrorMesh U-94
mixtureAdiabaticFlameT U-97
modifyMesh U-95
momentScalarError U-98
moveDynamicMesh U-94
moveEngineMesh U-95
moveMesh U-95
mshToFoam U-94
netgenNeutralToFoam U-94
objToVTK U-95
particleTracks U-97
patchAverage U-97
patchIntegrate U-97
patchSummary U-98
pdfPlot U-97
Pe U-96
plot3dToFoam U-94
pointSet U-95
Open∇FOAM-1.7.1
U-207
polyDualMesh U-94
postChannel U-97
pPrime2 U-96
probeLocations U-97
ptot U-97
PV3FoamReader U-95
PVFoamReader U-95
Q U-96
R U-96
reconstructPar U-90, U-97
reconstructParMesh U-97
redistributeMeshPar U-97
reﬁneHexMesh U-95
reﬁnementLevel U-95
reﬁneMesh U-95
reﬁneWallLayer U-95
removeFaces U-95
renumberMesh U-95
rotateMesh U-95
sammToFoam U-94
sample U-97, U-171
scalePoints U-155
selectCells U-95
setFields U-62, U-93
setSet U-95
setsToZones U-95
smapToFoam U-96
snappyHexMesh U-93, U-143
splitCells U-95
splitMesh U-95
splitMeshRegions U-95
star4ToFoam U-94
starToFoam U-94, U-151
stitchMesh U-95
streamFunction U-96
stressComponents U-96
subsetMesh U-95
tetgenToFoam U-94
transformPoints U-95
uprime U-96
vorticity U-96
wallGradU U-96
wallHeatFlux U-96
wallShearStress U-96
wdot U-97
writeCellCentres U-97
writeMeshObj U-94
yPlusLES U-96
yPlusRAS U-96
zipUpMesh U-95
ら
ライブラリ U-73
autoMesh U-99
barotropicCompressibilityModels U-100
basicThermophysicalModels U-100
chemistryModel U-101
Chung U-100
coalCombustion U-99
compressibleLESmodels U-102
compressibleRASModels U-101
conversion U-99
decompositionMethods U-99
dieselSpray U-99
dsmc U-99
dynamicFvMesh U-99
dynamicMesh U-99
edgeMesh U-99
engine U-99
errorEstimation U-99
ﬁeldFunctionObjects U-99
ﬁniteVolume U-98
foamCalcFunctions U-99
forces U-99
fvDOM U-100
fvMotionSolver U-99
incompressibleLESmodels U-102
incompressibleRASModels U-101
incompressibleTransportModels U-102
lagrangian U-99
lagrangianIntermediate U-99
laminarFlameSpeedModels U-100
LESdeltas U-102
LESﬁlters U-101
linear U-100
liquidMixture U-101
liquids U-101
meshTools U-99
MGridGenGAMGAgglomeration U-99
molecularMeasurements U-99
molecule U-99
ODE U-99
OpenFOAM U-98
OSspeciﬁc U-99
P1 U-100
pdf U-101
postCalc U-99
potential U-99
PV3FoamReader U-161
PVFoamReader U-161
radiation U-100
randomProcesses U-99
reactionThermophysicalModels U-100
sampling U-99
solidMixture U-101
solidParticle U-99
solids U-101
specie U-100
surfMesh U-99
systemCall U-99
thermophysical U-179
thermophysicalFunctions U-101
topoChangeFvMesh U-99
triSurface U-99
Open∇FOAM-1.7.1
U-208 索引
utilityFunctionObjects U-99
vtkFoam U-161
vtkPV3Foam U-161
Wallis U-100
乱流
運動エネルギ U-42
消散 U-42
長さスケール U-43
乱流モデル
RAS U-42
リスタート U-40
レイノルズ数 U-19, U-23
Open∇FOAM-1.7.1
