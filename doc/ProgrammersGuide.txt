Open∇FOAM
The Open Source CFD Toolbox
Programmer’s Guide
Version 1.6
24th July 2009
P-2
Copyright c 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 OpenCFD
Limited.
Permission is granted to copy, distribute and/or modify this document under the terms
of the GNU Free Documentation License, Version 1.2 published by the Free Software
Foundation; with no Invariant Sections, no Back-Cover Texts and one Front-Cover Text:
“Available free from openfoam.org.” A copy of the license is included in the section
entitled “GNU Free Documentation License”.
This document is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.
Typeset in LATEX.
Open∇FOAM-1.6
P-3
GNU Free Documentation License
Version 1.2, November 2002
Copyright c 2000,2001,2002 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
Everyone is permitted to copy and distribute verbatim copies of this license document, but
changing it is not allowed.
Preamble
The purpose of this License is to make a manual, textbook, or other functional and useful
document “free” in the sense of freedom: to assure everyone the eﬀective freedom to copy and
redistribute it, with or without modifying it, either commercially or noncommercially. Secon-
darily, this License preserves for the author and publisher a way to get credit for their work,
while not being considered responsible for modiﬁcations made by others.
This License is a kind of “copyleft”, which means that derivative works of the document
must themselves be free in the same sense. It complements the GNU General Public License,
which is a copyleft license designed for free software.
We have designed this License in order to use it for manuals for free software, because free
software needs free documentation: a free program should come with manuals providing the
same freedoms that the software does. But this License is not limited to software manuals; it
can be used for any textual work, regardless of subject matter or whether it is published as a
printed book. We recommend this License principally for works whose purpose is instruction or
reference.
1. APPLICABILITY AND DEFINITIONS
This License applies to any manual or other work, in any medium, that contains a notice placed
by the copyright holder saying it can be distributed under the terms of this License. Such a
notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under
the conditions stated herein. The “Document”, below, refers to any such manual or work.
Any member of the public is a licensee, and is addressed as “you”. You accept the license if
you copy, modify or distribute the work in a way requiring permission under copyright law.
A “Modiﬁed Version” of the Document means any work containing the Document or
a portion of it, either copied verbatim, or with modiﬁcations and/or translated into another
language.
A “Secondary Section” is a named appendix or a front-matter section of the Document
that deals exclusively with the relationship of the publishers or authors of the Document to
the Document’s overall subject (or to related matters) and contains nothing that could fall
directly within that overall subject. (Thus, if the Document is in part a textbook of mathe-
matics, a Secondary Section may not explain any mathematics.) The relationship could be a
matter of historical connection with the subject or with related matters, or of legal, commercial,
philosophical, ethical or political position regarding them.
The “Invariant Sections” are certain Secondary Sections whose titles are designated, as
being those of Invariant Sections, in the notice that says that the Document is released under
this License. If a section does not ﬁt the above deﬁnition of Secondary then it is not allowed to be
designated as Invariant. The Document may contain zero Invariant Sections. If the Document
does not identify any Invariant Sections then there are none.
The “Cover Texts” are certain short passages of text that are listed, as Front-Cover Texts
or Back-Cover Texts, in the notice that says that the Document is released under this License.
A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words.
A “Transparent” copy of the Document means a machine-readable copy, represented in
a format whose speciﬁcation is available to the general public, that is suitable for revising the
Open∇FOAM-1.6
P-4
document straightforwardly with generic text editors or (for images composed of pixels) generic
paint programs or (for drawings) some widely available drawing editor, and that is suitable for
input to text formatters or for automatic translation to a variety of formats suitable for input to
text formatters. A copy made in an otherwise Transparent ﬁle format whose markup, or absence
of markup, has been arranged to thwart or discourage subsequent modiﬁcation by readers is not
Transparent. An image format is not Transparent if used for any substantial amount of text. A
copy that is not “Transparent” is called “Opaque”.
Examples of suitable formats for Transparent copies include plain ASCII without markup,
Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD,
and standard-conforming simple HTML, PostScript or PDF designed for human modiﬁcation.
Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include
proprietary formats that can be read and edited only by proprietary word processors, SGML or
XML for which the DTD and/or processing tools are not generally available, and the machine-
generated HTML, PostScript or PDF produced by some word processors for output purposes
only.
The “Title Page” means, for a printed book, the title page itself, plus such following pages
as are needed to hold, legibly, the material this License requires to appear in the title page. For
works in formats which do not have any title page as such, “Title Page” means the text near
the most prominent appearance of the work’s title, preceding the beginning of the body of the
text.
A section “Entitled XYZ” means a named subunit of the Document whose title either is
precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another
language. (Here XYZ stands for a speciﬁc section name mentioned below, such as “Acknowl-
edgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve the Ti-
tle” of such a section when you modify the Document means that it remains a section “Entitled
XYZ” according to this deﬁnition.
The Document may include Warranty Disclaimers next to the notice which states that this
License applies to the Document. These Warranty Disclaimers are considered to be included by
reference in this License, but only as regards disclaiming warranties: any other implication that
these Warranty Disclaimers may have is void and has no eﬀect on the meaning of this License.
2. VERBATIM COPYING
You may copy and distribute the Document in any medium, either commercially or noncom-
mercially, provided that this License, the copyright notices, and the license notice saying this
License applies to the Document are reproduced in all copies, and that you add no other con-
ditions whatsoever to those of this License. You may not use technical measures to obstruct or
control the reading or further copying of the copies you make or distribute. However, you may
accept compensation in exchange for copies. If you distribute a large enough number of copies
you must also follow the conditions in section 3.
You may also lend copies, under the same conditions stated above, and you may publicly
display copies.
3. COPYING IN QUANTITY
If you publish printed copies (or copies in media that commonly have printed covers) of the
Document, numbering more than 100, and the Document’s license notice requires Cover Texts,
you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts:
Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers
must also clearly and legibly identify you as the publisher of these copies. The front cover must
present the full title with all words of the title equally prominent and visible. You may add
other material on the covers in addition. Copying with changes limited to the covers, as long as
they preserve the title of the Document and satisfy these conditions, can be treated as verbatim
copying in other respects.
Open∇FOAM-1.6
P-5
If the required texts for either cover are too voluminous to ﬁt legibly, you should put the ﬁrst
ones listed (as many as ﬁt reasonably) on the actual cover, and continue the rest onto adjacent
pages.
If you publish or distribute Opaque copies of the Document numbering more than 100, you
must either include a machine-readable Transparent copy along with each Opaque copy, or state
in or with each Opaque copy a computer-network location from which the general network-using
public has access to download using public-standard network protocols a complete Transparent
copy of the Document, free of added material. If you use the latter option, you must take
reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated location until at least one
year after the last time you distribute an Opaque copy (directly or through your agents or
retailers) of that edition to the public.
It is requested, but not required, that you contact the authors of the Document well before
redistributing any large number of copies, to give them a chance to provide you with an updated
version of the Document.
4. MODIFICATIONS
You may copy and distribute a Modiﬁed Version of the Document under the conditions of
sections 2 and 3 above, provided that you release the Modiﬁed Version under precisely this
License, with the Modiﬁed Version ﬁlling the role of the Document, thus licensing distribution
and modiﬁcation of the Modiﬁed Version to whoever possesses a copy of it. In addition, you
must do these things in the Modiﬁed Version:
A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document,
and from those of previous versions (which should, if there were any, be listed in the
History section of the Document). You may use the same title as a previous version if the
original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities responsible for au-
thorship of the modiﬁcations in the Modiﬁed Version, together with at least ﬁve of the
principal authors of the Document (all of its principal authors, if it has fewer than ﬁve),
unless they release you from this requirement.
C. State on the Title page the name of the publisher of the Modiﬁed Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modiﬁcations adjacent to the other copyright
notices.
F. Include, immediately after the copyright notices, a license notice giving the public per-
mission to use the Modiﬁed Version under the terms of this License, in the form shown
in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts
given in the Document’s license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled “History”, Preserve its Title, and add to it an item stating
at least the title, year, new authors, and publisher of the Modiﬁed Version as given on the
Title Page. If there is no section Entitled “History” in the Document, create one stating
the title, year, authors, and publisher of the Document as given on its Title Page, then
add an item describing the Modiﬁed Version as stated in the previous sentence.
Open∇FOAM-1.6
P-6
J. Preserve the network location, if any, given in the Document for public access to a Trans-
parent copy of the Document, and likewise the network locations given in the Document
for previous versions it was based on. These may be placed in the “History” section. You
may omit a network location for a work that was published at least four years before the
Document itself, or if the original publisher of the version it refers to gives permission.
K. For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title of the
section, and preserve in the section all the substance and tone of each of the contributor
acknowledgements and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their
titles. Section numbers or the equivalent are not considered part of the section titles.
M. Delete any section Entitled “Endorsements”. Such a section may not be included in the
Modiﬁed Version.
N. Do not retitle any existing section to be Entitled “Endorsements” or to conﬂict in title
with any Invariant Section.
O. Preserve any Warranty Disclaimers.
If the Modiﬁed Version includes new front-matter sections or appendices that qualify as
Secondary Sections and contain no material copied from the Document, you may at your option
designate some or all of these sections as invariant. To do this, add their titles to the list of
Invariant Sections in the Modiﬁed Version’s license notice. These titles must be distinct from
any other section titles.
You may add a section Entitled “Endorsements”, provided it contains nothing but endorse-
ments of your Modiﬁed Version by various parties–for example, statements of peer review or
that the text has been approved by an organization as the authoritative deﬁnition of a standard.
You may add a passage of up to ﬁve words as a Front-Cover Text, and a passage of up to
25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modiﬁed Version.
Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through
arrangements made by) any one entity. If the Document already includes a cover text for the
same cover, previously added by you or by arrangement made by the same entity you are acting
on behalf of, you may not add another; but you may replace the old one, on explicit permission
from the previous publisher that added the old one.
The author(s) and publisher(s) of the Document do not by this License give permission to
use their names for publicity for or to assert or imply endorsement of any Modiﬁed Version.
5. COMBINING DOCUMENTS
You may combine the Document with other documents released under this License, under
the terms deﬁned in section 4 above for modiﬁed versions, provided that you include in the
combination all of the Invariant Sections of all of the original documents, unmodiﬁed, and list
them all as Invariant Sections of your combined work in its license notice, and that you preserve
all their Warranty Disclaimers.
The combined work need only contain one copy of this License, and multiple identical In-
variant Sections may be replaced with a single copy. If there are multiple Invariant Sections
with the same name but diﬀerent contents, make the title of each such section unique by adding
at the end of it, in parentheses, the name of the original author or publisher of that section if
known, or else a unique number. Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
In the combination, you must combine any sections Entitled “History” in the various origi-
nal documents, forming one section Entitled “History”; likewise combine any sections Entitled
“Acknowledgements”, and any sections Entitled “Dedications”. You must delete all sections
Entitled “Endorsements”.
Open∇FOAM-1.6
P-7
6. COLLECTIONS OF DOCUMENTS
You may make a collection consisting of the Document and other documents released under
this License, and replace the individual copies of this License in the various documents with a
single copy that is included in the collection, provided that you follow the rules of this License
for verbatim copying of each of the documents in all other respects.
You may extract a single document from such a collection, and distribute it individually
under this License, provided you insert a copy of this License into the extracted document, and
follow this License in all other respects regarding verbatim copying of that document.
7. AGGREGATION WITH INDEPENDENT WORKS
A compilation of the Document or its derivatives with other separate and independent docu-
ments or works, in or on a volume of a storage or distribution medium, is called an “aggregate”
if the copyright resulting from the compilation is not used to limit the legal rights of the com-
pilation’s users beyond what the individual works permit. When the Document is included in
an aggregate, this License does not apply to the other works in the aggregate which are not
themselves derivative works of the Document.
If the Cover Text requirement of section 3 is applicable to these copies of the Document,
then if the Document is less than one half of the entire aggregate, the Document’s Cover Texts
may be placed on covers that bracket the Document within the aggregate, or the electronic
equivalent of covers if the Document is in electronic form. Otherwise they must appear on
printed covers that bracket the whole aggregate.
8. TRANSLATION
Translation is considered a kind of modiﬁcation, so you may distribute translations of the
Document under the terms of section 4. Replacing Invariant Sections with translations requires
special permission from their copyright holders, but you may include translations of some or
all Invariant Sections in addition to the original versions of these Invariant Sections. You
may include a translation of this License, and all the license notices in the Document, and any
Warranty Disclaimers, provided that you also include the original English version of this License
and the original versions of those notices and disclaimers. In case of a disagreement between
the translation and the original version of this License or a notice or disclaimer, the original
version will prevail.
If a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “History”,
the requirement (section 4) to Preserve its Title (section 1) will typically require changing the
actual title.
9. TERMINATION
You may not copy, modify, sublicense, or distribute the Document except as expressly provided
for under this License. Any other attempt to copy, modify, sublicense or distribute the Document
is void, and will automatically terminate your rights under this License. However, parties who
have received copies, or rights, from you under this License will not have their licenses terminated
so long as such parties remain in full compliance.
10. FUTURE REVISIONS OF THIS LICENSE
The Free Software Foundation may publish new, revised versions of the GNU Free Documenta-
tion License from time to time. Such new versions will be similar in spirit to the present version,
but may diﬀer in detail to address new problems or concerns. See http://www.gnu.org/copyleft/.
Each version of the License is given a distinguishing version number. If the Document
speciﬁes that a particular numbered version of this License “or any later version” applies to it,
you have the option of following the terms and conditions either of that speciﬁed version or of
Open∇FOAM-1.6
P-8
any later version that has been published (not as a draft) by the Free Software Foundation. If
the Document does not specify a version number of this License, you may choose any version
ever published (not as a draft) by the Free Software Foundation.
Open∇FOAM-1.6
P-9
Trademarks
ANSYS is a registered trademark of ANSYS Inc.
CFX is a registered trademark of Ansys Inc.
CHEMKIN is a registered trademark of Reaction Design Corporation
EnSight is a registered trademark of Computational Engineering International Ltd.
Fieldview is a registered trademark of Intelligent Light
Fluent is a registered trademark of Ansys Inc.
GAMBIT is a registered trademark of Ansys Inc.
Icem-CFD is a registered trademark of Ansys Inc.
I-DEAS is a registered trademark of Structural Dynamics Research Corporation
JAVA is a registered trademark of Sun Microsystems Inc.
Linux is a registered trademark of Linus Torvalds
OpenFOAM is a registered trademark of OpenCFD Ltd
ParaView is a registered trademark of Kitware
STAR-CD is a registered trademark of Computational Dynamics Ltd.
UNIX is a registered trademark of The Open Group
Open∇FOAM-1.6
P-10
Open∇FOAM-1.6
Contents
Copyright Notice P-2
GNU Free Documentation Licence P-3
1. APPLICABILITY AND DEFINITIONS . . . . . . . . . . . . . . . . . P-3
2. VERBATIM COPYING . . . . . . . . . . . . . . . . . . . . . . . . . P-4
3. COPYING IN QUANTITY . . . . . . . . . . . . . . . . . . . . . . . . P-4
4. MODIFICATIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-5
5. COMBINING DOCUMENTS . . . . . . . . . . . . . . . . . . . . . . P-6
6. COLLECTIONS OF DOCUMENTS . . . . . . . . . . . . . . . . . . . P-7
7. AGGREGATION WITH INDEPENDENT WORKS . . . . . . . . . . P-7
8. TRANSLATION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-7
9. TERMINATION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-7
10. FUTURE REVISIONS OF THIS LICENSE . . . . . . . . . . . . . . P-7
Trademarks P-9
Contents P-11
1 Tensor mathematics P-15
1.1 Coordinate system . . . . . . . . . . . . . . . . . . . . . . . . . . . P-15
1.2 Tensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-15
1.2.1 Tensor notation . . . . . . . . . . . . . . . . . . . . . . . . . P-17
1.3 Algebraic tensor operations . . . . . . . . . . . . . . . . . . . . . . P-17
1.3.1 The inner product . . . . . . . . . . . . . . . . . . . . . . . P-18
1.3.2 The double inner product of two tensors . . . . . . . . . . . P-19
1.3.3 The triple inner product of two third rank tensors . . . . . . P-19
1.3.4 The outer product . . . . . . . . . . . . . . . . . . . . . . . P-19
1.3.5 The cross product of two vectors . . . . . . . . . . . . . . . P-19
1.3.6 Other general tensor operations . . . . . . . . . . . . . . . . P-20
1.3.7 Geometric transformation and the identity tensor . . . . . . P-20
1.3.8 Useful tensor identities . . . . . . . . . . . . . . . . . . . . . P-21
1.3.9 Operations exclusive to tensors of rank 2 . . . . . . . . . . . P-21
1.3.10 Operations exclusive to scalars . . . . . . . . . . . . . . . . . P-22
1.4 OpenFOAM tensor classes . . . . . . . . . . . . . . . . . . . . . . . P-23
1.4.1 Algebraic tensor operations in OpenFOAM . . . . . . . . . . P-23
1.5 Dimensional units . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-25
2 Discretisation procedures P-27
2.1 Diﬀerential operators . . . . . . . . . . . . . . . . . . . . . . . . . . P-27
2.1.1 Gradient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-27
2.1.2 Divergence . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-28
P-12 Contents
2.1.3 Curl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-28
2.1.4 Laplacian . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-28
2.1.5 Temporal derivative . . . . . . . . . . . . . . . . . . . . . . . P-28
2.2 Overview of discretisation . . . . . . . . . . . . . . . . . . . . . . . P-29
2.2.1 OpenFOAM lists and ﬁelds . . . . . . . . . . . . . . . . . . P-29
2.3 Discretisation of the solution domain . . . . . . . . . . . . . . . . . P-29
2.3.1 Deﬁning a mesh in OpenFOAM . . . . . . . . . . . . . . . . P-31
2.3.2 Deﬁning a geometricField in OpenFOAM . . . . . . . . . . . P-32
2.4 Equation discretisation . . . . . . . . . . . . . . . . . . . . . . . . . P-33
2.4.1 The Laplacian term . . . . . . . . . . . . . . . . . . . . . . . P-38
2.4.2 The convection term . . . . . . . . . . . . . . . . . . . . . . P-38
2.4.3 First time derivative . . . . . . . . . . . . . . . . . . . . . . P-39
2.4.4 Second time derivative . . . . . . . . . . . . . . . . . . . . . P-39
2.4.5 Divergence . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-39
2.4.6 Gradient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-40
2.4.7 Grad-grad squared . . . . . . . . . . . . . . . . . . . . . . . P-41
2.4.8 Curl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-41
2.4.9 Source terms . . . . . . . . . . . . . . . . . . . . . . . . . . P-41
2.4.10 Other explicit discretisation schemes . . . . . . . . . . . . . P-41
2.5 Temporal discretisation . . . . . . . . . . . . . . . . . . . . . . . . . P-42
2.5.1 Treatment of temporal discretisation in OpenFOAM . . . . P-43
2.6 Boundary Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . P-43
2.6.1 Physical boundary conditions . . . . . . . . . . . . . . . . . P-44
3 Examples of the use of OpenFOAM P-45
3.1 Flow around a cylinder . . . . . . . . . . . . . . . . . . . . . . . . . P-45
3.1.1 Problem speciﬁcation . . . . . . . . . . . . . . . . . . . . . . P-46
3.1.2 Note on potentialFoam . . . . . . . . . . . . . . . . . . . . . P-47
3.1.3 Mesh generation . . . . . . . . . . . . . . . . . . . . . . . . P-47
3.1.4 Boundary conditions and initial ﬁelds . . . . . . . . . . . . . P-49
3.1.5 Running the case . . . . . . . . . . . . . . . . . . . . . . . . P-49
3.1.6 Generating the analytical solution . . . . . . . . . . . . . . . P-50
3.1.7 Exercise . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-53
3.2 Steady turbulent ﬂow over a backward-facing step . . . . . . . . . . P-53
3.2.1 Problem speciﬁcation . . . . . . . . . . . . . . . . . . . . . . P-54
3.2.2 Mesh generation . . . . . . . . . . . . . . . . . . . . . . . . P-55
3.2.3 Boundary conditions and initial ﬁelds . . . . . . . . . . . . . P-57
3.2.4 Case control . . . . . . . . . . . . . . . . . . . . . . . . . . . P-58
3.2.5 Running the case and post-processing . . . . . . . . . . . . . P-58
3.3 Supersonic ﬂow over a forward-facing step . . . . . . . . . . . . . . P-58
3.3.1 Problem speciﬁcation . . . . . . . . . . . . . . . . . . . . . . P-59
3.3.2 Mesh generation . . . . . . . . . . . . . . . . . . . . . . . . P-60
3.3.3 Running the case . . . . . . . . . . . . . . . . . . . . . . . . P-62
3.3.4 Exercise . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P-62
3.4 Decompression of a tank internally pressurised with water . . . . . P-62
3.4.1 Problem speciﬁcation . . . . . . . . . . . . . . . . . . . . . . P-62
3.4.2 Mesh Generation . . . . . . . . . . . . . . . . . . . . . . . . P-64
3.4.3 Preparing the Run . . . . . . . . . . . . . . . . . . . . . . . P-65
3.4.4 Running the case . . . . . . . . . . . . . . . . . . . . . . . . P-66
3.4.5 Improving the solution by reﬁning the mesh . . . . . . . . . P-67
3.5 Magnetohydrodynamic ﬂow of a liquid . . . . . . . . . . . . . . . . P-67
Open∇FOAM-1.6
Contents P-13
3.5.1 Problem speciﬁcation . . . . . . . . . . . . . . . . . . . . . . P-67
3.5.2 Mesh generation . . . . . . . . . . . . . . . . . . . . . . . . P-69
3.5.3 Running the case . . . . . . . . . . . . . . . . . . . . . . . . P-70
Index P-73
Open∇FOAM-1.6
P-14 Contents
Open∇FOAM-1.6
Chapter 1
Tensor mathematics
This Chapter describes tensors and their algebraic operations and how they are repre-
sented in mathematical text in this book. It then explains how tensors and tensor algebra
are programmed in OpenFOAM.
1.1 Coordinate system
OpenFOAM is primarily designed to solve problems in continuum mechanics, i.e. the
branch of mechanics concerned with the stresses in solids, liquids and gases and the
deformation or ﬂow of these materials. OpenFOAM is therefore based in 3 dimensional
space and time and deals with physical entities described by tensors. The coordinate
system used by OpenFOAM is the right-handed rectangular Cartesian axes as shown in
Figure 1.1. This system of axes is constructed by deﬁning an origin O from which three
lines are drawn at right angles to each other, termed the Ox, Oy, Oz axes. A right-handed
set of axes is deﬁned such that to an observer looking down the Oz axis (with O nearest
them), the arc from a point on the Ox axis to a point on the Oy axis is in a clockwise
sense.
y
z
x
Figure 1.1: Right handed axes
1.2 Tensors
The term tensor describes an entity that belongs to a particular space and obeys certain
mathematical rules. Brieﬂy, tensors are represented by a set of component values relating
to a set of unit base vectors; in OpenFOAM the unit base vectors ix, iy and iz are
P-16 Tensor mathematics
aligned with the right-handed rectangular Cartesian axes x, y and z respectively. The
base vectors are therefore orthogonal, i.e. at right-angles to one another. Every tensor
has the following attributes:
Dimension d of the particular space to which they belong, i.e. d = 3 in OpenFOAM;
Rank An integer r ≥ 0, such that the number of component values = dr
.
While OpenFOAM 1.x is set to 3 dimensions, it oﬀers tensors of ranks 0 to 3 as
standard while being written in such a way to allow this basic set of ranks to be extended
indeﬁnitely. Tensors of rank 0 and 1, better known as scalars and vectors, should be
familiar to readers; tensors of rank 2 and 3 may not be so familiar. For completeness all
ranks of tensor oﬀered as standard in OpenFOAM 1.x are reviewed below.
Rank 0 ‘scalar’ Any property which can be represented by a single real number, de-
noted by characters in italics, e.g. mass m, volume V , pressure p and viscosity
µ.
Rank 1 ‘vector’ An entity which can be represented physically by both magnitude and
direction. In component form, the vector a = (a1, a2, a3) relates to a set of Cartesian
axes x, y, z respectively. The index notation presents the same vector as ai, i =
1, 2, 3, although the list of indices i = 1, 2, 3 will be omitted in this book, as it is
intuitive since we are always dealing with 3 dimensions.
Rank 2 ‘tensor’ or second rank tensor, T has 9 components which can be expressed in
array notation as:
T = Tij =


T11 T12 T13
T21 T22 T23
T31 T32 T33

 (1.1)
The components Tij are now represented using 2 indices since r = 2 and the list
of indices i, j = 1, 2, 3 is omitted as before. The components for which i = j are
referred to as the diagonal components, and those for which i = j are referred to
as the oﬀ-diagonal components. The transpose of T is produced by exchanging
components across the diagonal such that
TT
= Tji =


T11 T21 T31
T12 T22 T32
T13 T23 T33

 (1.2)
Note: a rank 2 tensor is often colloquially termed ‘tensor’ since the occurrence of
higher order tensors is fairly rare.
Symmetric rank 2 The term ‘symmetric’ refers to components being symmetric about
the diagonal, i.e. Tij = Tji. In this case, there are only 6 independent components
since T12 = T21, T13 = T31 and T23 = T32. OpenFOAM distinguishes between
symmetric and non-symmetric tensors to save memory by storing 6 components
rather than 9 if the tensor is symmetric. Most tensors encountered in continuum
mechanics are symmetric.
Rank 3 has 27 components and is represented in index notation as Pijk which is too long
to represent in array notation as in Equation 1.1.
Symmetric rank 3 Symmetry of a rank 3 tensor is deﬁned in OpenFOAM to mean
that Pijk = Pikj = Pjik = Pjki = Pkij = Pkji and therefore has 10 independent
components. More speciﬁcally, it is formed by the outer product of 3 identical
vectors, where the outer product operation is described in Section 1.3.4.
Open∇FOAM-1.6
1.3 Algebraic tensor operations P-17
1.2.1 Tensor notation
This is a book on computational continuum mechanics that deals with problems involving
complex PDEs in 3 spatial dimensions and in time. It is vital from the beginning to adopt
a notation for the equations which is compact yet unambiguous. To make the equations
easy to follow, we must use a notation that encapsulates the idea of a tensor as an entity in
the own right, rather than a list of scalar components. Additionally, any tensor operation
should be perceived as an operation on the entire tensor entity rather than a series of
operations on its components.
Consequently, in this book the tensor notation is preferred in which any tensor of
rank 1 and above, i.e. all tensors other than scalars, are represented by letters in bold
face, e.g. a. This actively promotes the concept of a tensor as a entity in its own right
since it is denoted by a single symbol, and it is also extremely compact. The potential
drawback is that the rank of a bold face symbol is not immediately apparent, although it
is clearly not zero. However, in practice this presents no real problem since we are aware
of the property each symbol represents and therefore intuitively know its rank, e.g. we
know velocity U is a tensor of rank 1.
A further, more fundamental idea regarding the choice of notation is that the mathe-
matical representation of a tensor should not change depending on our coordinate system,
i.e. the vector ais the same vector irrespective of where we view it from. The tensor no-
tation supports this concept as it implies nothing about the coordinate system. However,
other notations, e.g. ai, expose the individual components of the tensor which naturally
implies the choice of coordinate system. The unsatisfactory consequence of this is that
the tensor is then represented by a set of values which are not unique — they depend on
the coordinate system.
That said, the index notation, introduced in Section 1.2, is adopted from time to
time in this book mainly to expand tensor operations into the constituent components.
When using the index notation, we adopt the summation convention which states that
whenever the same letter subscript occurs twice in a term, the that subscript is to be
given all values, i.e. 1, 2, 3, and the results added together, e.g.
aibi =
3
i=1
aibi = a1b1 + a2b2 + a3b3 (1.3)
In the remainder of the book the symbol is omitted since the repeated subscript
indicates the summation.
1.3 Algebraic tensor operations
This section describes all the algebraic operations for tensors that are available in Open-
FOAM. Let us ﬁrst review the most simple tensor operations: addition, subtraction,
and scalar multiplication and division. Addition and subtraction are both commutative
and associative and are only valid between tensors of the same rank. The operations
are performed by addition/subtraction of respective components of the tensors, e.g. the
subtraction of two vectors a and b is
a − b = ai − bi = (a1 − b1, a2 − b2, a3 − b3) (1.4)
Multiplication of any tensor a by a scalar s is also commutative and associative and is
performed by multiplying all the tensor components by the scalar. For example,
sa = sai = (sa1, sa2, sa3) (1.5)
Open∇FOAM-1.6
P-18 Tensor mathematics
Division between a tensor a and a scalar is only relevant when the scalar is the second
argument of the operation, i.e.
a/s = ai/s = (a1/s, a2/s, a3/s) (1.6)
Following these operations are a set of more complex products between tensors of rank 1
and above, described in the following Sections.
1.3.1 The inner product
The inner product operates on any two tensors of rank r1 and r2 such that the rank of the
result r = r1 + r2 − 2. Inner product operations with tensors up to rank 3 are described
below:
• The inner product of two vectors a and b is commutative and produces a scalar
s = a • b where
s = aibi = a1b1 + a2b2 + a3b3 (1.7)
• The inner product of a tensor T and vector a produces a vector b = T • a, repre-
sented below as a column array for convenience
bi = Tijaj =


T11a1 + T12a2 + T13a3
T21a1 + T22a2 + T23a3
T31a1 + T32a2 + T33a3

 (1.8)
It is non-commutative if T is non-symmetric such that b = a • T = TT • a is
bi = ajTji =


a1T11 + a2T21 + a3T31
a1T12 + a2T22 + a3T32
a1T13 + a2T23 + a3T33

 (1.9)
• The inner product of two tensors T and S produces a tensor P = T • S whose
components are evaluated as:
Pij = TikSkj (1.10)
It is non-commutative such that T • S = ST • TT T
• The inner product of a vector a and third rank tensor P produces a second rank
tensor T = a • P whose components are
Tij = akPkij (1.11)
Again this is non-commutative so that T = P • a is
Tij = Pijkak (1.12)
• The inner product of a second rank tensor T and third rank tensor P produces a
third rank tensor Q = T • P whose components are
Qijk = TilPljk (1.13)
Again this is non-commutative so that Q = P • T is
Qijk = PijlTlk (1.14)
Open∇FOAM-1.6
1.3 Algebraic tensor operations P-19
1.3.2 The double inner product of two tensors
The double inner product of two second-rank tensors T and S produces a scalar s = T •
• S
which can be evaluated as the sum of the 9 products of the tensor components
s = TijSij = T11S11 + T12S12 + T13S13 +
T21S21 + T22S22 + T23S23 +
T31S31 + T32S32 + T33S33
(1.15)
The double inner product between a second rank tensor T and third rank tensor P
produces a vector a = T •
• P with components
ai = TjkPjki (1.16)
This is non-commutative so that a = P •
• T is
ai = PijkTjk (1.17)
1.3.3 The triple inner product of two third rank tensors
The triple inner product of two third rank tensors P and Q produces a scalar s = P 3
• Q
which can be evaluated as the sum of the 27 products of the tensor components
s = PijkQijk (1.18)
1.3.4 The outer product
The outer product operates between vectors and tensors as follows:
• The outer product of two vectors a and b is non-commutative and produces a tensor
T = ab = (ba)T
whose components are evaluated as:
Tij = aibj =


a1b1 a1b2 a1b3
a2b1 a2b2 a2b3
a3b1 a3b2 a3b3

 (1.19)
• An outer product of a vector a and second rank tensor T produces a third rank
tensor P = aT whose components are
Pijk = aiTjk (1.20)
This is non-commutative so that P = T a produces
Pijk = Tijak (1.21)
1.3.5 The cross product of two vectors
The cross product operation is exclusive to vectors only. For two vectors a with b, it
produces a vector c = a × b whose components are
ci = eijkajbk = (a2b3 − a3b2, a3b1 − a1b3, a1b2 − a2b1) (1.22)
where the permutation symbol is deﬁned by
eijk =



0 when any two indices are equal
+1 when i,j,k are an even permutation of 1,2,3
−1 when i,j,k are an odd permutation of 1,2,3
(1.23)
in which the even permutations are 123, 231 and 312 and the odd permutations are 132,
213 and 321.
Open∇FOAM-1.6
P-20 Tensor mathematics
1.3.6 Other general tensor operations
Some less common tensor operations and terminology used by OpenFOAM are described
below.
Square of a tensor is deﬁned as the outer product of the tensor with itself, e.g. for a
vector a, the square a2
= aa.
nth power of a tensor is evaluated by n outer products of the tensor, e.g. for a vector
a, the 3rd power a3
= aaa.
Magnitude squared of a tensor is the rth inner product of the tensor of rank r with
itself, to produce a scalar. For example, for a second rank tensor T, |T|2
= T •
• T.
Magnitude is the square root of the magnitude squared, e.g. for a tensor T, |T| =√
T •
• T. Vectors of unit magnitude are referred to as unit vectors.
Component maximum is the component of the tensor with greatest value, inclusive
of sign, i.e. not the largest magnitude.
Component minimum is the component of the tensor with smallest value.
Component average is the mean of all components of a tensor.
Scale As the name suggests, the scale function is a tool for scaling the components of
one tensor by the components of another tensor of the same rank. It is evaluated
as the product of corresponding components of 2 tensors, e.g., scaling vector a by
vector b would produce vector c whose components are
ci = scale(a, b) = (a1b1, a2b2, a3b3) (1.24)
1.3.7 Geometric transformation and the identity tensor
A second rank tensor T is strictly deﬁned as a linear vector function, i.e. it is a function
which associates an argument vector a to another vector b by the inner product b = T • a.
The components of T can be chosen to perform a speciﬁc geometric transformation of
a tensor from the x, y, z coordinate system to a new coordinate system x∗
, y∗
, z∗
; T is
then referred to as the transformation tensor. While a scalar remains unchanged under
a transformation, the vector a is transformed to a∗
by
a∗
= T • a (1.25)
A second rank tensor S is transformed to S∗
according to
S∗
= T • S • TT
(1.26)
The identity tensor I is deﬁned by the requirement that it transforms another tensor
onto itself. For all vectors a
a = I • a (1.27)
and therefore
I = δij =


1 0 0
0 1 0
0 0 1

 (1.28)
where δij is known as the Kronecker delta symbol.
Open∇FOAM-1.6
1.3 Algebraic tensor operations P-21
1.3.8 Useful tensor identities
Several identities are listed below which can be veriﬁed by under the assumption that all
the relevant derivatives exist and are continuous. The identities are expressed for scalar
s and vector a.
∇ • (∇ × a) ≡ 0
∇ × (∇s) ≡ 0
∇ • (sa) ≡ s∇ • a + a • ∇s
∇ × (sa) ≡ s∇ × a + ∇s × a
∇(a • b) ≡ a × (∇ × b) + b × (∇ × a) + (a • ∇)b + (b • ∇)a
∇ • (a × b) ≡ b • (∇ × a) − a • (∇ × b)
∇ × (a × b) ≡ a(∇ • b) − b(∇ • a) + (b • ∇)a − (a • ∇)b
∇ × (∇ × a) ≡ ∇(∇ • a) − ∇2
a
(∇ × a) × a ≡ a • (∇a) − ∇(a • a)
(1.29)
It is sometimes useful to know the e−δ identity to help to manipulate equations in index
notation:
eijkeirs = δjrδks − δjsδkr (1.30)
1.3.9 Operations exclusive to tensors of rank 2
There are several operations that manipulate the components of tensors of rank 2 that
are listed below:
Transpose of a tensor T = Tij is TT
= Tji as described in Equation 1.2.
Symmetric and skew (antisymmetric) tensors As discussed in section 1.2, a tensor
is said to be symmetric if its components are symmetric about the diagonal, i.e.
T = TT
. A skew or antisymmetric tensor has T = −TT
which intuitively implies
that T11 = T22 = T33 = 0. Every second order tensor can be decomposed into
symmetric and skew parts by
T =
1
2
(T + TT
)
symmetric
+
1
2
(T − TT
)
skew
= symm T + skew T (1.31)
Trace The trace of a tensor T is a scalar, evaluated by summing the diagonal components
tr T = T11 + T22 + T33 (1.32)
Diagonal returns a vector whose components are the diagonal components of the second
rank tensor T
diag T = (T11, T22, T33) (1.33)
Deviatoric and hydrostatic tensors Every second rank tensor T can be decomposed
into a deviatoric component, for which tr T = 0 and a hydrostatic component of
the form T = sI where s is a scalar. Every second rank tensor can be decomposed
into deviatoric and hydrostatic parts as follows:
T = T −
1
3
(tr T) I
deviatoric
+
1
3
(tr T) I
hydrostatic
= dev T + hyd T (1.34)
Open∇FOAM-1.6
P-22 Tensor mathematics
Determinant The determinant of a second rank tensor is evaluated by
det T =
T11 T12 T13
T21 T22 T23
T31 T32 T33
= T11(T22T33 − T23T32) −
T12(T21T33 − T23T31) +
T13(T21T32 − T22T31)
=
1
6
eijkepqrTipTjqTkr
(1.35)
Cofactors The minors of a tensor are evaluated for each component by deleting the row
and column in which the component is situated and evaluating the resulting entries
as a 2 × 2 determinant. For example, the minor of T12 is
T11 T12 T13
T21 T22 T23
T31 T32 T33
=
T21 T23
T31 T33
= T21T33 − T23T31 (1.36)
The cofactors are signed minors where each minor is component is given a sign
based on the rule
+ve if i + j is even
−ve if i + j is odd
(1.37)
The cofactors of T can be evaluated as
cof T =
1
2
ejkreistTskTtr (1.38)
Inverse The inverse of a tensor can be evaluated as
inv T =
cof TT
det T
(1.39)
Hodge dual of a tensor is a vector whose components are
∗ T = (T23, −T13, T12) (1.40)
1.3.10 Operations exclusive to scalars
OpenFOAM supports most of the well known functions that operate on scalars, e.g. square
root, exponential, logarithm, sine, cosine etc.., a list of which can be found in Table 1.2.
There are 3 additional functions deﬁned within OpenFOAM that are described below:
Sign of a scalar s is
sgn(s) =
1 if s ≥ 0,
−1 if s < 0.
(1.41)
Positive of a scalar s is
pos(s) =
1 if s ≥ 0,
0 if s < 0.
(1.42)
Limit of a scalar s by the scalar n
limit(s, n) =
s if s < n,
0 if s ≥ n.
(1.43)
Open∇FOAM-1.6
1.4 OpenFOAM tensor classes P-23
1.4 OpenFOAM tensor classes
OpenFOAM contains a C++ class library primitive that contains the classes for the tensor
mathematics described so far. The basic tensor classes that are available as standard in
OpenFOAM are listed in Table 1.1. The Table also lists the functions that allow the user
to access individual components of a tensor, known as access functions.
Rank Common name Basic class Access functions
0 Scalar scalar
1 Vector vector x(), y(), z()
2 Tensor tensor xx(), xy(), xz(). . .
Table 1.1: Basic tensor classes in OpenFOAM
We can declare the tensor
T =


1 2 3
4 5 6
7 8 9

 (1.44)
in OpenFOAM by the line:
tensor T(1, 2, 3, 4, 5, 6, 7, 8, 9);
We can then access the component T13, or Txz using the xz() access function. For
instance the code
Info << ‘‘Txz = ’’ << T.xz() << endl;
outputs to the screen:
Txz = 3
1.4.1 Algebraic tensor operations in OpenFOAM
The algebraic operations described in Section 1.3 are all available to the OpenFOAM
tensor classes using syntax which closely mimics the notation used in written mathematics.
Some functions are represented solely by descriptive functions, e.g.symm(), but others can
also be executed using symbolic operators, e.g.*. All functions are listed in Table 1.2.
Operation Comment Mathematical Description
Description in OpenFOAM
Addition a + b a + b
Subtraction a − b a - b
Scalar multiplication sa s * a
Scalar division a/s a / s
Outer product rank a, b >= 1 ab a * b
Inner product rank a, b >= 1 a • b a & b
Double inner product rank a, b >= 2 a •
• b a && b
Cross product rank a, b = 1 a × b a ^ b
Square a2
sqr(a)
Continued on next page
Open∇FOAM-1.6
P-24 Tensor mathematics
Continued from previous page
Operation Comment Mathematical Description
Description in OpenFOAM
Magnitude squared |a|2
magSqr(a)
Magnitude |a| mag(a)
Power n = 0, 1, ..., 4 an
pow(a,n)
Component average i = 1, ..., N ai cmptAv(a)
Component maximum i = 1, ..., N max(ai) max(a)
Component minimum i = 1, ..., N min(ai) min(a)
Scale scale(a,b) scale(a,b)
Geometric transformation transforms a using tensor T transform(T,a)
Operations exclusive to tensors of rank 2
Transpose TT
T.T()
Diagonal diag T diag(T)
Trace tr T tr(T)
Deviatoric component dev T dev(T)
Symmetric component symm T symm(T)
Skew-symmetric component skew T skew(T)
Determinant det T det(T)
Cofactors cof T cof(T)
Inverse inv T inv(T)
Hodge dual ∗ T *T
Operations exclusive to scalars
Sign (boolean) sgn(s) sign(s)
Positive (boolean) s >= 0 pos(s)
Negative (boolean) s < 0 neg(s)
Limit n scalar limit(s, n) limit(s,n)
Square root
√
s sqrt(s)
Exponential exp s exp(s)
Natural logarithm ln s log(s)
Base 10 logarithm log10 s log10(s)
Sine sin s sin(s)
Cosine cos s cos(s)
Tangent tan s tan(s)
Arc sine asin s asin(s)
Arc cosine acos s acos(s)
Arc tangent atan s atan(s)
Hyperbolic sine sinh s sinh(s)
Hyperbolic cosine cosh s cosh(s)
Hyperbolic tangent tanh s tanh(s)
Hyperbolic arc sine asinh s asinh(s)
Hyperbolic arc cosine acosh s acosh(s)
Hyperbolic arc tangent atanh s atanh(s)
Error function erf s erf(s)
Complement error function erfc s erfc(s)
Logarithm gamma function ln Γs lgamma(s)
Type 1 Bessel function of order 0 J0 s j0(s)
Type 1 Bessel function of order 1 J1 s j1(s)
Continued on next page
Open∇FOAM-1.6
1.5 Dimensional units P-25
Continued from previous page
Operation Comment Mathematical Description
Description in OpenFOAM
Type 2 Bessel function of order 0 Y0 s y0(s)
Type 2 Bessel function of order 1 Y1 s y1(s)
a, b are tensors of arbitrary rank unless otherwise stated
s is a scalar, N is the number of tensor components
Table 1.2: Algebraic tensor operations in OpenFOAM
1.5 Dimensional units
In continuum mechanics, properties are represented in some chosen units, e.g. mass in
kilograms (kg), volume in cubic metres (m3
), pressure in Pascals (kg m s−2
). Algebraic
operations must be performed on these properties using consistent units of measurement;
in particular, addition, subtraction and equality are only physically meaningful for prop-
erties of the same dimensional units. As a safeguard against implementing a meaningless
operation, OpenFOAM encourages the user to attach dimensional units to any tensor and
will then perform dimension checking of any tensor operation.
Units are deﬁned using the dimensionSet class, e.g.
dimensionSet pressureDims(1, -1, -2, 0, 0, 0, 0);
No. Property Unit Symbol
1 Mass kilogram k
2 Length metre m
3 Time second s
4 Temperature Kelvin K
5 Quantity moles mol
6 Current ampere A
7 Luminous intensity candela cd
Table 1.3: S.I. base units of measurement
where each of the values corresponds to the power of each of the S.I. base units of
measurement listed in Table 1.3. The line of code declares pressureDims to be the
dimensionSet for pressure kg m s−2
since the ﬁrst entry in the pressureDims array, 1,
corresponds to k1
, the second entry, -1, corresponds to m−1
etc.. A tensor with units
is deﬁned using the dimensioned<Type> template class, the <Type> being scalar, vector,
tensor, etc.. The dimensioned<Type> stores a variable name of class word,the value <Type>
and a dimensionSet
dimensionedTensor sigma
(
"sigma",
dimensionSet(1, -1, -2, 0, 0, 0, 0),
tensor(1e6,0,0,0,1e6,0,0,0,1e6),
);
Open∇FOAM-1.6
P-26 Tensor mathematics
creates a tensor with correct dimensions of pressure, or stress
σ =


106
0 0
0 106
0
0 0 106

 (1.45)
Open∇FOAM-1.6
Chapter 2
Discretisation procedures
So far we have dealt with algebra of tensors at a point. The PDEs we wish to solve involve
derivatives of tensors with respect to time and space. We therefore need to extend our
description to a tensor ﬁeld, i.e. a tensor that varies across time and spatial domains.
In this Chapter we will ﬁrst present a mathematical description of all the diﬀerential
operators we may encounter. We will then show how a tensor ﬁeld is constructed in
OpenFOAM and how the derivatives of these ﬁelds are discretised into a set of algebraic
equations.
2.1 Diﬀerential operators
Before deﬁning the spatial derivatives we ﬁrst introduce the nabla vector operator ∇,
represented in index notation as ∂i:
∇ ≡ ∂i ≡
∂
∂xi
≡
∂
∂x1
,
∂
∂x2
,
∂
∂x3
(2.1)
The nabla operator is a useful notation that obeys the following rules:
• it operates on the tensors to its right and the conventional rules of a derivative of
a product, e.g. ∂iab = (∂ia) b + a (∂ib);
• otherwise the nabla operator behaves like any other vector in an algebraic operation.
2.1.1 Gradient
If a scalar ﬁeld s is deﬁned and continuously diﬀerentiable then the gradient of s, ∇s is
a vector ﬁeld
∇s = ∂is =
∂s
∂x1
,
∂s
∂x2
,
∂s
∂x3
(2.2)
The gradient can operate on any tensor ﬁeld to produce a tensor ﬁeld that is one rank
higher. For example, the gradient of a vector ﬁeld a is a second rank tensor ﬁeld
∇a = ∂iaj =


∂a1/∂x1 ∂a2/∂x1 ∂a3/∂x1
∂a1/∂x2 ∂a2/∂x2 ∂a3/∂x2
∂a1/∂x3 ∂a2/∂x3 ∂a3/∂x3

 (2.3)
P-28 Discretisation procedures
2.1.2 Divergence
If a vector ﬁeld a is deﬁned and continuously diﬀerentiable then the divergence of a is a
scalar ﬁeld
∇ • a = ∂iai =
∂a1
∂x1
+
∂a2
∂x2
+
∂a3
∂x3
(2.4)
The divergence can operate on any tensor ﬁeld of rank 1 and above to produce a
tensor that is one rank lower. For example the divergence of a second rank tensor ﬁeld
T is a vector ﬁeld (expanding the vector as a column array for convenience)
∇ • T = ∂iTij =


∂T11/∂x1 + ∂T12/∂x1 + ∂T13/∂x1
∂T21/∂x2 + ∂T22/∂x2 + ∂T23/∂x2
∂T31/∂x3 + ∂T32/∂x3 + ∂T33/∂x3

 (2.5)
2.1.3 Curl
If a vector ﬁeld a is deﬁned and continuously diﬀerentiable then the curl of a, ∇ × a is a
vector ﬁeld
∇ × a = eijk∂jak =
∂a3
∂x2
−
∂a2
∂x3
,
∂a1
∂x3
−
∂a3
∂x1
,
∂a2
∂x1
−
∂a1
∂x2
(2.6)
The curl is related to the gradient by
∇ × a = 2 (∗ skew ∇a) (2.7)
2.1.4 Laplacian
The Laplacian is an operation that can be deﬁned mathematically by a combination of
the divergence and gradient operators by ∇2
≡ ∇ • ∇. However, the Laplacian should be
considered as a single operation that transforms a tensor ﬁeld into another tensor ﬁeld of
the same rank, rather than a combination of two operations, one which raises the rank
by 1 and one which reduces the rank by 1.
In fact, the Laplacian is best deﬁned as a scalar operator, just as we deﬁned nabla as
a vector operator, by
∇2
≡ ∂2
≡
∂2
∂x2
1
+
∂2
∂x2
2
+
∂2
∂x2
3
(2.8)
For example, the Laplacian of a scalar ﬁeld s is the scalar ﬁeld
∇2
s = ∂2
s =
∂2
s
∂x2
1
+
∂2
s
∂x2
2
+
∂2
s
∂x2
3
(2.9)
2.1.5 Temporal derivative
There is more than one deﬁnition of temporal, or time, derivative of a tensor. To describe
the temporal derivatives we must ﬁrst recall that the tensor relates to a property of a
volume of material that may be moving. If we track an inﬁnitesimally small volume of
material, or particle, as it moves and observe the change in the tensorial property φ in
time, we have the total, or material time derivative denoted by
Dφ
Dt
= lim
∆t→0
∆φ
∆t
(2.10)
Open∇FOAM-1.6
2.2 Overview of discretisation P-29
However in continuum mechanics, particularly ﬂuid mechanics, we often observe the
change of a φ in time at a ﬁxed point in space as diﬀerent particles move across that
point. This change at a point in space is termed the spatial time derivative which is
denoted by ∂/∂t and is related to the material derivative by:
Dφ
Dt
=
∂φ
∂t
+ U • ∇φ (2.11)
where U is the velocity ﬁeld of property φ. The second term on the right is known as the
convective rate of change of φ.
2.2 Overview of discretisation
The term discretisation means approximation of a problem into discrete quantities. The
FV method and others, such as the ﬁnite element and ﬁnite diﬀerence methods, all
discretise the problem as follows:
Spatial discretisation Deﬁning the solution domain by a set of points that ﬁll and
bound a region of space when connected;
Temporal discretisation (For transient problems) dividing the time domain into into
a ﬁnite number of time intervals, or steps;
Equation discretisation Generating a system of algebraic equations in terms of dis-
crete quantities deﬁned at speciﬁc locations in the domain, from the PDEs that
characterise the problem.
2.2.1 OpenFOAM lists and ﬁelds
OpenFOAM frequently needs to store sets of data and perform functions, such as mathe-
matical operations, on the data. OpenFOAM therefore provides an array template class
List<Type>, making it possible to create a list of any object of class Type that inherits
the functions of the Type. For example a List of vector is List<vector>.
Lists of the tensor classes are deﬁned as standard in OpenFOAM by the template class
Field<Type>. For better code legibility, all instances of Field<Type>, e.g.Field<vector>, are
renamed using typedef declarations as scalarField, vectorField, tensorField, symmTensor-
Field, tensorThirdField and symmTensorThirdField. Algebraic operations can be performed
between Fields subject to obvious restrictions such as the ﬁelds having the same number
of elements. OpenFOAM also supports operations between a ﬁeld and single tensor, e.g.
all values of a Field U can be multiplied by the scalar 2 with the operation U = 2.0 * U.
2.3 Discretisation of the solution domain
Discretisation of the solution domain is shown in Figure 2.1. The space domain is discre-
tised into computational mesh on which the PDEs are subsequently discretised. Discreti-
sation of time, if required, is simple: it is broken into a set of time steps ∆t that may
change during a numerical simulation, perhaps depending on some condition calculated
during the simulation.
On a more detailed level, discretisation of space requires the subdivision of the domain
into a number of cells, or control volumes. The cells are contiguous, i.e. they do not
overlap one another and completely ﬁll the domain. A typical cell is shown in Figure 2.2.
Open∇FOAM-1.6
P-30 Discretisation procedures
z
y
x
Space domain
t
Time domain
∆t
Figure 2.1: Discretisation of the solution domain
N
SfP
f
d
Figure 2.2: Parameters in ﬁnite volume discretisation
Open∇FOAM-1.6
2.3 Discretisation of the solution domain P-31
Dependent variables and other properties are principally stored at the cell centroid P
although they may be stored on faces or vertices. The cell is bounded by a set of ﬂat
faces, given the generic label f. In OpenFOAM there is no limitation on the number of
faces bounding each cell, nor any restriction on the alignment of each face. This kind
of mesh is often referred to as “arbitrarily unstructured” to diﬀerentiate it from meshes
in which the cell faces have a prescribed alignment, typically with the coordinate axes.
Codes with arbitrarily unstructured meshes oﬀer greater freedom in mesh generation and
manipulation in particular when the geometry of the domain is complex or changes over
time.
Whilst most properties are deﬁned at the cell centroids, some are deﬁned at cell faces.
There are two types of cell face.
Internal faces Those faces that connect two cells (and it can never be more than two).
For each internal face, OpenFOAM designates one adjoining cell to be the face
owner and the other to be the neighbour;
Boundary faces Those belonging to one cell since they coincide with the boundary of
the domain. These faces simply have an owner cell.
2.3.1 Deﬁning a mesh in OpenFOAM
There are diﬀerent levels of mesh description in OpenFOAM, beginning with the most
basic mesh class, named polyMesh since it is based on polyhedra. A polyMesh is con-
structed using the minimum information required to deﬁne the mesh geometry described
below and presented in Figure 2.3:
Points A list of cell vertex point coordinate vectors, i.e. a vectorField, that is renamed
pointField using a typedef declaration;
Faces A list of cell faces List<face>, or faceList, where the face class is deﬁned by a list
of vertex numbers, corresponding to the pointField;
Cells a list of cells List<cell>, or cellList, where the cell class is deﬁned by a list of face
numbers, corresponding to the faceList described previously.
Boundary a polyBoundaryMesh decomposed into a list of patches, polyPatchList rep-
resenting diﬀerent regions of the boundary. The boundary is subdivided in this
manner to allow diﬀerent boundary conditions to be speciﬁed on diﬀerent patches
during a solution. All the faces of any polyPatch are stored as a single block of the
faceList, so that its faces can be easily accessed using the slice class which stores
references to the ﬁrst and last face of the block. Each polyPatch is then constructed
from
• a slice;
• a word to assign it a name.
FV discretisation uses speciﬁc data that is derived from the mesh geometry stored
in polyMesh. OpenFOAM therefore extends the polyMesh class to fvMesh which stores
the additional data needed for FV discretisation. fvMesh is constructed from polyMesh
and stores the data in Table 2.1 which can be updated during runtime in cases where the
mesh moves, is reﬁned etc..
Open∇FOAM-1.6
P-32 Discretisation procedures
Patch 3
Patch 2
pointField faceList
polyPatchList
Boundary
Patch 1
Patch 2
Patch 3
FacesPoints Cells
Internal
...
Boundary
...
...
...
slice
Patch 1
......
... ...
...
cellList
Figure 2.3: Schematic of the basic mesh description used in OpenFOAM
2.3.2 Deﬁning a geometricField in OpenFOAM
So far we can deﬁne a ﬁeld, i.e. a list of tensors, and a mesh. These can be combined to
deﬁne a tensor ﬁeld relating to discrete points in our domain, speciﬁed in OpenFOAM
by the template class geometricField<Type>. The Field values are separated into those
deﬁned within the internal region of the domain, e.g. at the cell centres, and those deﬁned
on the domain boundary, e.g. on the boundary faces. The geometricField<Type> stores
the following information:
Internal ﬁeld This is simply a Field<Type>, described in Section 2.2.1;
BoundaryField This is a GeometricBoundaryField, in which a Field is deﬁned for the
faces of each patch and a Field is deﬁned for the patches of the boundary. This
is then a ﬁeld of ﬁelds, stored within an object of the FieldField<Type> class. A
reference to the fvBoundaryMesh is also stored [**].
Mesh A reference to an fvMesh, with some additional detail as to the whether the ﬁeld
is deﬁned at cell centres, faces, etc..
Dimensions A dimensionSet, described in Section 4.2.6.
Old values Discretisation of time derivatives requires ﬁeld data from previous time steps.
The geometricField<Type> will store references to stored ﬁelds from the previous,
or old, time step and its previous, or old-old, time step where necessary.
Open∇FOAM-1.6
2.4 Equation discretisation P-33
Class Description Symbol Access function
volScalarField Cell volumes V V()
surfaceVectorField Face area vectors Sf Sf()
surfaceScalarField Face area magnitudes |Sf | magSf()
volVectorField Cell centres C C()
surfaceVectorField Face centres Cf Cf()
surfaceScalarField Face motion ﬂuxes ** φg phi()
Table 2.1: fvMesh stored data.
Previous iteration values The iterative solution procedures can use under-relaxation
which requires access to data from the previous iteration. Again, if required, geo-
metricField<Type> stores a reference to the data from the previous iteration.
As discussed in Section 2.3, we principally deﬁne a property at the cell centres but quite
often it is stored at the cell faces and on occasion it is deﬁned on cell vertices. The
geometricField<Type> is renamed using typedef declarations to indicate where the ﬁeld
variable is deﬁned as follows:
volField<Type> A ﬁeld deﬁned at cell centres;
surfaceField<Type> A ﬁeld deﬁned on cell faces;
pointField<Type> A ﬁeld deﬁned on cell vertices.
These typedef ﬁeld classes of geometricField<Type>are illustrated in Figure 2.4. A
geometricField<Type> inherits all the tensor algebra of Field<Type> and has all operations
subjected to dimension checking using the dimensionSet. It can also be subjected to the
FV discretisation procedures described in the following Section. The class structure used
to build geometricField<Type> is shown in Figure 2.51
.
2.4 Equation discretisation
Equation discretisation converts the PDEs into a set of algebraic equations that are
commonly expressed in matrix form as:
[A] [x] = [b] (2.12)
where [A] is a square matrix, [x] is the column vector of dependent variable and [b] is
the source vector. The description of [x] and [b] as ‘vectors’ comes from matrix termi-
nology rather than being a precise description of what they truly are: a list of values
deﬁned at locations in the geometry, i.e. a geometricField<Type>, or more speciﬁcally a
volField<Type> when using FV discretisation.
[A] is a list of coeﬃcients of a set of algebraic equations, and cannot be described as a
geometricField<Type>. It is therefore given a class of its own: fvMatrix. fvMatrix<Type>
is created through discretisation of a geometric<Type>Field and therefore inherits the
<Type>. It supports many of the standard algebraic matrix operations of addition +,
subtraction - and multiplication *.
Each term in a PDE is represented individually in OpenFOAM code using the classes
of static functions ﬁniteVolumeMethod and ﬁniteVolumeCalculus, abbreviated by a typedef
1
The diagram is not an exact description of the class hierarchy, rather a representation of the general
structure leading from some primitive classes to geometric<Type>Field.
Open∇FOAM-1.6
P-34 Discretisation procedures
Internal ﬁeld
Boundary ﬁeld
Patch 1
Patch 2
Patch 1
Patch 2
(a) A volField<Type>
Internal ﬁeld
Boundary ﬁeld
Patch 1
Patch 2
Patch 1
Patch 2
(b) A surfaceField<Type>
Internal ﬁeld
Boundary ﬁeld
Patch 1
Patch 2
Patch 1
Patch 2
(c) A pointField<Type>
Figure 2.4: Types of geometricField<Type> deﬁned on a mesh with 2 boundary patches
(in 2 dimensions for simplicity)
Open∇FOAM-1.6
2.4 Equation discretisation P-35
polyMesh
labelList
<Type>
scalar
vector
tensor
symmTensor
tensorThird
symmTensorThird
dimensioned<Type>
cell
fvBoundaryMesh
polyBoundaryMesh
polyPatch
slice
polyPatchListcellListfaceList
face
fvPatchList
fvPatch
List
pointField
wordlabel
fvMesh
geometricField<Type>
Field<Type>
fvPatchField
dimensionSet
geometricBoundaryField<Type>
Figure 2.5: Basic class structure leading to geometricField<Type>
Open∇FOAM-1.6
P-36 Discretisation procedures
to fvm and fvc respectively. fvm and fvc contain static functions, representing diﬀerential
operators, e.g. ∇2
, ∇ • and ∂/∂t, that discretise geometricField<Type>s. The purpose of
deﬁning these functions within two classes, fvm and fvc, rather than one, is to distinguish:
• functions of fvm that calculate implicit derivatives of and return an fvMatrix<Type>
• some functions of fvc that calculate explicit derivatives and other explicit calcula-
tions, returning a geometricField<Type>.
Figure 2.6 shows a geometricField<Type> deﬁned on a mesh with 2 boundary patches and
illustrates the explicit operations merely transform one ﬁeld to another and drawn in 2D
for simplicity.
geometricField<Type>
volField<Type>
surfaceField<Type>
pointField<Type>
geometricField<Type>
volField<Type>
surfaceField<Type>
pointField<Type>
fvMatrix<Type>
ﬁniteVolumeMethod (fvm)
(Implicit)
ﬁniteVolumeCalculus (fvc)
Other explicit operations
(Explict)
Figure 2.6: A geometricField<Type> and its operators
Table 2.2 lists the main functions that are available in fvm and fvc to discretise terms
that may be found in a PDE. FV discretisation of each term is formulated by ﬁrst inte-
grating the term over a cell volume V . Most spatial derivative terms are then converted
to integrals over the cell surface S bounding the volume using Gauss’s theorem
V
∇ ⋆ φ dV =
S
dS ⋆ φ (2.13)
where S is the surface area vector, φ can represent any tensor ﬁeld and the star notation
⋆ is used to represent any tensor product, i.e. inner, outer and cross and the respective
derivatives: divergence ∇ • φ, gradient ∇φ and ∇ × φ. Volume and surface integrals
are then linearised using appropriate schemes which are described for each term in the
following Sections. Some terms are always discretised using one scheme, a selection of
schemes is oﬀered in OpenFOAM for the discretisation of other terms. The choice of
scheme is either made by a direct speciﬁcation within the code or it can be read from an
input ﬁle at job run-time and stored within an fvSchemes class object.
Open∇FOAM-1.6
2.4 Equation discretisation P-37
Term description Implicit / Text fvm::/fvc:: functions
Explicit expression
Laplacian Imp/Exp ∇2
φ laplacian(phi)
∇ • Γ∇φ laplacian(Gamma, phi)
Time derivative Imp/Exp
∂φ
∂t
ddt(phi)
∂ρφ
∂t
ddt(rho,phi)
Second time derivative Imp/Exp
∂
∂t
ρ
∂φ
∂t
d2dt2(rho, phi)
Convection Imp/Exp ∇ • (ψ) div(psi,scheme)*
∇ • (ψφ) div(psi, phi, word)*
div(psi, phi)
Divergence Exp ∇ • χ div(chi)
Gradient Exp ∇χ grad(chi)
∇φ gGrad(phi)
lsGrad(phi)
snGrad(phi)
snGradCorrection(phi)
Grad-grad squared Exp |∇∇φ|2
sqrGradGrad(phi)
Curl Exp ∇ × φ curl(phi)
Source Imp ρφ Sp(rho,phi)
Imp/Exp† SuSp(rho,phi)
†fvm::SuSp source is discretised implicit or explicit depending on the sign of rho.
†An explicit source can be introduced simply as a vol<Type>Field, e.g.rho*phi.
Function arguments can be of the following classes:
phi: vol<Type>Field
Gamma: scalar volScalarField, surfaceScalarField, volTensorField, surfaceTensorField.
rho: scalar, volScalarField
psi: surfaceScalarField.
chi: surface<Type>Field, vol<Type>Field.
Table 2.2: Discretisation of PDE terms in OpenFOAM
Open∇FOAM-1.6
P-38 Discretisation procedures
2.4.1 The Laplacian term
The Laplacian term is integrated over a control volume and linearised as follows:
V
∇ • (Γ∇φ) dV =
S
dS • (Γ∇φ) =
f
Γf Sf • (∇φ)f (2.14)
The face gradient discretisation is implicit when the length vector d between the centre
of the cell of interest P and the centre of a neighbouring cell N is orthogonal to the face
plane, i.e. parallel to Sf :
Sf • (∇φ)f = |Sf |
φN − φP
|d|
(2.15)
In the case of non-orthogonal meshes, an additional explicit term is introduced which is
evaluated by interpolating cell centre gradients, themselves calculated by central diﬀer-
encing cell centre values.
2.4.2 The convection term
The convection term is integrated over a control volume and linearised as follows:
V
∇ • (ρUφ) dV =
S
dS • (ρUφ) =
f
Sf • (ρU)f φf =
f
Fφf (2.16)
The face ﬁeld φf can be evaluated using a variety of schemes:
Central diﬀerencing (CD) is second-order accurate but unbounded
φf = fxφP + (1 − fx)φN (2.17)
where fx ≡ fN/PN where fN is the distance between f and cell centre N and
PN is the distance between cell centres P and N.
Upwind diﬀerencing (UD) determines φf from the direction of ﬂow and is bounded
at the expense of accuracy
φf =
φP for F ≥ 0
φN for F < 0
(2.18)
Blended diﬀerencing (BD) schemes combine UD and CD in an attempt to preserve
boundedness with reasonable accuracy,
φf = (1 − γ) (φf )UD + γ (φf )CD (2.19)
OpenFOAM has several implementations of the Gamma diﬀerencing scheme to
select the blending coeﬃcient γ but it oﬀers other well-known schemes such as van
Leer, SUPERBEE, MINMOD etc..
Open∇FOAM-1.6
2.4 Equation discretisation P-39
2.4.3 First time derivative
The ﬁrst time derivative ∂/∂t is integrated over a control volume as follows:
∂
∂t V
ρφ dV (2.20)
The term is discretised by simple diﬀerencing in time using:
new values φn
≡ φ(t + ∆t) at the time step we are solving for;
old values φo
≡ φ(t) that were stored from the previous time step;
old-old values φoo
≡ φ(t − ∆t) stored from a time step previous to the last.
One of two discretisation schemes can be declared using the timeScheme keyword in the
appropriate input ﬁle, described in detail in section 4.4 of the User Guide.
Euler implicit scheme, timeScheme EulerImplicit, that is ﬁrst order accurate in time:
∂
∂t V
ρφ dV =
(ρP φP V )n
− (ρP φP V )o
∆t
(2.21)
Backward diﬀerencing scheme, timeScheme BackwardDifferencing, that is second
order accurate in time by storing the old-old values and therefore with a larger
overhead in data storage than EulerImplicit:
∂
∂t V
ρφ dV =
3 (ρP φP V )n
− 4 (ρP φP V )o
+ (ρP φP V )oo
2∆t
(2.22)
2.4.4 Second time derivative
The second time derivative is integrated over a control volume and linearised as follows:
∂
∂t V
ρ
∂φ
∂t
dV =
(ρP φP V )n
− 2 (ρP φP V )o
+ (ρP φP V )oo
∆t2
(2.23)
It is ﬁrst order accurate in time.
2.4.5 Divergence
The divergence term described in this Section is strictly an explicit term that is distin-
guished from the convection term of Section 2.4.2, i.e. in that it is not the divergence of
the product of a velocity and dependent variable. The term is integrated over a control
volume and linearised as follows:
V
∇ • φ dV =
S
dS • φ =
f
Sf • φf (2.24)
The fvc::div function can take as its argument either a surface<Type>Field, in which
case φf is speciﬁed directly, or a vol<Type>Field which is interpolated to the face by
central diﬀerencing as described in Section 2.4.10:
Open∇FOAM-1.6
P-40 Discretisation procedures
2.4.6 Gradient
The gradient term is an explicit term that can be evaluated in a variety of ways. The
scheme can be evaluated either by selecting the particular grad function relevant to the
discretisation scheme, e.g.fvc::gGrad, fvc::lsGrad etc., or by using the fvc::grad
function combined with the appropriate timeScheme keyword in an input ﬁle
Gauss integration is invoked using the fvc::grad function with timeScheme Gauss
or directly using the fvc::gGrad function. The discretisation is performed using
the standard method of applying Gauss’s theorem to the volume integral:
V
∇φ dV =
S
dS φ =
f
Sf φf (2.25)
As with the fvc::div function, the Gaussian integration fvc::grad function can
take either a surfaceField<Type> or a volField<Type> as an argument.
Least squares method is based on the following idea:
1. a value at point P can be extrapolated to neighbouring point N using the
gradient at P;
2. the extrapolated value at N can be compared to the actual value at N, the
diﬀerence being the error;
3. if we now minimise the sum of the square of weighted errors at all neighbours
of P with the respect to the gradient, then the gradient should be a good
approximation.
Least squares is invoked using the fvc::grad function with timeScheme leastSquares
or directly using the fvc::lsGrad function. The discretisation is performed as by
ﬁrst calculating the tensor G at every point P by summing over neighbours N:
G =
N
w2
N dd (2.26)
where d is the vector from P to N and the weighting function wN = 1/|d|. The
gradient is then evaluated as:
(∇φ)P =
N
w2
N G−1 • d (φN − φP ) (2.27)
Surface normal gradient The gradient normal to a surface nf • (∇φ)f can be evalu-
ated at cell faces using the scheme
(∇φ)f =
φN − φP
|d|
(2.28)
This gradient is called by the function fvc::snGrad and returns a surfaceField<Type>.
The scheme is directly analogous to that evaluated for the Laplacian discretisation
scheme in Section 2.4.1, and in the same manner, a correction can be introduced
to improve the accuracy of this face gradient in the case of non-orthogonal meshes.
This correction is called using the function fvc::snGradCorrection [Check**].
Open∇FOAM-1.6
2.4 Equation discretisation P-41
2.4.7 Grad-grad squared
The grad-grad squared term is evaluated by: taking the gradient of the ﬁeld; taking the
gradient of the resulting gradient ﬁeld; and then calculating the magnitude squared of
the result. The mathematical expression for grad-grad squared of φ is |∇ (∇φ)|2
.
2.4.8 Curl
The curl is evaluated from the gradient term described in Section 2.4.6. First, the gradient
is discretised and then the curl is evaluated using the relationship from Equation 2.7,
repeated here for convenience
∇ × φ = 2 ∗(skew ∇φ)
2.4.9 Source terms
Source terms can be speciﬁed in 3 ways
Explicit Every explicit term is a volField<Type>. Hence, an explicit source term can be
incorporated into an equation simply as a ﬁeld of values. For example if we wished
to solve Poisson’s equation ∇2
φ = f, we would deﬁne phi and f as volScalarField
and then do
solve(fvm::laplacian(phi) == f)
Implicit An implicit source term is integrated over a control volume and linearised by
V
ρφ dV = ρP VP φP (2.29)
Implicit/Explicit The implicit source term changes the coeﬃcient of the diagonal of
the matrix. Depending on the sign of the coeﬃcient and matrix terms, this will
either increase or decrease diagonal dominance of the matrix. Decreasing the di-
agonal dominance could cause instability during iterative solution of the matrix
equation. Therefore OpenFOAM provides a mixed source discretisation procedure
that is implicit when the coeﬃcients that are greater than zero, and explicit for the
coeﬃcients less than zero. In mathematical terms the matrix coeﬃcient for node P
is VP max(ρP , 0) and the source term is VP φP min(ρP , 0).
2.4.10 Other explicit discretisation schemes
There are some other discretisation procedures that convert volField<Type>s into sur-
face<Type>Fields and visa versa.
Surface integral fvc::surfaceIntegrate performs a summation of surface<Type>Field
face values bounding each cell and dividing by the cell volume, i.e. ( f φf )/VP . It
returns a volField<Type>.
Surface sum fvc::surfaceSum performs a summation of surface<Type>Field face val-
ues bounding each cell, i.e. f φf returning a volField<Type>.
Average fvc::average produces an area weighted average of surface<Type>Field face
values, i.e. ( f Sf φf )/ f Sf , and returns a volField<Type>.
Open∇FOAM-1.6
P-42 Discretisation procedures
Reconstruct
Face interpolate The geometric<Type>Field function faceInterpolate() interpolates
volField<Type> cell centre values to cell faces using central diﬀerencing, returning a
surface<Type>Field.
2.5 Temporal discretisation
Although we have described the discretisation of temporal derivatives in Sections 2.4.3
and 2.4.4, we need to consider how to treat the spatial derivatives in a transient problem.
If we denote all the spatial terms as Aφ where A is any spatial operator, e.g. Laplacian,
then we can express a transient PDE in integral form as
t+∆t
t
∂
∂t V
ρφ dV +
V
Aφ dV dt = 0 (2.30)
Using the Euler implicit method of Equation 2.21, the ﬁrst term can be expressed as
t+∆t
t
∂
∂t V
ρφ dV dt =
t+∆t
t
(ρP φP V )n
− (ρP φP V )o
∆t
dt
=
(ρP φP V )n
− (ρP φP V )o
∆t
∆t
(2.31)
The second term can be expressed as
t+∆t
t V
Aφ dV dt =
t+∆t
t
A∗
φ dt (2.32)
where A∗
represents the spatial discretisation of A. The time integral can be discretised
in three ways:
Euler implicit uses implicit discretisation of the spatial terms, thereby taking current
values φn
.
t+∆t
t
A∗
φ dt = A∗
φn
∆t (2.33)
It is ﬁrst order accurate in time, guarantees boundedness and is unconditionally
stable.
Explicit uses explicit discretisation of the spatial terms, thereby taking old values φo
.
t+∆t
t
A∗
φ dt = A∗
φo
∆t (2.34)
It is ﬁrst order accurate in time and is unstable if the Courant number Co is greater
than 1. The Courant number is deﬁned as
Co =
Uf • d
|d|2∆t
(2.35)
where Uf is a characteristic velocity, e.g. velocity of a wave front, velocity of ﬂow.
Crank Nicholson uses the trapezoid rule to discretise the spatial terms, thereby taking
a mean of current values φn
and old values φo
.
t+∆t
t
A∗
φ dt = A∗ φn
+ φo
2
∆t (2.36)
It is second order accurate in time, is unconditionally stable but does not guarantee
boundedness.
Open∇FOAM-1.6
2.6 Boundary Conditions P-43
2.5.1 Treatment of temporal discretisation in OpenFOAM
At present the treatment of the temporal discretisation is controlled by the implementa-
tion of the spatial derivatives in the PDE we wish to solve. For example, let us say we
wish to solve a transient diﬀusion equation
∂φ
∂t
= κ∇2
φ (2.37)
An Euler implicit implementation of this would read
solve(fvm::ddt(phi) == kappa*fvm::laplacian(phi))
where we use the fvm class to discretise the Laplacian term implicitly. An explicit
implementation would read
solve(fvm::ddt(phi) == kappa*fvc::laplacian(phi))
where we now use the fvc class to discretise the Laplacian term explicitly. The Crank
Nicholson scheme can be implemented by the mean of implicit and explicit terms:
solve
(
fvm::ddt(phi)
==
kappa*0.5*(fvm::laplacian(phi) + fvc::laplacian(phi))
)
2.6 Boundary Conditions
Boundary conditions are required to complete the problem we wish to solve. We therefore
need to specify boundary conditions on all our boundary faces. Boundary conditions can
be divided into 2 types:
Dirichlet prescribes the value of the dependent variable on the boundary and is therefore
termed ‘ﬁxed value’ in this guide;
Neumann prescribes the gradient of the variable normal to the boundary and is therefore
termed ‘ﬁxed gradient’ in this guide.
When we perform discretisation of terms that include the sum over faces f , we need
to consider what happens when one of the faces is a boundary face.
Fixed value We specify a ﬁxed value at the boundary φb
• We can simply substitute φb in cases where the discretisation requires the value
on a boundary face φf , e.g. in the convection term in Equation 2.16.
• In terms where the face gradient (∇φ)f is required, e.g. Laplacian, it is calcu-
lated using the boundary face value and cell centre value,
Sf • (∇φ)f = |Sf |
φb − φP
|d|
(2.38)
Open∇FOAM-1.6
P-44 Discretisation procedures
Fixed gradient The ﬁxed gradient boundary condition gb is a speciﬁcation on inner
product of the gradient and unit normal to the boundary, or
gb =
S
|S|
• ∇φ
f
(2.39)
• When discretisation requires the value on a boundary face φf we must inter-
polate the cell centre value to the boundary by
φf = φP + d • (∇φ)f
= φP + |d| gb
(2.40)
• φb can be directly substituted in cases where the discretisation requires the
face gradient to be evaluated,
Sf • (∇φ)f = |Sf | gb (2.41)
2.6.1 Physical boundary conditions
The speciﬁcation of boundary conditions is usually an engineer’s interpretation of the
true behaviour. Real boundary conditions are generally deﬁned by some physical at-
tributes rather than the numerical description as described of the previous Section. In
incompressible ﬂuid ﬂow there are the following physical boundaries
Inlet The velocity ﬁeld at the inlet is supplied and, for consistency, the boundary con-
dition on pressure is zero gradient.
Outlet The pressure ﬁeld at the outlet is supplied and a zero gradient boundary condition
on velocity is speciﬁed.
No-slip impermeable wall The velocity of the ﬂuid is equal to that of the wall itself,
i.e. a ﬁxed value condition can be speciﬁed. The pressure is speciﬁed zero gradient
since the ﬂux through the wall is zero.
In a problem whose solution domain and boundary conditions are symmetric about a
plane, we only need to model half the domain to one side of the symmetry plane. The
boundary condition on the plane must be speciﬁed according to
Symmetry plane The symmetry plane condition speciﬁes the component of the gradi-
ent normal to the plane should be zero. [Check**]
Open∇FOAM-1.6
Chapter 3
Examples of the use of OpenFOAM
In this section we shall describe several test cases supplied with the OpenFOAM distri-
bution. The intention is to provide example cases, including those in the tutorials in
chapter 2 of the User Guide, for every standard solver. The examples are designed to
introduce certain tools and features of OpenFOAM, e.g. within pre-/post-processing, nu-
merical schemes, algorithms. They also provide a means for validation of solvers although
that is not their principal function.
Each example contains a description of the problem: the geometry, initial and bound-
ary conditions, a brief description of the equations being solved, models used, and physical
properties required. The solution domain is selected which may be a portion of the orig-
inal geometry, e.g. if we introduce symmetry planes. The method of meshing, usually
blockMesh, is speciﬁed; of course the user can simply view the mesh since every exam-
ple is distributed with the polyMesh directory containing the data ﬁles that describe the
mesh.
The examples coexist with the tutorials in the tutorials subdirectory of the OpenFOAM
installation. They are organised into a set of subdirectories by solver, e.g. all the icoFoam
cases are stored within a subdirectory icoFoam. Before running a particular example,
the user is urged to copy it into their user account. We recommend that the user stores
all OpenFOAM cases in a directory we recommend that the tutorials are copied into a
directory $FOAM RUN. If this directory structure has not yet been created in the user’s
account, it can be created with
mkdir -p $FOAM RUN
The tutorials can then be copied into this directory with
cp -r $FOAM TUTORIALS/* $FOAM RUN
3.1 Flow around a cylinder
In this example we shall investigate potential ﬂow around a cylinder using potentialFoam.
This example introduces the following OpenFOAM features:
• non-orthogonal meshes;
• generating an analytical solution to a problem in OpenFOAM.
P-46 Examples of the use of OpenFOAM
3.1.1 Problem speciﬁcation
The problem is deﬁned as follows:
Solution domain The domain is 2 dimensional and consists of a square domain with
a cylinder collocated with the centre of the square as shown in Figure 3.1.
Ux = 1.0 m/s p = 0 bar
symmetry
0.5 m
4.0 m
4.0 m
x
y
0
Figure 3.1: Geometry of ﬂow round a cylinder
Governing equations
• Mass continuity for an incompressible ﬂuid
∇ • U = 0 (3.1)
• Pressure equation for an incompressible, irrotational ﬂuid assuming steady-
state conditions
∇2
p = 0 (3.2)
Boundary conditions
• Inlet (left) with ﬁxed velocity U = (1, 0, 0) m/s.
• Outlet (right) with a ﬁxed pressure p = 0 Pa.
• No-slip wall (bottom);
• Symmetry plane (top).
Initial conditions U = 0 m/s, p = 0 Pa — required in OpenFOAM input ﬁles but not
necessary for the solution since the problem is steady-state.
Solver name potentialFoam: a potential ﬂow code, i.e. assumes the ﬂow is incompress-
ible, steady, irrotational, inviscid and it ignores gravity.
Case name cylinder case located in the $FOAM TUTORIALS/potentialFoam directory.
Open∇FOAM-1.6
3.1 Flow around a cylinder P-47
3.1.2 Note on potentialFoam
potentialFoam is a useful solver to validate OpenFOAM since the assumptions of potential
ﬂow are such that an analytical solution exists for cases whose geometries are relatively
simple. In this example of ﬂow around a cylinder an analytical solution exists with which
we can compare our numerical solution. potentialFoam can also be run more like a utility
to provide a (reasonably) conservative initial U ﬁeld for a problem. When running certain
cases, this can useful for avoiding instabilities due to the initial ﬁeld being unstable.
In short, potentialFoam creates a conservative ﬁeld from a non-conservative initial ﬁeld
supplied by the user.
3.1.3 Mesh generation
Mesh generation using blockMesh has been described in tutorials in the User Guide. In
this case, the mesh consists of 10 blocks as shown in Figure 3.2. Remember that all
10
5
4
9
10
3
81817
16
1514
111213 2
7 6
2
3
0
1
4
5
6
7
8
9
y
x
down down
left right
cylinder
up
Figure 3.2: Blocks in cylinder geometry
meshes are treated as 3 dimensional in OpenFOAM. If we wish to solve a 2 dimensional
problem, we must describe a 3 dimensional mesh that is only one cell thick in the third
direction that is not solved. In Figure 3.2 we show only the back plane of the geometry,
along z = −0.5, in which the vertex numbers are numbered 0-18. The other 19 vertices
in the front plane, z = +0.5, are numbered in the same order as the back plane, as shown
in the mesh description ﬁle below:
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.6 |
5 | \\ / A nd | Web: http://www.OpenFOAM.org |
6 | \\/ M anipulation | |
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 object blockMeshDict;
14 }
15 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
16
17 convertToMeters 1;
Open∇FOAM-1.6
P-48 Examples of the use of OpenFOAM
18
19 vertices
20 (
21 (0.5 0 -0.5)
22 (1 0 -0.5)
23 (2 0 -0.5)
24 (2 0.707107 -0.5)
25 (0.707107 0.707107 -0.5)
26 (0.353553 0.353553 -0.5)
27 (2 2 -0.5)
28 (0.707107 2 -0.5)
29 (0 2 -0.5)
30 (0 1 -0.5)
31 (0 0.5 -0.5)
32 (-0.5 0 -0.5)
33 (-1 0 -0.5)
34 (-2 0 -0.5)
35 (-2 0.707107 -0.5)
36 (-0.707107 0.707107 -0.5)
37 (-0.353553 0.353553 -0.5)
38 (-2 2 -0.5)
39 (-0.707107 2 -0.5)
40 (0.5 0 0.5)
41 (1 0 0.5)
42 (2 0 0.5)
43 (2 0.707107 0.5)
44 (0.707107 0.707107 0.5)
45 (0.353553 0.353553 0.5)
46 (2 2 0.5)
47 (0.707107 2 0.5)
48 (0 2 0.5)
49 (0 1 0.5)
50 (0 0.5 0.5)
51 (-0.5 0 0.5)
52 (-1 0 0.5)
53 (-2 0 0.5)
54 (-2 0.707107 0.5)
55 (-0.707107 0.707107 0.5)
56 (-0.353553 0.353553 0.5)
57 (-2 2 0.5)
58 (-0.707107 2 0.5)
59 );
60
61 blocks
62 (
63 hex (5 4 9 10 24 23 28 29) (10 10 1) simpleGrading (1 1 1)
64 hex (0 1 4 5 19 20 23 24) (10 10 1) simpleGrading (1 1 1)
65 hex (1 2 3 4 20 21 22 23) (20 10 1) simpleGrading (1 1 1)
66 hex (4 3 6 7 23 22 25 26) (20 20 1) simpleGrading (1 1 1)
67 hex (9 4 7 8 28 23 26 27) (10 20 1) simpleGrading (1 1 1)
68 hex (15 16 10 9 34 35 29 28) (10 10 1) simpleGrading (1 1 1)
69 hex (12 11 16 15 31 30 35 34) (10 10 1) simpleGrading (1 1 1)
70 hex (13 12 15 14 32 31 34 33) (20 10 1) simpleGrading (1 1 1)
71 hex (14 15 18 17 33 34 37 36) (20 20 1) simpleGrading (1 1 1)
72 hex (15 9 8 18 34 28 27 37) (10 20 1) simpleGrading (1 1 1)
73 );
74
75 edges
76 (
77 arc 0 5 (0.469846 0.17101 -0.5)
78 arc 5 10 (0.17101 0.469846 -0.5)
79 arc 1 4 (0.939693 0.34202 -0.5)
80 arc 4 9 (0.34202 0.939693 -0.5)
81 arc 19 24 (0.469846 0.17101 0.5)
82 arc 24 29 (0.17101 0.469846 0.5)
83 arc 20 23 (0.939693 0.34202 0.5)
84 arc 23 28 (0.34202 0.939693 0.5)
85 arc 11 16 (-0.469846 0.17101 -0.5)
86 arc 16 10 (-0.17101 0.469846 -0.5)
87 arc 12 15 (-0.939693 0.34202 -0.5)
88 arc 15 9 (-0.34202 0.939693 -0.5)
89 arc 30 35 (-0.469846 0.17101 0.5)
90 arc 35 29 (-0.17101 0.469846 0.5)
91 arc 31 34 (-0.939693 0.34202 0.5)
92 arc 34 28 (-0.34202 0.939693 0.5)
93 );
94
95 patches
96 (
97 symmetryPlane down
98 (
99 (0 1 20 19)
100 (1 2 21 20)
101 (12 11 30 31)
Open∇FOAM-1.6
3.1 Flow around a cylinder P-49
102 (13 12 31 32)
103 )
104 patch right
105 (
106 (2 3 22 21)
107 (3 6 25 22)
108 )
109 symmetryPlane up
110 (
111 (7 8 27 26)
112 (6 7 26 25)
113 (8 18 37 27)
114 (18 17 36 37)
115 )
116 patch left
117 (
118 (14 13 32 33)
119 (17 14 33 36)
120 )
121 symmetryPlane cylinder
122 (
123 (10 5 24 29)
124 (5 0 19 24)
125 (16 10 29 35)
126 (11 16 35 30)
127 )
128 );
129
130 mergePatchPairs
131 (
132 );
133
134 // ************************************************************************* //
3.1.4 Boundary conditions and initial ﬁelds
Using FoamX or editing case ﬁles by hand, set the boundary conditions in accordance
with the problem description in Figure 3.1, i.e. the left boundary should be an Inlet,
the right boundary should be an Outlet and the down and cylinder boundaries should
be symmetryPlane. The top boundary conditions is chosen so that we can make the
most genuine comparison with our analytical solution which uses the assumption that
the domain is inﬁnite in the y direction. The result is that the normal gradient of U is
small along a plane coinciding with our boundary. We therefore impose the condition
that the normal component is zero, i.e. specify the boundary as a symmetryPlane, thereby
ensuring that the comparison with the analytical is reasonable.
3.1.5 Running the case
No ﬂuid properties need be speciﬁed in this problem since the ﬂow is assumed to be
incompressible and inviscid. In the system subdirectory, the controlDict speciﬁes the
control parameters for the run. Note that since we assume steady ﬂow, we only run for
1 time step:
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.6 |
5 | \\ / A nd | Web: www.OpenFOAM.org |
6 | \\/ M anipulation | |
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 location "system";
14 object controlDict;
15 }
16 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
17
18 application potentialFoam;
Open∇FOAM-1.6
P-50 Examples of the use of OpenFOAM
19
20 startFrom startTime;
21
22 startTime 0;
23
24 stopAt endTime;
25
26 endTime 1;
27
28 deltaT 1;
29
30 writeControl timeStep;
31
32 writeInterval 1;
33
34 purgeWrite 0;
35
36 writeFormat ascii;
37
38 writePrecision 6;
39
40 writeCompression uncompressed;
41
42 timeFormat general;
43
44 timePrecision 6;
45
46 runTimeModifiable yes;
47
48
49 // ************************************************************************* //
potentialFoam executes an iterative loop around the pressure equation which it solves in
order that explicit terms relating to non-orthogonal correction in the Laplacian term may
be updated in successive iterations. The number of iterations around the pressure equa-
tion is controlled by the nNonOrthogonalCorrectors keyword in controlDict. In the ﬁrst
instance we can set nNonOrthogonalCorrectors to 0 so that no loops are performed,
i.e. the pressure equation is solved once, and there is no non-orthogonal correction. The
solution is shown in Figure 3.3(a) (at t = 1, when the steady-state simulation is com-
plete). We expect the solution to show smooth streamlines passing across the domain
as in the analytical solution in Figure 3.3(c), yet there is clearly some error in the re-
gions where there is high non-orthogonality in the mesh, e.g. at the join of blocks 0, 1
and 3. The case can be run a second time with some non-orthogonal correction by set-
ting nNonOrthogonalCorrectors to 3. The solution shows smooth streamlines with no
signiﬁcant error due to non-orthogonality as shown in Figure 3.3(b).
3.1.6 Generating the analytical solution
Source code is included in the $FOAM TUTORIALS/potentialFoam/analyticalCylinder di-
rectory to generate the analytical solution for the potential ﬂow case. The velocity at any
point at a distance d and angle θ from the cylinder centre is described analytically as
Ux = U∞ 1 −
r
d
2
cos 2θ
Uy = U∞
r
d
2
sin 2θ (3.3)
where r is the cylinder radius and U∞ is the inlet ﬂow velocity. Here, θ describes the
angle subtended from the x-axis.
Let us examine some details of the source code in the analyticalCylinder directory. In
createFields.H, the velocity ﬁeld is read in using the IOobject::NO WRITE option to ensure
that the ﬁeld data can never be overwritten during execution of analyticalCylinder. The
inlet velocity and cylinder radius are taken from data read from the mesh and a ﬁeld UA
is set up to store the analytical solution:
Open∇FOAM-1.6
3.1 Flow around a cylinder P-51
(a) With no non-orthogonal correction
(b) With non-orthogonal correction
(c) Analytical solution
Figure 3.3: Streamlines of potential ﬂow
Open∇FOAM-1.6
P-52 Examples of the use of OpenFOAM
1 Info<< "Reading field U\n" << endl;
2 volVectorField U
3 (
4 IOobject
5 (
6 "U",
7 runTime.timeName(),
8 mesh,
9 IOobject::MUST_READ,
10 IOobject::NO_WRITE
11 ),
12 mesh
13 );
14
15 Info<< "Reading inlet velocity uInfX\n" << endl;
16
17 dimensionedScalar uInfX
18 (
19 "uInfx",
20 dimensionSet(0, 1, -1, 0, 0),
21 U.boundaryField()[3][0].x()
22 );
23 Info << "U at inlet = " << uInfX.value() << " m/s" << endl;
24
25 dimensionedScalar radius
26 (
27 "radius",
28 dimensionSet(0, 1, 0, 0, 0),
29 mag(U.mesh().boundary()[4].Cf()[0])
30 );
31
32 Info << "Cylinder radius = " << radius.value() << " m" << endl;
33
34 volVectorField UA
35 (
36 IOobject
37 (
38 "UA",
39 runTime.timeName(),
40 mesh,
41 IOobject::NO_READ,
42 IOobject::AUTO_WRITE
43 ),
44 U
45 );
Thea main code analyticalCylinder.C performs the following tasks:
• increments the time step by runTime++;
• generates the analytical solution for ﬁeld UA using tensor arithmetic;
• writes the solution to ﬁle by runTime.writeObjects().
1 /*---------------------------------------------------------------------------*\
2 ========= |
3 \\ / F ield | OpenFOAM: The Open Source CFD Toolbox
4 \\ / O peration |
5 \\ / A nd | Copyright (C) 1991-2009 OpenCFD Ltd.
6 \\/ M anipulation |
7 -------------------------------------------------------------------------------
8 License
9 This file is part of OpenFOAM.
10
11 OpenFOAM is free software; you can redistribute it and/or modify it
12 under the terms of the GNU General Public License as published by the
13 Free Software Foundation; either version 2 of the License, or (at your
14 option) any later version.
15
16 OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
17 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
18 FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
19 for more details.
20
21 You should have received a copy of the GNU General Public License
22 along with OpenFOAM; if not, write to the Free Software Foundation,
23 Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
24
25 Application
26 analyticalCylinder
27
Open∇FOAM-1.6
3.2 Steady turbulent ﬂow over a backward-facing step P-53
28 Description
29 Generates an analytical solution for potential flow around a cylinder.
30 Can be compared with the solution from the potentialFlow/cylinder example.
31
32 \*---------------------------------------------------------------------------*/
33
34 #include "fvCFD.H"
35
36
37 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
38
39 int main(int argc, char *argv[])
40 {
41
42 # include "setRootCase.H"
43
44 # include "createTime.H"
45 # include "createMesh.H"
46 # include "createFields.H"
47
48 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
49
50 Info << "\nEvaluating analytical solution" << endl;
51
52 volVectorField centres = UA.mesh().C();
53 volScalarField magCentres = mag(centres);
54 volScalarField theta = acos((centres & vector(1,0,0))/magCentres);
55
56 volVectorField cs2theta =
57 cos(2*theta)*vector(1,0,0)
58 + sin(2*theta)*vector(0,1,0);
59
60 UA = uInfX*(dimensionedVector(vector(1,0,0))
61 - pow((radius/magCentres),2)*cs2theta);
62
63 runTime.write();
64
65 Info<< "end" << endl;
66
67 return 0;
68 }
69
70 // ************************************************************************* //
The utility must be compiled with wmake as normal. It can then be run by typing
analyticalCylinder $FOAM RUN/potentialFoam cylinder
The analytical solution is plotted as streamlines as shown in Figure 3.3(c). Note that
diﬀerences in the analytical and numerical solutions at the top plane are due to the fact
that the analytical solution assumes an inﬁnite boundary and the numerical solution
speciﬁes a zeroGradient boundary condition at that boundary.
3.1.7 Exercise
Investigate the accuracy of the numerical solution by implementing some measure of
comparison between the numercial and analytical in analyticalCylinder.
3.2 Steady turbulent ﬂow over a backward-facing step
In this example we shall investigate steady turbulent ﬂow over a backward-facing step.
The problem description is taken from one used by Pitz and Daily in an experimental
investigation [**] against which the computed solution can be compared. This example
introduces the following OpenFOAM features for the ﬁrst time:
• generation of a mesh using blockMesh using full mesh grading capability;
• steady turbulent ﬂow.
Open∇FOAM-1.6
P-54 Examples of the use of OpenFOAM
3.2.1 Problem speciﬁcation
The problem is deﬁned as follows:
Solution domain The domain is 2 dimensional, consisting of a short inlet, a backward-
facing step and converging nozzle at outlet as shown in Figure 3.4.
84.020.6 206.0
Inlet: Ux = 10.0 m/s Outlet: p = 0 Pa
50.8 33.2
y
x
Dimensions in mm
Figure 3.4: Geometry of backward-facing step
Governing equations
• Mass continuity for incompressible ﬂow
∇ • U = 0 (3.4)
• Steady ﬂow momentum equation
∇ • (UU) + ∇ • R = −∇p (3.5)
where p is kinematic pressure and (in slightly over-simplistic terms) R =
νeff ∇U is the viscous stress term with an eﬀective kinematic viscosity νeff ,
calculated from selected transport and turbulence models.
Initial conditions U = 0 m/s, p = 0 Pa — required in OpenFOAM input ﬁles but not
necessary for the solution since the problem is steady-state.
Boundary conditions
• Inlet (left) with ﬁxed velocity U = (10, 0, 0) m/s;
• Outlet (right) with ﬁxed pressure p = 0 Pa;
• No-slip walls on other boundaries.
Transport properties
• Kinematic viscosity of air ν = µ/ρ = 18.1 × 10−6
/1.293 = 14.0 µm2
/s
Turbulence model
• Standard k − ǫ;
• Coeﬃcients: Cµ = 0.09; C1 = 1.44; C2 = 1.92; αk = 1; αǫ = 0.76923.
Solver name simpleFoam: an implementation for steady incompressible ﬂow.
Open∇FOAM-1.6
3.2 Steady turbulent ﬂow over a backward-facing step P-55
Case name pitzDaily, located in the $FOAM TUTORIALS/simpleFoam directory.
The problem is solved using simpleFoam, so-called as it is an implementation for steady
ﬂow using the SIMPLE algorithm [**]. The solver has full access to all the turbulence
models in the incompressibleTurbulenceModels library and the non-Newtonian models in-
compressibleTransportModels library of the standard OpenFOAM release.
3.2.2 Mesh generation
We expect that the ﬂow in this problem is reasonably complex and an optimum solution
will require grading of the mesh. In general, the regions of highest shear are particularly
critical, requiring a ﬁner mesh than in the regions of low shear. We can anticipate
where high shear will occur by considering what the solution might be in advance of any
calculation. At the inlet we have strong uniform ﬂow in the x direction and, as it passes
over the step, it generates shear on the ﬂuid below, generating a vortex in the bottom
half of the domain. The regions of high shear will therefore be close to the centreline of
the domain and close to the walls.
The domain is subdivided into 12 blocks as shown in Figure 3.5.
1
14
13
12
11
3
7
8
2
1
5
4 10
2
3
4
6
7
8
9
11
0 5
10
16
17
19
20
21
18
9 15
12
upperWall
outlet
0 6
inlet
lowerWall
Figure 3.5: Blocks in backward-facing step
The mesh is 3 dimensional, as always in OpenFOAM, so in Figure 3.5 we are viewing
the back plane along z = −0.5. The full set of vertices and blocks are given in the mesh
description ﬁle below:
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.6 |
5 | \\ / A nd | Web: http://www.OpenFOAM.org |
6 | \\/ M anipulation | |
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 object blockMeshDict;
14 }
15 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
16
17 convertToMeters 0.001;
18
19 vertices
20 (
21 (-20.6 0 -0.5)
22 (-20.6 3 -0.5)
23 (-20.6 12.7 -0.5)
Open∇FOAM-1.6
P-56 Examples of the use of OpenFOAM
24 (-20.6 25.4 -0.5)
25 (0 -25.4 -0.5)
26 (0 -5 -0.5)
27 (0 0 -0.5)
28 (0 3 -0.5)
29 (0 12.7 -0.5)
30 (0 25.4 -0.5)
31 (206 -25.4 -0.5)
32 (206 -8.5 -0.5)
33 (206 0 -0.5)
34 (206 6.5 -0.5)
35 (206 17 -0.5)
36 (206 25.4 -0.5)
37 (290 -16.6 -0.5)
38 (290 -6.3 -0.5)
39 (290 0 -0.5)
40 (290 4.5 -0.5)
41 (290 11 -0.5)
42 (290 16.6 -0.5)
43 (-20.6 0 0.5)
44 (-20.6 3 0.5)
45 (-20.6 12.7 0.5)
46 (-20.6 25.4 0.5)
47 (0 -25.4 0.5)
48 (0 -5 0.5)
49 (0 0 0.5)
50 (0 3 0.5)
51 (0 12.7 0.5)
52 (0 25.4 0.5)
53 (206 -25.4 0.5)
54 (206 -8.5 0.5)
55 (206 0 0.5)
56 (206 6.5 0.5)
57 (206 17 0.5)
58 (206 25.4 0.5)
59 (290 -16.6 0.5)
60 (290 -6.3 0.5)
61 (290 0 0.5)
62 (290 4.5 0.5)
63 (290 11 0.5)
64 (290 16.6 0.5)
65 );
66
67 blocks
68 (
69 hex (0 6 7 1 22 28 29 23) (18 7 1) simpleGrading (0.5 1.8 1)
70 hex (1 7 8 2 23 29 30 24) (18 10 1) simpleGrading (0.5 4 1)
71 hex (2 8 9 3 24 30 31 25) (18 13 1) simpleGrading (0.5 0.25 1)
72 hex (4 10 11 5 26 32 33 27) (180 18 1) simpleGrading (4 1 1)
73 hex (5 11 12 6 27 33 34 28) (180 9 1) edgeGrading (4 4 4 4 0.5 1 1 0.5 1 1 1 1)
74 hex (6 12 13 7 28 34 35 29) (180 7 1) edgeGrading (4 4 4 4 1.8 1 1 1.8 1 1 1 1)
75 hex (7 13 14 8 29 35 36 30) (180 10 1) edgeGrading (4 4 4 4 4 1 1 4 1 1 1 1)
76 hex (8 14 15 9 30 36 37 31) (180 13 1) simpleGrading (4 0.25 1)
77 hex (10 16 17 11 32 38 39 33) (25 18 1) simpleGrading (2.5 1 1)
78 hex (11 17 18 12 33 39 40 34) (25 9 1) simpleGrading (2.5 1 1)
79 hex (12 18 19 13 34 40 41 35) (25 7 1) simpleGrading (2.5 1 1)
80 hex (13 19 20 14 35 41 42 36) (25 10 1) simpleGrading (2.5 1 1)
81 hex (14 20 21 15 36 42 43 37) (25 13 1) simpleGrading (2.5 0.25 1)
82 );
83
84 edges
85 (
86 );
87
88 patches
89 (
90 patch inlet
91 (
92 (0 22 23 1)
93 (1 23 24 2)
94 (2 24 25 3)
95 )
96 patch outlet
97 (
98 (16 17 39 38)
99 (17 18 40 39)
100 (18 19 41 40)
101 (19 20 42 41)
102 (20 21 43 42)
103 )
104 wall upperWall
105 (
106 (3 25 31 9)
Open∇FOAM-1.6
3.2 Steady turbulent ﬂow over a backward-facing step P-57
107 (9 31 37 15)
108 (15 37 43 21)
109 )
110 wall lowerWall
111 (
112 (0 6 28 22)
113 (6 5 27 28)
114 (5 4 26 27)
115 (4 10 32 26)
116 (10 16 38 32)
117 )
118 empty frontAndBack
119 (
120 (22 28 29 23)
121 (23 29 30 24)
122 (24 30 31 25)
123 (26 32 33 27)
124 (27 33 34 28)
125 (28 34 35 29)
126 (29 35 36 30)
127 (30 36 37 31)
128 (32 38 39 33)
129 (33 39 40 34)
130 (34 40 41 35)
131 (35 41 42 36)
132 (36 42 43 37)
133 (0 1 7 6)
134 (1 2 8 7)
135 (2 3 9 8)
136 (4 5 11 10)
137 (5 6 12 11)
138 (6 7 13 12)
139 (7 8 14 13)
140 (8 9 15 14)
141 (10 11 17 16)
142 (11 12 18 17)
143 (12 13 19 18)
144 (13 14 20 19)
145 (14 15 21 20)
146 )
147 );
148
149 mergePatchPairs
150 (
151 );
152
153 // ************************************************************************* //
A major feature of this problem is the use of the full mesh grading capability of
blockMesh that is described in section 5.3.1 of the User Guide. The user can see that
blocks 4,5 and 6 use the full list of 12 expansion ratios. The expansion ratios correspond
to each edge of the block, the ﬁrst 4 to the edges aligned in the local x1 direction, the
second 4 to the edges in the local x2 direction and the last 4 to the edges in the local x3
direction. In blocks 4, 5, and 6, the ratios are equal for all edges in the local x1 and x3
directions but not for the edges in the x2 direction that corresponds in all blocks to the
global y. If we consider the ratios used in relation to the block deﬁnition in section 5.3.1
of the User Guide, we realize that diﬀerent gradings have been prescribed along the left
and right edges in blocks 4,5 and 6 in Figure 3.5. The purpose of this diﬀerential grading
is to generate a ﬁne mesh close to the most critical region of ﬂow, the corner of the step,
and allow it to expand into the rest of the domain.
The mesh can be generated using blockMesh from the command line or from within
FoamX and viewed as described in previous examples.
3.2.3 Boundary conditions and initial ﬁelds
The case ﬁles can be viewed, or edited from within FoamX or by hand. In this case, we
are required to set the initial and boundary ﬁelds for velocity U, pressure p, turbulent
kinetic energy k and dissipation rate ε. The boundary conditions can be speciﬁed by
setting the physical patch types in FoamX: the upper and lower walls are set to Wall, the
left patch to Inlet and the right patch to Outlet. These physical boundary conditions
Open∇FOAM-1.6
P-58 Examples of the use of OpenFOAM
require us to specify a ﬁxedValue at the inlet on U, k and ε. U is given in the problem
speciﬁcation, but the values of k and ǫ must be chosen by the user in a similar manner to
that described in section 2.1.8.1 of the User Guide. We assume that the inlet turbulence
is isotropic and estimate the ﬂuctuations to be 5% of U at the inlet. We have
U′
x = U′
y = U′
z =
5
100
10 = 0.5 m/s (3.6)
and
k =
3
2
(0.5)2
= 0.375 m2
/s2
(3.7)
If we estimate the turbulent length scale l to be 10% of the width of the inlet then
ε =
C0.75
µ k1.5
l
=
0.090.75
0.3751.5
0.1 × 25.4 × 10−3
= 14.855 m2
/s3
(3.8)
At the outlet we need only specify the pressure p = 0Pa.
3.2.4 Case control
The choices of fvSchemes are as follows: the timeScheme should be SteadyState; the
gradScheme and laplacianScheme should be set as default to Gauss; and, the divScheme
should be set to UD to ensure boundedness.
Special attention should be paid to the settings of fvTolerances. Although the top
level simpleFoam code contains only equations for p and U, the turbulent model solves
equations for k, ε and R, and tolerance settings are required for all 5 equations. A
solverTolerance of 10−5
and solverRelativeTolerance of 0.1 are acceptable for all
variables with the exception of p when 10−6
and 0.01 are recommended. Under-relaxation
of the solution is required since the problem is steady. A relaxationFactor of 0.7 is
acceptable for U, k, ε and R but 0.3 is required for p to avoid numerical instability.
Finally, in controlDict, the time step deltaT should be set to 1 since in steady state
cases such as this is eﬀectively an iteration counter. With beneﬁt of hindsight we know
that the solution requires 1000 iterations reach reasonable convergence, hence endTime is
set to 1000. Ensure that the writeFrequency is suﬃciently high, e.g. 50, that you will
not ﬁll the hard disk with data during run time.
3.2.5 Running the case and post-processing
Run the case and post-process the results. After a few iterations, e.g. 50, a vortex develops
beneath the corner of the step that is the height of the step but narrow in the x-direction
as shown by the vector plot of velocities is shown Figure 3.6(a). Over several iterations
the vortex stretches in the x-direction from the step to the outlet until at 1000 iterations
the system reaches a steady-state in which the vortex is fully developed as shown in
Figure 3.6(b-c).
3.3 Supersonic ﬂow over a forward-facing step
In this example we shall investigate supersonic ﬂow over a forward-facing step. The
problem description involves a ﬂow of Mach 3 at an inlet to a rectangular geometry with
a step near the inlet region that generates shock waves.
This example introduces the following OpenFOAM features for the ﬁrst time:
• supersonic ﬂow;
Open∇FOAM-1.6
3.3 Supersonic ﬂow over a forward-facing step P-59
(a) Velocity vectors after 50 iterations
(b) Velocity vectors at 1000 iterations
(c) Streamlines at 1000 iterations
Figure 3.6: Development of a vortex in the backward-facing step.
3.3.1 Problem speciﬁcation
The problem is deﬁned as follows:
Solution domain The domain is 2 dimensional and consists of a short inlet section
followed by a forward-facing step of 20% the height of the section as shown in
Figure 3.7
y
0.2
Inlet: Ux = Mach 3, p = 1 N/m2
x
1.0
0.6 2.4
Dimensions in m
Figure 3.7: Geometry of the forward step geometry
Governing equations
• Mass continuity
∂ρ
∂t
+ ∇ • (ρU) = 0 (3.9)
• Ideal gas
p = ρRT (3.10)
Open∇FOAM-1.6
P-60 Examples of the use of OpenFOAM
• Momentum equation for Newtonian ﬂuid
∂ρU
∂t
+ ∇ • (ρUU) − ∇ • µ∇U = −∇p (3.11)
• Energy equation for ﬂuid (ignoring some viscous terms), e = CvT, with Fourier’s
Law q = −k∇T
∂ρe
∂t
+ ∇ • (ρUe) − ∇ •
k
Cv
∇e = p∇ • U (3.12)
Initial conditions U = 0 m/s, p = 1 Pa, T = 1 K.
Boundary conditions
• Inlet (left) with ﬁxedValue for velocity U = 3 m/s = Mach 3, pressure p = 1 Pa
and temperature T = 1 K;
• Outlet (right) with zeroGradient on U, p and T;
• No-slip adiabatic wall (bottom);
• Symmetry plane (top).
Transport properties
• Dynamic viscosity of air µ = 18.1µPa s
Thermodynamic properties
• Speciﬁc heat at constant volume Cv = 1.78571 J/kg K
• Gas constant R = 0.714286 J/kg K
• Conductivity k = 32.3 µW/m K
Case name forwardStep case located in the $FOAM TUTORIALS/sonicFoam directory.
Solver name sonicFoam: an implementation for compressible trans-sonic/supersonic
laminar gas ﬂow.
The case is designed such that the speed of sound of the gas c =
√
γRT = 1 m/s, the
consequence being that the velocities are directly equivalent to the Mach number, e.g.
the inlet velocity of 3 m/s is equivalent to Mach 3. This speed of sound calculation can
be veriﬁed using the relationship for a perfect gas, Cp − Cv = R, i.e. the ratio of speciﬁc
heats
γ = Cp/Cv =
R
Cv
+ 1 (3.13)
3.3.2 Mesh generation
The mesh used in this case is relatively simple, speciﬁed with uniform rectangular cells
of length 0.06 m in the x direction and 0.05 m in the y direction. The geometry can
simply be divided into 3 blocks, one below the top of the step, and two above the step,
one either side of the step front. The full set of vertices and blocks are given in the mesh
description ﬁle below:
Open∇FOAM-1.6
3.3 Supersonic ﬂow over a forward-facing step P-61
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.6 |
5 | \\ / A nd | Web: http://www.OpenFOAM.org |
6 | \\/ M anipulation | |
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 object blockMeshDict;
14 }
15 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
16
17 convertToMeters 1;
18
19 vertices
20 (
21 (0 0 -0.05)
22 (0.6 0 -0.05)
23 (0 0.2 -0.05)
24 (0.6 0.2 -0.05)
25 (3 0.2 -0.05)
26 (0 1 -0.05)
27 (0.6 1 -0.05)
28 (3 1 -0.05)
29 (0 0 0.05)
30 (0.6 0 0.05)
31 (0 0.2 0.05)
32 (0.6 0.2 0.05)
33 (3 0.2 0.05)
34 (0 1 0.05)
35 (0.6 1 0.05)
36 (3 1 0.05)
37 );
38
39 blocks
40 (
41 hex (0 1 3 2 8 9 11 10) (25 10 1) simpleGrading (1 1 1)
42 hex (2 3 6 5 10 11 14 13) (25 40 1) simpleGrading (1 1 1)
43 hex (3 4 7 6 11 12 15 14) (100 40 1) simpleGrading (1 1 1)
44 );
45
46 edges
47 (
48 );
49
50 patches
51 (
52 patch inlet
53 (
54 (0 8 10 2)
55 (2 10 13 5)
56 )
57 patch outlet
58 (
59 (4 7 15 12)
60 )
61 symmetryPlane bottom
62 (
63 (0 1 9 8)
64 )
65 symmetryPlane top
66 (
67 (5 13 14 6)
68 (6 14 15 7)
69 )
70 patch obstacle
71 (
72 (1 3 11 9)
73 (3 4 12 11)
74 )
75 );
76
77 mergePatchPairs
78 (
79 );
80
81 // ************************************************************************* //
Open∇FOAM-1.6
P-62 Examples of the use of OpenFOAM
3.3.3 Running the case
The case approaches a steady-state at some time after 5 s. The results for pressure at
10 s are shown in Figure 3.8. The results clearly show discontinuities in pressure, i.e.
shock waves, emanating from ahead of the base of the step.
6
8
10
12
4
2
14
pressure
Shock fronts
Figure 3.8: Shock fronts in the forward step problem
3.3.4 Exercise
The user can examine the eﬀect on the solution of increasing the inlet velocity.
3.4 Decompression of a tank internally pressurised
with water
In this example we shall investigate a problem of rapid opening of a pipe valve close to
a pressurised liquid-ﬁlled tank. The prominent feature of the result in such cases is the
propagation of pressure waves which must therefore be modelled as a compressible liquid.
This tutorial introduces the following OpenFOAM features for the ﬁrst time:
• Mesh reﬁnement
• Pressure waves in liquids
3.4.1 Problem speciﬁcation
Solution domain The domain is 2 dimensional and consists of a tank with a small
outﬂow pipe as shown in Figure 3.9
Governing equations This problem requires a model for compressibility ψ in the ﬂuid
in order to be able to resolve waves propagating at a ﬁnite speed. A barotropic
relationship is used to relate density ρ and pressure p are related to ψ.
• Mass continuity
∂ρ
∂t
+ ∇ • (ρU) = 0 (3.14)
Open∇FOAM-1.6
3.4 Decompression of a tank internally pressurised with water P-63
x
y
Outlet: p = 0 bar
24050
10
50
100
orientation of horizontal x-axis
Note:
Dimensions in mm
image is rotated through -90◦
from normal
Figure 3.9: Geometry of a tank with outﬂow pipe
• The barotropic relationship
∂ρ
∂p
=
ρ
K
= ψ (3.15)
where K is the bulk modulus
• Equation 3.15 is linearised as
ρ ≈ ρ0 + ψ (p − p0) (3.16)
where ρ0 and p0 are the reference density and pressure respectively such that
ρ(p0) = ρ0.
• Momentum equation for Newtonian ﬂuid
∂ρU
∂t
+ ∇ • (ρUU) − ∇ • µ∇U = −∇p (3.17)
Boundary conditions Using FoamX the following physical boundary conditions can
be set:
• outerWall is speciﬁed the wall condition;
• axis is speciﬁed as the symmetryPlane;
• nozzle is speciﬁed as a pressureOutlet where p = 0 bar.
• front and back boundaries are speciﬁed as empty.
Initial conditions U = 0 m/s, p = 100 bar.
Transport properties
• Dynamic viscosity of water µ = 1.0 mPa s
Thermodynamic properties
• Density of water ρ = 1000 kg/m3
• Reference pressure p0 = 1 bar
• Compressibility of water ψ = 4.54 × 10−7
s2
/m2
Solver name sonicLiquidFoam: a compressible sonic laminar liquid ﬂow code.
Case name decompressionTank case located in the $FOAM TUTORIALS/sonicLiquidFoam
directory.
Open∇FOAM-1.6
P-64 Examples of the use of OpenFOAM
3.4.2 Mesh Generation
The full geometry is modelled in this case; the set of vertices and blocks are given in the
mesh description ﬁle below:
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.6 |
5 | \\ / A nd | Web: http://www.OpenFOAM.org |
6 | \\/ M anipulation | |
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 object blockMeshDict;
14 }
15 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
16
17 convertToMeters 0.1;
18
19 vertices
20 (
21 (0 0 -0.1)
22 (1 0 -0.1)
23 (0 0.5 -0.1)
24 (1 0.5 -0.1)
25 (1.5 0.5 -0.1)
26 (0 0.6 -0.1)
27 (1 0.6 -0.1)
28 (1.5 0.6 -0.1)
29 (0 3 -0.1)
30 (1 3 -0.1)
31 (0 0 0.1)
32 (1 0 0.1)
33 (0 0.5 0.1)
34 (1 0.5 0.1)
35 (1.5 0.5 0.1)
36 (0 0.6 0.1)
37 (1 0.6 0.1)
38 (1.5 0.6 0.1)
39 (0 3 0.1)
40 (1 3 0.1)
41 );
42
43 blocks
44 (
45 hex (0 1 3 2 10 11 13 12) (30 20 1) simpleGrading (1 1 1)
46 hex (2 3 6 5 12 13 16 15) (30 5 1) simpleGrading (1 1 1)
47 hex (3 4 7 6 13 14 17 16) (25 5 1) simpleGrading (1 1 1)
48 hex (5 6 9 8 15 16 19 18) (30 95 1) simpleGrading (1 1 1)
49 );
50
51 edges
52 (
53 );
54
55 patches
56 (
57 wall outerWall
58 (
59 (0 1 11 10)
60 (1 3 13 11)
61 (3 4 14 13)
62 (7 6 16 17)
63 (6 9 19 16)
64 (9 8 18 19)
65 )
66 symmetryPlane axis
67 (
68 (0 10 12 2)
69 (2 12 15 5)
70 (5 15 18 8)
71 )
72 patch nozzle
73 (
74 (4 7 17 14)
75 )
76 empty back
77 (
Open∇FOAM-1.6
3.4 Decompression of a tank internally pressurised with water P-65
78 (0 2 3 1)
79 (2 5 6 3)
80 (3 6 7 4)
81 (5 8 9 6)
82 )
83 empty front
84 (
85 (10 11 13 12)
86 (12 13 16 15)
87 (13 14 17 16)
88 (15 16 19 18)
89 )
90 );
91
92 mergePatchPairs
93 (
94 );
95
96 // ************************************************************************* //
In order to improve the numerical accuracy, we shall use the reference level of 1 bar for
the pressure ﬁeld. Note that both the internal ﬁeld level and the boundary conditions are
oﬀset by the reference level.
3.4.3 Preparing the Run
Before we commence the setup of the calculation, we need to consider the characteristic
velocity of the phenomenon we are trying to capture. In the case under consideration,
the ﬂuid velocity will be very small, but the pressure wave will propagate with the speed
of sound in water. The speed of sound is calculated as:
c =
1
ψ
=
1
4.54 × 10−7
= 1483.2m/s. (3.18)
For the mesh described above, the characteristic mesh size is approximately 2 mm (note
the scaling factor of 0.1 in the blockMeshDict ﬁle). Using
Co =
U ∆t
∆x
(3.19)
a reasonable time step is around ∆t = 5 × 10−7
s, giving the Co number of 0.35, based on
the speed of sound. Also, note that the reported Co number by the code (associated with
the convective velocity) will be two orders of magnitude smaller. As we are interested in
the pressure wave propagation, we shall set the simulation time to 0.25 ms. For reference,
the controlDict ﬁle is quoted below.
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.6 |
5 | \\ / A nd | Web: www.OpenFOAM.org |
6 | \\/ M anipulation | |
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 location "system";
14 object controlDict;
15 }
16 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
17
18 application sonicLiquidFoam;
19
20 startFrom startTime;
21
22 startTime 0;
23
Open∇FOAM-1.6
P-66 Examples of the use of OpenFOAM
24 stopAt endTime;
25
26 endTime 0.0001;
27
28 deltaT 5e-07;
29
30 writeControl timeStep;
31
32 writeInterval 20;
33
34 purgeWrite 0;
35
36 writeFormat ascii;
37
38 writePrecision 6;
39
40 writeCompression compressed;
41
42 timeFormat general;
43
44 timePrecision 6;
45
46 runTimeModifiable yes;
47
48
49 // ************************************************************************* //
3.4.4 Running the case
0
10
20
30
40
50
60
70
80
90
100
(a) At t = 50 µs (b) At t = 100 µs (c) At t = 150 µs
Pressure, p
(bar)
Figure 3.10: Propagation of pressure waves
The user can run the case and view results in dxFoam. The liquid ﬂows out through
the nozzle causing a wave to move along the nozzle. As it reaches the inlet to the tank,
some of the wave is transmitted into the tank and some of it is reﬂected. While a wave
is reﬂected up and down the inlet pipe, the waves transmitted into the tank expand and
propagate through the tank. In Figure 3.10, the pressures are shown as contours so that
the wave fronts are more clearly deﬁned than if plotted as a normal isoline plot.
If the simulation is run for a long enough time for the reﬂected wave to return to
the pipe, we can see that negative absolute pressure is detected. The modelling permits
this and has some physical basis since liquids can support tension, i.e. negative pressures.
Open∇FOAM-1.6
3.5 Magnetohydrodynamic ﬂow of a liquid P-67
In reality, however, impurities or dissolved gases in liquids act as sites for cavitation,
or vapourisation/boiling, of the liquid due to the low pressure. Therefore in practical
situations, we generally do not observe pressures falling below the vapourisation pressure
of the liquid; not at least for longer than it takes for the cavitation process to occur.
3.4.5 Improving the solution by reﬁning the mesh
0
10
20
30
40
50
60
70
80
90
100
(a) At t = 50 µs (b) At t = 100 µs (c) At t = 150 µs
Pressure, p
(bar)
Figure 3.11: Propagation of pressure waves with reﬁned mesh
Looking at the evolution of the resulting pressure ﬁeld in time, we can clearly see the
propagation of the pressure wave into the tank and numerous reﬂections from the inside
walls. It is also obvious that the pressure wave is smeared over a number of cells. We shall
now reﬁne the mesh and reduce the time step to obtain a sharper front resolution. Simply
edit the blockMeshDict and increase the number of cells by a factor of 4 in the x and y
directions, i.e. block 0 becomes (120 80 1) from (30 20 1) and so on. Run blockMesh
on this ﬁle. In addition, in order to maintain a Courant number below 1, the time step
must be reduced accordingly to ∆t = 10−7
s. The second simulation gives considerably
better resolution of the pressure waves as shown in Figure 3.11.
3.5 Magnetohydrodynamic ﬂow of a liquid
In this example we shall investigate an ﬂow of an electrically-conducting liquid through
a magnetic ﬁeld. The problem is one belonging to the branch of ﬂuid dynamics known
as magnetohydrodynamics (MHD) that uses mhdFoam.
3.5.1 Problem speciﬁcation
The problem is known as the Hartmann problem, chosen as it contains an analytical
solution with which mhdFoam can be validated. It is deﬁned as follows:
Open∇FOAM-1.6
P-68 Examples of the use of OpenFOAM
Solution domain The domain is 2 dimensional and consists of ﬂow along two parallel
plates as shown in Fig. 3.12.
y
x
2
20
Outlet: p = 0 barInlet: Ux = 1 m/s
By = 20 T
Figure 3.12: Geometry of the Hartmann problem
Governing equations
• Mass continuity for incompressible ﬂuid
∇ • U = 0 (3.20)
• Momentum equation for incompressible ﬂuid
∂U
∂t
+∇ • (UU)+∇ • (2BΓBUB)+∇ • (νU)+∇ (ΓBUB •
• B) = −∇p (3.21)
where B is the magnetic ﬂux density, ΓBU = (2µρ)−1
.
• Maxwell’s equations
∇ × E = −
∂B
∂t
(3.22)
where E is the electric ﬁeld strength.
∇ • B = 0 (3.23)
∇ × H = J +
∂D
∂t
= J (3.24)
assuming ∂D/∂t ≪ J. Here, H is the magnetic ﬁeld strength, J is the current
density and D is the electric ﬂux density.
• Charge continuity
∇ • J = 0 (3.25)
• Constitutive law
B = µH (3.26)
• Ohm’s law
J = σ (E + U × B) (3.27)
• Combining Equation 3.22, Equation 3.24, Equation 3.27, and taking the curl
∂B
∂t
+ ∇ • (UB) − ∇ • (φBU) − ∇ • (ΓBB) = 0 (3.28)
Open∇FOAM-1.6
3.5 Magnetohydrodynamic ﬂow of a liquid P-69
Boundary conditions
• inlet is speciﬁed the inlet condition with ﬁxed velocity U = (1, 0, 0) m/s;
• outlet is speciﬁed as the outlet with with ﬁxed pressure p = 0 Pa;
• upperWall is speciﬁed as a wall where B = (0, 20, 0) T.
• lowerWall is speciﬁed as a wall where B = (0, 20, 0) T.
• front and back boundaries are speciﬁed as empty.
Initial conditions U = 0 m/s, p = 100 Pa, B = (0, 20, 0) T.
Transport properties
• Kinematic viscosity ν = 1 Pa s
• Density ρ = 1 kg m/s
• Electrical conductivity σ = 1 (Ω m)−1
• Permeability µ = 1 H/m
Solver name mhdFoam: an incompressible laminar magneto-hydrodynamics code.
Case name hartmann case located in the $FOAM TUTORIALS/mhdFoam directory.
3.5.2 Mesh generation
The geometry is simply modelled with 100 cells in the x-direction and 40 cells in the
y-direction; the set of vertices and blocks are given in the mesh description ﬁle below:
1 /*--------------------------------*- C++ -*----------------------------------*\
2 | ========= | |
3 | \\ / F ield | OpenFOAM: The Open Source CFD Toolbox |
4 | \\ / O peration | Version: 1.6 |
5 | \\ / A nd | Web: http://www.OpenFOAM.org |
6 | \\/ M anipulation | |
7 \*---------------------------------------------------------------------------*/
8 FoamFile
9 {
10 version 2.0;
11 format ascii;
12 class dictionary;
13 object blockMeshDict;
14 }
15 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
16
17 convertToMeters 1;
18
19 vertices
20 (
21 (0 -1 0)
22 (20 -1 0)
23 (20 1 0)
24 (0 1 0)
25 (0 -1 0.1)
26 (20 -1 0.1)
27 (20 1 0.1)
28 (0 1 0.1)
29 );
30
31 blocks
32 (
33 hex (0 1 2 3 4 5 6 7) (100 40 1) simpleGrading (1 1 1)
34 );
35
36 edges
37 (
38 );
39
40 patches
41 (
Open∇FOAM-1.6
P-70 Examples of the use of OpenFOAM
42 patch inlet
43 (
44 (0 4 7 3)
45 )
46 patch outlet
47 (
48 (2 6 5 1)
49 )
50 patch lowerWall
51 (
52 (1 5 4 0)
53 )
54 patch upperWall
55 (
56 (3 7 6 2)
57 )
58 empty frontAndBack
59 (
60 (0 3 2 1)
61 (4 5 6 7)
62 )
63 );
64
65 mergePatchPairs
66 (
67 );
68
69 // ************************************************************************* //
3.5.3 Running the case
The user can run the case and view results in dxFoam. It is also useful at this stage to run
the Ucomponents utility to convert the U vector ﬁeld into individual scalar components.
MHD ﬂow is governed by, amongst other things, the Hartmann number which is a measure
of the ratio of electromagnetic body force to viscous force
M = BL
σ
ρν
(3.29)
where L is the characteristic length scale. In this case with By = 20 T, M = 20 and
the electromagnetic body forces dominate the viscous forces. Consequently with the ﬂow
fairly steady at t = 2 s the velocity proﬁle is almost planar, viewed at a cross section
midway along the domain x = 10 m. The user can plot a graph of the proﬁle of Ux in
dxFoam. Now the user should reduce the magnetic ﬂux density B to 1 Tand re-run the
code and Ucomponents. In this case, M = 1 and the electromagnetic body forces no longer
dominate. The velocity proﬁle consequently takes on the parabolic form, characteristic
of Poiseuille ﬂow as shown in Figure 3.13. To validate the code the analytical solution
for the velocity proﬁle Ux is superimposed in Figure 3.13, given by:
Ux(y)
Ux(0)
=
cosh M − cosh M(y/L)
cosh M − 1
(3.30)
where the characteristic length L is half the width of the domain, i.e. 1 m.
Open∇FOAM-1.6
3.5 Magnetohydrodynamic ﬂow of a liquid P-71
0.0 1.0
-1.0
0.0
+1.0
y (m)
0.5 1.5
By = 20 T
Ux (m/s)
By = 1 T
Figure 3.13: Velocity proﬁle in the Hartmann problem for By = 1 T and By = 20 T.
Open∇FOAM-1.6
P-72 Examples of the use of OpenFOAM
Open∇FOAM-1.6
Index P-73
Index
Symbols Numbers A B C D E F G H I J K L M N O P Q R S T U V W X Z
Symbols
*
tensor member function, P-25
+
tensor member function, P-25
-
tensor member function, P-25
/
tensor member function, P-25
/*...*/
C++ syntax, U-78
//
C++ syntax, U-78
OpenFOAM ﬁle syntax, U-102
# include
C++ syntax, U-72, U-78
&
tensor member function, P-25
&&
tensor member function, P-25
^
tensor member function, P-25
<LESmodel>Coeffs keyword, U-179
<RASModel>Coeffs keyword, U-179
<delta>Coeffs keyword, U-179
cellSet utility, U-90
faceSet utility, U-90
pointSet utility, U-90
0.000000e+00 directory, U-102
1-dimensional mesh, U-126
1D mesh, U-126
2-dimensional mesh, U-126
2D mesh, U-126
Numbers
0 directory, U-102
A
access functions, P-23
addLayersControls keyword, U-142
adiabaticFlameT utility, U-93
adjustableRunTime
keyword entry, U-60, U-109
adjustTimeStep keyword, U-60
agglomerator keyword, U-119
algorithms tools, U-94
alphaContactAngle
boundary condition, U-58
analytical solution, P-45
anisotropicFilter model, U-98
Annotation window panel, U-26, U-163
ansysToFoam utility, U-89
APIfunctions model, U-97
applications, U-69
Apply button, U-160, U-164
applyBoundaryLayer utility, U-89
applyWallFunctionBoundaryConditions utility,
U-89
arbitrarily unstructured, P-31
arc
keyword entry, U-136
arc keyword, U-135
ascii
keyword entry, U-109
attachMesh utility, U-90
Auto Accept button, U-163
autoMesh
library, U-95
autoPatch utility, U-90
autoReﬁneMesh utility, U-91
axes
right-handed, U-134
right-handed rectangular Cartesian, P-15,
U-20
axi-symmetric cases, U-131, U-139
axi-symmetric mesh, U-126
B
background
process, U-26, U-81
backward
keyword entry, U-116
Backward diﬀerencing, P-39
barotropicCompressibilityModels
library, U-97
Open∇FOAM-1.6
P-74 Index
basicMultiComponentMixture model, U-96,
U-176
basicThermophysicalModels
library, U-96
binary
keyword entry, U-109
BirdCarreau model, U-99
blended diﬀerencing, P-38
block
expansion ratio, U-136
block keyword, U-135
blockMesh solver, P-47
blockMesh utility, U-38, U-89, U-132
blockMesh executable
vertex numbering, U-136
blockMeshDict
dictionary, U-20, U-22, U-37, U-49, U-132,
U-140
blocks keyword, U-22, U-32, U-136
boundaries, U-128
boundary, U-128
boundary
dictionary, U-125, U-132
boundary condition
alphaContactAngle, U-58
calculated, U-132
cyclic, U-131
directionMixed, U-132
empty, P-63, P-69, U-20, U-126, U-131
ﬁxedGradient, U-132
ﬁxedValue, U-132
ﬂuxCorrectedVelocity, U-133
inlet, P-69
inletOutlet, U-133
mixed, U-132
movingWallVelocity, U-133
outlet, P-69
outletInlet, U-133
partialSlip, U-133
patch, U-131
pressureDirectedInletVelocity, U-133
pressureInletVelocity, U-133
pressureOutlet, P-63
pressureTransmissive, U-133
processor, U-131
setup, U-22
slip, U-133
supersonicFreeStream, U-133
surfaceNormalFixedValue, U-133
symmetryPlane, P-63, U-131
totalPressure, U-133
turbulentInlet, U-133
wall, U-41
wall, P-63, P-69, U-58, U-131
wallBuoyantPressure, U-133
wedge, U-126, U-131, U-139
zeroGradient, U-132
boundary conditions, P-43
Dirichlet, P-43
inlet, P-44
Neumann, P-43
no-slip impermeable wall, P-44
outlet, P-44
physical, P-44
symmetry plane, P-44
boundaryField keyword, U-22, U-106
boundaryFoam solver, U-85
bounded
keyword entry, U-114, U-115
boxToCell keyword, U-59
boxTurb utility, U-89
breaking of a dam, U-56
bubbleFoam solver, U-86
buoyantBoussinesqPisoFoam solver, U-87
buoyantBoussinesqSimpleFoam solver, U-87
buoyantPisoFoam solver, U-87
buoyantSimpleFoam solver, U-87
buoyantSimpleRadiationFoam solver, U-87
button
Apply, U-160, U-164
Auto Accept, U-163
Choose Preset, U-162
Delete, U-160
Edit Color Map, U-161
Enable Line Series, U-36
Orientation Axes, U-26, U-163
Rescale to Data Range, U-28
Reset, U-160
Set Solid Color, U-162
Update GUI, U-28, U-161
Use Parallel Projection, U-25
Use parallel projection, U-163
C
C++ syntax
/*...*/, U-78
//, U-78
# include, U-72, U-78
cacheAgglomeration keyword, U-120
calculated
boundary condition, U-132
cAlpha keyword, U-62
cases, U-101
castellatedMesh keyword, U-142
castellatedMeshControls
dictionary, U-143, U-145
castellatedMeshControls keyword, U-142
cavitatingFoam solver, U-86
Open∇FOAM-1.6
Index P-75
cavity ﬂow, U-19
CEI ARCH
environment variable, U-169
CEI HOME
environment variable, U-169
cell
expansion ratio, U-136
cell class, P-31
cell
keyword entry, U-170
cellPoint
keyword entry, U-170
cellPointFace
keyword entry, U-170
cells
dictionary, U-132
central diﬀerencing, P-38
cfdTools tools, U-95
cfx4ToFoam utility, U-89, U-149
changeDictionary utility, U-89
channelFoam solver, U-85
Chart Options window, U-36
checkMesh utility, U-90, U-151
chemistryModel
library, U-97
chemistryModel model, U-97
chemistrySolver model, U-97
chemkinToFoam utility, U-93
Choose Preset button, U-162
chtMultiRegionFoam solver, U-87
Chung
library, U-97
class
cell, P-31
dimensionSet, P-25, P-32, P-33
face, P-31
ﬁniteVolumeCalculus, P-33
ﬁniteVolumeMethod, P-33
fvMesh, P-31
fvSchemes, P-36
fvc, P-36
fvm, P-36
pointField, P-31
polyBoundaryMesh, P-31
polyMesh, P-31, U-123, U-125
polyPatchList, P-31
polyPatch, P-31
scalarField, P-29
scalar, P-23
slice, P-31
symmTensorField, P-29
symmTensorThirdField, P-29
tensorField, P-29
tensorThirdField, P-29
tensor, P-23
vectorField, P-29
vector, P-23, U-105
word, P-25, P-31
class keyword, U-103
clockTime
keyword entry, U-109
cloud keyword, U-171
cmptAv
tensor member function, P-25
Co utility, U-91
coalChemistryFoam solver, U-88
coalCombustion
library, U-95
cofactors
tensor member function, P-25
coldEngineFoam solver, U-87
collapseEdges utility, U-91
Color By menu, U-162
Color Legend window, U-30
Color Legend window panel, U-162
Color Scale window panel, U-162
combinePatchFaces utility, U-91
comments, U-78
compressed
keyword entry, U-109
compressibleInterDyMFoam solver, U-86
compressibleInterFoam solver, U-86
compressibleLESModels
library, U-99
compressibleRASModels
library, U-98
constant directory, U-102, U-175
constLaminarFlameSpeed model, U-97
constTransport model, U-97, U-176
containers tools, U-94
continuum
mechanics, P-15
control
of time, U-108
controlDict
dictionary, P-65, U-23, U-32, U-42, U-51,
U-60, U-102, U-155
controlDict ﬁle, P-49
convection, see divergence, P-38
convergence, U-40
conversion
library, U-96
convertToMeters keyword, U-134, U-135
coordinate
system, P-15
coordinate system, U-20
corrected
keyword entry, U-114, U-115
Open∇FOAM-1.6
P-76 Index
Courant number, P-42, U-24
cpuTime
keyword entry, U-109
Crank Nicholson
temporal discretisation, P-42
CrankNicholson
keyword entry, U-116
createBaﬄes utility, U-90
createPatch utility, U-90
createTurbulenceFields utility, U-92
cross product, see tensor, vector cross product
CrossPowerLaw
keyword entry, U-59
CrossPowerLaw model, U-99
cubeRootVolDelta model, U-98
cubicCorrected
keyword entry, U-116
cubicCorrection
keyword entry, U-113
curl, P-37
curl
fvc member function, P-37
Current Time Controls menu, U-28, U-161
curve keyword, U-171
cyclic
boundary condition, U-131
cyclic
keyword entry, U-130
cylinder
ﬂow around a, P-45
D
d2dt2
fvc member function, P-37
fvm member function, P-37
dam
breaking of a, U-56
db tools, U-94
ddt
fvc member function, P-37
fvm member function, P-37
DeardorﬀDiﬀStress model, U-99
debug keyword, U-142
decomposePar utility, U-81, U-82, U-93
decomposeParDict
dictionary, U-81
decomposition
of ﬁeld, U-81
of mesh, U-81
decompositionMethods
library, U-96
decompression of a tank, P-62
defaultFieldValues keyword, U-59
deformedGeom utility, U-90
Delete button, U-160
delta keyword, U-83, U-179
deltaT keyword, U-108
dependencies, U-72
dependency lists, U-72
det
tensor member function, P-25
determinant, see tensor, determinant
dev
tensor member function, P-25
diag
tensor member function, P-25
diagonal
keyword entry, U-119
DIC
keyword entry, U-119
DICGaussSeidel
keyword entry, U-119
dictionary
LESProperties, U-179
PISO, U-25
blockMeshDict, U-20, U-22, U-37, U-49,
U-132, U-140
boundary, U-125, U-132
castellatedMeshControls, U-143, U-145
cells, U-132
controlDict, P-65, U-23, U-32, U-42, U-51,
U-60, U-102, U-155
decomposeParDict, U-81
faces, U-125, U-132
fvSchemes, U-61, U-102, U-110, U-111
fvSolution, U-102, U-117
mechanicalProperties, U-51
neighbour, U-125
owner, U-125
points, U-125, U-132
thermalProperties, U-51
thermophysicalProperties, U-175
transportProperties, U-23, U-39, U-42
turbulenceProperties, U-42, U-60, U-178
dieselEngineFoam solver, U-87
dieselFoam solver, U-87
dieselMixture model, U-96, U-176
dieselSpray
library, U-95
diﬀerencing
Backward, P-39
blended, P-38
central, P-38
Euler implicit, P-39
Gamma, P-38
MINMOD, P-38
SUPERBEE, P-38
upwind, P-38
Open∇FOAM-1.6
Index P-77
van Leer, P-38
DILU
keyword entry, U-119
dimension
checking in OpenFOAM, P-25, U-105
dimensional units, U-105
dimensioned<Type> template class, P-25
dimensionedTypes tools, U-94
dimensions keyword, U-22, U-106
dimensionSet class, P-25, P-32, P-33
dimensionSet tools, U-94
direct numerical simulation, U-61
directionMixed
boundary condition, U-132
directory
0.000000e+00, U-102
0, U-102
Make, U-73
constant, U-102, U-175
ﬂuentInterface, U-166
polyMesh, U-102, U-125
processorN, U-82
run, U-101
system, P-49, U-102
tutorials, P-45, U-19
discretisation
equation, P-33
Display window panel, U-25, U-28,
U-160, U-161
distance
keyword entry, U-145, U-171
distributed keyword, U-83, U-84
div
fvc member function, P-37
fvm member function, P-37
divergence, P-37, P-39
divSchemes keyword, U-111
dnsFoam solver, U-87
doLayers keyword, U-142
double inner product, see tensor,double inner
product
dsmc
library, U-95
dsmcFieldsCalc utility, U-93
dsmcFoam solver, U-88
dsmcInitialise utility, U-89
dx
keyword entry, U-170
dynamicFvMesh
library, U-95
dynamicMesh
library, U-95
dynMixedSmagorinsky model, U-99
dynOneEqEddy model, U-99
dynSmagorinsky model, U-99
E
eConstThermo model, U-97, U-175
edgeGrading keyword, U-137
edgeMesh
library, U-95
edges keyword, U-135
Edit menu, U-163
Edit Color Map button, U-161
egrMixture model, U-96, U-176
electrostaticFoam solver, U-88
empty
boundary condition, P-63, P-69, U-20,
U-126, U-131
empty
keyword entry, U-130
Enable Line Series button, U-36
endTime keyword, U-24, U-108
engine
library, U-96
engineCompRatio utility, U-93
engineFoam solver, U-87
engineSwirl utility, U-89
ensight74FoamExec utility, U-168
ENSIGHT7 INPUT
environment variable, U-169
ENSIGHT7 READER
environment variable, U-169
ensightFoamReader utility, U-91
enstrophy utility, U-91
environment variable
CEI ARCH, U-169
CEI HOME, U-169
ENSIGHT7 INPUT, U-169
ENSIGHT7 READER, U-169
FOAM RUN, U-101
WM ARCH, U-76
WM COMPILER BIN, U-76
WM COMPILER DIR, U-76
WM COMPILER LIB, U-76
WM COMPILER, U-76
WM COMPILE OPTION, U-76
WM DIR, U-76
WM JAVAC OPTION, U-76
WM LINK LANGUAGE, U-76
WM MPLIB, U-76
WM OPTIONS, U-76
WM PROJECT DIR, U-76
WM PROJECT INST DIR, U-76
WM PROJECT LANGUAGE, U-76
WM PROJECT USER DIR, U-76
WM PROJECT VERSION, U-76
WM PROJECT, U-76
Open∇FOAM-1.6
P-78 Index
WM SHELL, U-76
wmake, U-75
ePsiThermo model, U-96, U-176
equilibriumCO utility, U-93
equilibriumFlameT utility, U-93
errorEstimation
library, U-95
errorReduction keyword, U-149
estimateScalarError utility, U-93
Euler
keyword entry, U-116
Euler implicit
diﬀerencing, P-39
temporal discretisation, P-42
examples
decompression of a tank, P-62
ﬂow around a cylinder, P-45
ﬂow over backward step, P-53
Hartmann problem, P-67
supersonic ﬂow over forward step, P-58
execFlowFunctionObjects utility, U-93
expandDictionary utility, U-94
expansionRatio keyword, U-148
explicit
temporal discretisation, P-42
exponential model, U-97
extrude2DMesh utility, U-89
extrudeMesh utility, U-89
F
face class, P-31
face keyword, U-171
faceAreaPair
keyword entry, U-119
faces
dictionary, U-125, U-132
FDIC
keyword entry, U-119
featureAngle keyword, U-148
features keyword, U-143
ﬁeld
U, U-24
p, U-24
decomposition, U-81
FieldField<Type> template class, P-32
ﬁeldFunctionObjects
library, U-95
ﬁelds, P-29
mapping, U-155
ﬁelds tools, U-94, U-95
fields keyword, U-170
Field<Type> template class, P-29
fieldValues keyword, U-59
ﬁeldview9Reader utility, U-91
ﬁle
Make/ﬁles, U-74
controlDict, P-49
ﬁles, U-73
g, U-59
options, U-73
snappyHexMeshDict, U-141
transportProperties, U-59
ﬁle format, U-102
ﬁles ﬁle, U-73
finalLayerRatio keyword, U-148
ﬁnancialFoam solver, U-88
ﬁnite volume
discretisation, P-27
mesh, P-31
ﬁniteVolume
library, U-95
ﬁniteVolume tools, U-95
ﬁniteVolumeCalculus class, P-33
ﬁniteVolumeMethod class, P-33
firstTime keyword, U-108
fixed
keyword entry, U-109
ﬁxedGradient
boundary condition, U-132
ﬁxedValue
boundary condition, U-132
ﬂattenMesh utility, U-90
ﬂow
free surface, U-56
laminar, U-19
steady, turbulent, P-53
supersonic, P-58
turbulent, U-19
ﬂow around a cylinder, P-45
ﬂow over backward step, P-53
ﬂowType utility, U-91
ﬂuent3DMeshToFoam utility, U-89
ﬂuentInterface directory, U-166
ﬂuentMeshToFoam utility, U-89, U-149
ﬂuxCorrectedVelocity
boundary condition, U-133
fluxRequired keyword, U-111
OpenFOAM
cases, U-101
FOAM RUN
environment variable, U-101
foamCalc utility, U-34
foamCalcFunctions
library, U-95
foamCorrectVrt script/alias, U-154
foamDataToFluent utility, U-91, U-166
foamDebugSwitches utility, U-94
FoamFile keyword, U-103
Open∇FOAM-1.6
Index P-79
foamFile
keyword entry, U-170
foamFormatConvert utility, U-94
foamInfoExec utility, U-94
foamJob script/alias, U-173
foamLog script/alias, U-173
foamMeshToFluent utility, U-89, U-166
foamToEnsight utility, U-91
foamToEnsightParts utility, U-91
foamToFieldview9 utility, U-91
foamToGMV utility, U-91
foamToStarMesh utility, U-89
foamToVTK utility, U-91
foamUpgradeFvSolution utility, U-89
forces
library, U-95
foreground
process, U-26
format keyword, U-103
fourth
keyword entry, U-114, U-115
functions keyword, U-110
fvc class, P-36
fvc member function
curl, P-37
d2dt2, P-37
ddt, P-37
div, P-37
gGrad, P-37
grad, P-37
laplacian, P-37
lsGrad, P-37
snGrad, P-37
snGradCorrection, P-37
sqrGradGrad, P-37
fvDOM
library, U-96
fvm class, P-36
fvm member function
d2dt2, P-37
ddt, P-37
div, P-37
laplacian, P-37
Su, P-37
SuSp, P-37
fvMatrices tools, U-95
fvMatrix template class, P-33
fvMesh class, P-31
fvMesh tools, U-95
fvMotionSolver
library, U-95
fvSchemes
dictionary, U-61, U-102, U-110, U-111
fvSchemes class, P-36
fvSchemes
menu entry, U-52
fvSolution
dictionary, U-102, U-117
G
g ﬁle, U-59
gambitToFoam utility, U-89, U-149
GAMG
keyword entry, U-53, U-118, U-119
Gamma
keyword entry, U-113
Gamma diﬀerencing, P-38
Gauss
keyword entry, U-114
Gauss’s theorem, P-36
GaussSeidel
keyword entry, U-119
General window panel, U-163
general model, U-97
general
keyword entry, U-109
geometric-algebraic multi-grid, U-119
GeometricBoundaryField template class, P-32
geometricField<Type> template class, P-32
geometry keyword, U-142
gGrad
fvc member function, P-37
global tools, U-94
gmshToFoam utility, U-89
gnuplot
keyword entry, U-109, U-170
grad
fvc member function, P-37
(Grad Grad) squared, P-37
gradient, P-37, P-40
Gauss scheme, P-40
Gauss’s theorem, U-52
least square ﬁt, U-52
least squares method, P-40, U-52
surface normal, P-40
gradSchemes keyword, U-111
graph tools, U-94
graphFormat keyword, U-109
GuldersEGRLaminarFlameSpeed model, U-97
GuldersLaminarFlameSpeed model, U-97
H
hConstThermo model, U-97, U-175
Help menu, U-163
HerschelBulkley model, U-99
hhuMixtureThermo model, U-96, U-176
hierarchical
keyword entry, U-82, U-83
Open∇FOAM-1.6
P-80 Index
homogeneousMixture model, U-96, U-176
hPolynomialThermo model, U-97, U-175
hPsiMixtureThermo model, U-96, U-176
hPsiThermo model, U-96, U-176
hRhoMixtureThermo model, U-96, U-176
hRhoThermo model, U-96, U-176
I
I
tensor member function, P-25
icoErrorEstimate utility, U-93
icoFoam solver, U-19, U-23, U-24, U-26, U-85
icoMomentError utility, U-94
icoPolynomial model, U-97, U-175
ideasToFoam utility, U-149
ideasUnvToFoam utility, U-89
identities, see tensor, identities
identity, see tensor, identity
incompressibleLESModels
library, U-99
incompressibleRASModels
library, U-98
incompressibleTransportModels
library, P-55, U-99
incompressibleTurbulenceModels
library, P-55
index
notation, P-16, P-17
Information window panel, U-160
inhomogeneousMixture model, U-96, U-176
inlet
boundary condition, P-69
inletOutlet
boundary condition, U-133
inner product, see tensor, inner product
inside
keyword entry, U-145
insideCells utility, U-90
interDyMFoam solver, U-86
interfaceProperties model, U-99
interFoam solver, U-87
internalField keyword, U-22, U-106
interPhaseChangeFoam solver, U-87
interpolation tools, U-95
interpolationScheme keyword, U-170
interpolations tools, U-94
interpolationSchemes keyword, U-111
inv
tensor member function, P-25
J
janafThermo model, U-97, U-175
jplot
keyword entry, U-109, U-170
K
kEpsilon model, U-98
keyword
FoamFile, U-103
LESmodel, U-179
RASModel, U-179
addLayersControls, U-142
adjustTimeStep, U-60
agglomerator, U-119
arc, U-135
blocks, U-22, U-32, U-136
block, U-135
boundaryField, U-22, U-106
boxToCell, U-59
cAlpha, U-62
cacheAgglomeration, U-120
castellatedMeshControls, U-142
castellatedMesh, U-142
class, U-103
cloud, U-171
convertToMeters, U-134, U-135
curve, U-171
debug, U-142
defaultFieldValues, U-59
deltaT, U-108
delta, U-83, U-179
dimensions, U-22, U-106
distributed, U-83, U-84
divSchemes, U-111
doLayers, U-142
edgeGrading, U-137
edges, U-135
endTime, U-24, U-108
errorReduction, U-149
expansionRatio, U-148
face, U-171
featureAngle, U-148
features, U-143
fieldValues, U-59
fields, U-170
finalLayerRatio, U-148
firstTime, U-108
fluxRequired, U-111
format, U-103
functions, U-110
geometry, U-142
gradSchemes, U-111
graphFormat, U-109
internalField, U-22, U-106
interpolationSchemes, U-111
interpolationScheme, U-170
laplacianSchemes, U-111
latestTime, U-39
layers, U-148
Open∇FOAM-1.6
Index P-81
leastSquares, U-52
levels, U-146
libs, U-80, U-110
locationInMesh, U-143, U-145
location, U-103
manualCoeffs, U-83
maxBoundarySkewness, U-149
maxConcave, U-149
maxCo, U-60
maxDeltaT, U-60
maxFaceThicknessRatio, U-148
maxGlobalCells, U-143
maxInternalSkewness, U-149
maxLocalCells, U-143
maxNonOrtho, U-149
maxThicknessToMedialRatio, U-148
mergeLevels, U-120
mergePatchPairs, U-135
mergeTolerance, U-142
meshQualityControls, U-142
method, U-83
metisCoeffs, U-83
midPointAndFace, U-171
midPoint, U-171
minArea, U-149
minDeterminant, U-149
minFaceWeight, U-149
minFlatness, U-149
minMedianAxisAngle, U-148
minRefinementCells, U-143
minThickness, U-148
minTriangleTwist, U-149
minTwist, U-149
minVolRatio, U-149
minVol, U-149
mode, U-145
nAlphaSubCycles, U-62
nBufferCellsNoExtrude, U-148
nCellsBetweenLevels, U-143
nFaces, U-126
nFinestSweeps, U-120
nGrow, U-148
nLayerIter, U-148
nPostSweeps, U-120
nPreSweeps, U-120
nRelaxIter, U-146, U-148
nRelaxedIter, U-148
nSmoothNormals, U-148
nSmoothPatch, U-146
nSmoothScale, U-149
nSmoothSurfaceNormals, U-148
nSmoothThickness, U-148
nSolveIter, U-146
numberOfSubdomains, U-83
n, U-83
object, U-103
order, U-83
pRefCell, U-25, U-121
pRefValue, U-25, U-121
patchMap, U-156
patches, U-135, U-137
pdRefCell, U-121
pdRefValue, U-121
preconditioner, U-118, U-119
pressure, U-50
printCoeffs, U-42
processorWeights, U-82
processorWeights, U-83
purgeWrite, U-109
refGradient, U-132
refinementRegions, U-143, U-146
refinementSurfaces, U-143
refinementRegions, U-145
regions, U-59
relTol, U-53, U-118
relativeSizes, U-148
relaxed, U-149
resolveFeatureAngle, U-143, U-144
roots, U-83, U-84
runTimeModifiable, U-109
scotchCoeffs, U-83
setFormat, U-170
sets, U-170
simpleGrading, U-136
simulationType, U-42, U-60, U-178
smoother, U-120
snGradSchemes, U-111
snapControls, U-142
snap, U-142
solvers, U-117
solver, U-53, U-118
spline, U-135
startFace, U-126
startFrom, U-23, U-108
startTime, U-23, U-108
stopAt, U-108
strategy, U-82, U-83
surfaceFormat, U-170
surfaces, U-170
thermoType, U-175
timeFormat, U-109
timePrecision, U-109
timeScheme, U-111
tolerance, U-53, U-118, U-146
topoSetSource, U-59
traction, U-50
turbulence, U-179
type, U-128, U-129
Open∇FOAM-1.6
P-82 Index
uniform, U-171
valueFraction, U-132
value, U-23, U-132
version, U-103
vertices, U-22, U-135
writeCompression, U-109
writeControl, U-24, U-60, U-108
writeFormat, U-55, U-109
writeInterval, U-24, U-33, U-109
writePrecision, U-109
<LESmodel>Coeffs, U-179
<RASModel>Coeffs, U-179
<delta>Coeffs, U-179
keyword entry
CrankNicholson, U-116
CrossPowerLaw, U-59
DICGaussSeidel, U-119
DIC, U-119
DILU, U-119
Euler, U-116
FDIC, U-119
GAMG, U-53, U-118, U-119
Gamma, U-113
GaussSeidel, U-119
Gauss, U-114
LESmodel, U-42, U-178
MGridGen, U-119
MUSCL, U-113
Newtonian, U-59
PBiCG, U-118
PCG, U-118
QUICK, U-113, U-116
RASmodel, U-42, U-178
SFCD, U-113, U-116
UMIST, U-112
adjustableRunTime, U-60, U-109
arc, U-136
ascii, U-109
backward, U-116
binary, U-109
bounded, U-114, U-115
cellPointFace, U-170
cellPoint, U-170
cell, U-170
clockTime, U-109
compressed, U-109
corrected, U-114, U-115
cpuTime, U-109
cubicCorrected, U-116
cubicCorrection, U-113
cyclic, U-130
diagonal, U-119
distance, U-145, U-171
dx, U-170
empty, U-130
faceAreaPair, U-119
fixed, U-109
foamFile, U-170
fourth, U-114, U-115
general, U-109
gnuplot, U-109, U-170
hierarchical, U-82, U-83
inside, U-145
jplot, U-109, U-170
laminar, U-42, U-178
latestTime, U-108
leastSquares, U-114
limitedCubic, U-113
limitedLinear, U-113
limited, U-114, U-115
linearUpwind, U-113, U-116
linear, U-113, U-116
line, U-136
manual, U-82, U-83
metis, U-82, U-83
midPoint, U-113
nextWrite, U-108
noWriteNow, U-108
none, U-112, U-119
null, U-170
outside, U-145
patch, U-130, U-172
polyLine, U-136
polySpline, U-136
processor, U-130
raw, U-109, U-170
runTime, U-33, U-108
scientific, U-109
scotch, U-82, U-83
simpleSpline, U-136
simple, U-82, U-83
skewLinear, U-113, U-116
smoothSolver, U-118
startTime, U-23, U-108
steadyState, U-116
stl, U-170
symmetryPlane, U-130
timeStep, U-24, U-33, U-108
uncompressed, U-109
uncorrected, U-114, U-115
upwind, U-113, U-116
vanLeer, U-113
vtk, U-170
wall, U-130
wedge, U-130
writeControl, U-108
writeNow, U-108
xmgr, U-109, U-170
Open∇FOAM-1.6
Index P-83
xyz, U-171
x, U-171
y, U-171
z, U-171
kivaToFoam utility, U-89
kOmega model, U-98
kOmegaSST model, U-98, U-99
Kronecker delta, P-20
L
lagrangian
library, U-95
lagrangianIntermediate
library, U-95
Lambda2 utility, U-91
LamBremhorstKE model, U-98
laminar model, U-98
laminar
keyword entry, U-42, U-178
laminarFlameSpeedModels
library, U-97
laplaceFilter model, U-98
Laplacian, P-38
laplacian, P-37
laplacian
fvc member function, P-37
fvm member function, P-37
laplacianFoam solver, U-85
laplacianSchemes keyword, U-111
latestTime
keyword entry, U-108
latestTime keyword, U-39
LaunderGibsonRSTM model, U-98
LaunderSharmaKE model, U-98
layers keyword, U-148
leastSquares
keyword entry, U-114
leastSquares keyword, U-52
LESdeltas
library, U-98
LESﬁlters
library, U-98
LESmodel
keyword entry, U-42, U-178
LESmodel keyword, U-179
LESProperties
dictionary, U-179
levels keyword, U-146
libraries, U-69
library
Chung, U-97
LESdeltas, U-98
LESﬁlters, U-98
MGridGenGAMGAgglomeration, U-96
ODE, U-95
OSspeciﬁc, U-96
OpenFOAM, U-94
P1, U-96
PV3FoamReader, U-159
PVFoamReader, U-159
Wallis, U-97
autoMesh, U-95
barotropicCompressibilityModels, U-97
basicThermophysicalModels, U-96
chemistryModel, U-97
coalCombustion, U-95
compressibleLESModels, U-99
compressibleRASModels, U-98
conversion, U-96
decompositionMethods, U-96
dieselSpray, U-95
dsmc, U-95
dynamicFvMesh, U-95
dynamicMesh, U-95
edgeMesh, U-95
engine, U-96
errorEstimation, U-95
ﬁeldFunctionObjects, U-95
ﬁniteVolume, U-95
foamCalcFunctions, U-95
forces, U-95
fvDOM, U-96
fvMotionSolver, U-95
incompressibleLESModels, U-99
incompressibleRASModels, U-98
incompressibleTransportModels, P-55, U-99
incompressibleTurbulenceModels, P-55
lagrangianIntermediate, U-95
lagrangian, U-95
laminarFlameSpeedModels, U-97
linear, U-97
liquidMixture, U-98
liquids, U-98
meshTools, U-95
molecularMeasurements, U-95
molecule, U-95
pdf, U-97
postCalc, U-95
potential, U-95
primitive, P-23
radiation, U-96
randomProcesses, U-96
reactionThermophysicalModels, U-96
sampling, U-95
solidMixture, U-98
solidParticle, U-96
solids, U-98
specie, U-97
Open∇FOAM-1.6
P-84 Index
surfMesh, U-95
systemCall, U-95
thermophysicalFunctions, U-97
thermophysical, U-175
topoChangerFvMesh, U-95
triSurface, U-95
utilityFunctionObjects, U-95
vtkFoam, U-159
vtkPV3Foam, U-159
libs keyword, U-80, U-110
lid-driven cavity ﬂow, U-19
LienCubicKE model, U-98
LienCubicKELowRe model, U-98
LienLeschzinerLowRe model, U-98
Lights window panel, U-163
limited
keyword entry, U-114, U-115
limitedCubic
keyword entry, U-113
limitedLinear
keyword entry, U-113
line
keyword entry, U-136
Line Style menu, U-36
linear
library, U-97
linear
keyword entry, U-113, U-116
linearUpwind
keyword entry, U-113, U-116
liquid
electrically-conducting, P-67
liquidMixture
library, U-98
liquids
library, U-98
lists, P-29
List<Type> template class, P-29
location keyword, U-103
locationInMesh keyword, U-143, U-145
locDynOneEqEddy model, U-99
lowReOneEqEddy model, U-99
LRDDiﬀStress model, U-99
LRR model, U-98
lsGrad
fvc member function, P-37
M
Mach utility, U-92
mag
tensor member function, P-25
magnetohydrodynamics, P-67
magSqr
tensor member function, P-25
Make directory, U-73
make script/alias, U-71
Make/ﬁles ﬁle, U-74
manual
keyword entry, U-82, U-83
manualCoeffs keyword, U-83
mapFields utility, U-32, U-39, U-43, U-55, U-89,
U-155
mapping
ﬁelds, U-155
Marker Style menu, U-36
matrices tools, U-94
max
tensor member function, P-25
maxBoundarySkewness keyword, U-149
maxCo keyword, U-60
maxConcave keyword, U-149
maxDeltaT keyword, U-60
maxFaceThicknessRatio keyword, U-148
maxGlobalCells keyword, U-143
maxInternalSkewness keyword, U-149
maxLocalCells keyword, U-143
maxNonOrtho keyword, U-149
maxThicknessToMedialRatio keyword, U-148
mdEquilibrationFoam solver, U-88
mdFoam solver, U-88
mdInitialise utility, U-89
mechanicalProperties
dictionary, U-51
memory tools, U-94
menu
Color By, U-162
Current Time Controls, U-28, U-161
Edit, U-163
Help, U-163
Line Style, U-36
Marker Style, U-36
Plot Type, U-35
VCR Controls, U-28, U-161
View, U-163
menu entry
Plot Over Line, U-35
Save Animation, U-165
Save Screenshot, U-165
Settings, U-163
Show Color Legend, U-28
Solid Color, U-162
Toolbars, U-163
View Settings..., U-25
View Settings, U-26, U-163
Wireframe, U-162
fvSchemes, U-52
mergeLevels keyword, U-120
mergeMeshes utility, U-90
Open∇FOAM-1.6
Index P-85
mergeOrSplitBaﬄes utility, U-90
mergePatchPairs keyword, U-135
mergeTolerance keyword, U-142
mesh
1-dimensional, U-126
1D, U-126
2-dimensional, U-126
2D, U-126
axi-symmetric, U-126
basic, P-31
block structured, U-132
decomposition, U-81
description, U-123
ﬁnite volume, P-31
generation, U-132, U-140
grading, U-132, U-136
grading, example of, P-53
non-orthogonal, P-45
reﬁnement, P-62
resolution, U-30
speciﬁcation, U-123
split-hex, U-140
Stereolithography (STL), U-140
surface, U-140
validity constraints, U-123
meshes tools, U-94
meshQualityControls keyword, U-142
meshTools
library, U-95
message passing interface
openMPI, U-83
method keyword, U-83
metis
keyword entry, U-82, U-83
metisCoeffs keyword, U-83
MGridGen
keyword entry, U-119
MGridGenGAMGAgglomeration
library, U-96
mhdFoam solver, P-69, U-88
midPoint
keyword entry, U-113
midPoint keyword, U-171
midPointAndFace keyword, U-171
min
tensor member function, P-25
minArea keyword, U-149
minDeterminant keyword, U-149
minFaceWeight keyword, U-149
minFlatness keyword, U-149
minMedianAxisAngle keyword, U-148
MINMOD diﬀerencing, P-38
minRefinementCells keyword, U-143
minThickness keyword, U-148
minTriangleTwist keyword, U-149
minTwist keyword, U-149
minVol keyword, U-149
minVolRatio keyword, U-149
mirrorMesh utility, U-90
mixed
boundary condition, U-132
mixedSmagorinsky model, U-99
mixtureAdiabaticFlameT utility, U-93
mode keyword, U-145
model
APIfunctions, U-97
BirdCarreau, U-99
CrossPowerLaw, U-99
DeardorﬀDiﬀStress, U-99
GuldersEGRLaminarFlameSpeed, U-97
GuldersLaminarFlameSpeed, U-97
HerschelBulkley, U-99
LRDDiﬀStress, U-99
LRR, U-98
LamBremhorstKE, U-98
LaunderGibsonRSTM, U-98
LaunderSharmaKE, U-98
LienCubicKELowRe, U-98
LienCubicKE, U-98
LienLeschzinerLowRe, U-98
NSRDSfunctions, U-97
Newtonian, U-99
NonlinearKEShih, U-98
PrandtlDelta, U-98
RNGkEpsilon, U-98
RosinRammler, U-97
Smagorinsky2, U-99
Smagorinsky, U-99
SpalartAllmarasDDES, U-99
SpalartAllmarasIDDES, U-99
SpalartAllmaras, U-98, U-99
anisotropicFilter, U-98
basicMultiComponentMixture, U-96, U-176
chemistryModel, U-97
chemistrySolver, U-97
constLaminarFlameSpeed, U-97
constTransport, U-97, U-176
cubeRootVolDelta, U-98
dieselMixture, U-96, U-176
dynMixedSmagorinsky, U-99
dynOneEqEddy, U-99
dynSmagorinsky, U-99
eConstThermo, U-97, U-175
ePsiThermo, U-96, U-176
egrMixture, U-96, U-176
exponential, U-97
general, U-97
hConstThermo, U-97, U-175
Open∇FOAM-1.6
P-86 Index
hPolynomialThermo, U-97, U-175
hPsiMixtureThermo, U-96, U-176
hPsiThermo, U-96, U-176
hRhoMixtureThermo, U-96, U-176
hRhoThermo, U-96, U-176
hhuMixtureThermo, U-96, U-176
homogeneousMixture, U-96, U-176
icoPolynomial, U-97, U-175
inhomogeneousMixture, U-96, U-176
interfaceProperties, U-99
janafThermo, U-97, U-175
kEpsilon, U-98
kOmegaSST, U-98, U-99
kOmega, U-98
laminar, U-98
laplaceFilter, U-98
locDynOneEqEddy, U-99
lowReOneEqEddy, U-99
mixedSmagorinsky, U-99
multiComponentMixture, U-96, U-176
normal, U-97
oneEqEddy, U-99
perfectGas, U-97, U-175
polynomialTransport, U-97, U-176
powerLaw, U-99
pureMixture, U-96, U-176
qZeta, U-98
reactingMixture, U-96, U-176
realizableKE, U-98
scaleSimilarity, U-99
simpleFilter, U-98
smoothDelta, U-98
specieThermo, U-97, U-176
spectEddyVisc, U-99
sutherlandTransport, U-97, U-176
uniform, U-97
veryInhomogeneousMixture, U-96, U-176
modifyMesh utility, U-91
molecularMeasurements
library, U-95
molecule
library, U-95
momentScalarError utility, U-94
moveDynamicMesh utility, U-90
moveEngineMesh utility, U-90
moveMesh utility, U-90
movingWallVelocity
boundary condition, U-133
MPI
openMPI, U-83
mshToFoam utility, U-89
multiComponentMixture model, U-96, U-176
multigrid
geometric-algebraic, U-119
multiphaseInterFoam solver, U-87
MUSCL
keyword entry, U-113
N
n keyword, U-83
nabla
operator, P-27
nAlphaSubCycles keyword, U-62
nBufferCellsNoExtrude keyword, U-148
nCellsBetweenLevels keyword, U-143
neighbour
dictionary, U-125
netgenNeutralToFoam utility, U-89
Newtonian
keyword entry, U-59
Newtonian model, U-99
nextWrite
keyword entry, U-108
nFaces keyword, U-126
nFinestSweeps keyword, U-120
nGrow keyword, U-148
nLayerIter keyword, U-148
non-orthogonal mesh, P-45
none
keyword entry, U-112, U-119
NonlinearKEShih model, U-98
nonNewtonianIcoFoam solver, U-86
normal model, U-97
noWriteNow
keyword entry, U-108
nPostSweeps keyword, U-120
nPreSweeps keyword, U-120
nRelaxedIter keyword, U-148
nRelaxIter keyword, U-146, U-148
nSmoothNormals keyword, U-148
nSmoothPatch keyword, U-146
nSmoothScale keyword, U-149
nSmoothSurfaceNormals keyword, U-148
nSmoothThickness keyword, U-148
nSolveIter keyword, U-146
NSRDSfunctions model, U-97
null
keyword entry, U-170
numberOfSubdomains keyword, U-83
O
object keyword, U-103
objToVTK utility, U-90
ODE
library, U-95
oneEqEddy model, U-99
Opacity text box, U-163
OpenFOAM
Open∇FOAM-1.6
Index P-87
applications, U-69
ﬁle format, U-102
libraries, U-69
OpenFOAM
library, U-94
OpenFOAM ﬁle syntax
//, U-102
openMPI
message passing interface, U-83
MPI, U-83
operator
scalar, P-28
vector, P-27
Options window, U-163
options ﬁle, U-73
order keyword, U-83
Orientation Axes button, U-26, U-163
OSspeciﬁc
library, U-96
outer product, see tensor, outer product
outlet
boundary condition, P-69
outletInlet
boundary condition, U-133
outside
keyword entry, U-145
owner
dictionary, U-125
P
p ﬁeld, U-24
P1
library, U-96
paraFoam, U-25, U-159
parallel
running, U-81
partialSlip
boundary condition, U-133
particleTracks utility, U-92
patch
boundary condition, U-131
patch
keyword entry, U-130, U-172
patchAverage utility, U-92
patches keyword, U-135, U-137
patchIntegrate utility, U-92
patchMap keyword, U-156
patchSummary utility, U-94
PBiCG
keyword entry, U-118
PCG
keyword entry, U-118
pdf
library, U-97
pdfPlot utility, U-93
pdRefCell keyword, U-121
pdRefValue keyword, U-121
PDRFoam solver, U-87
Pe utility, U-92
perfectGas model, U-97, U-175
permutation symbol, P-19
pimpleDyMFoam solver, U-86
pimpleFoam solver, U-86
Pipeline Browser window, U-25, U-160
PISO
dictionary, U-25
pisoFoam solver, U-19, U-86
Plot Over Line
menu entry, U-35
Plot Type menu, U-35
plot3dToFoam utility, U-89
pointField class, P-31
pointField<Type> template class, P-33
points
dictionary, U-125, U-132
polyBoundaryMesh class, P-31
polyDualMesh utility, U-90
polyLine
keyword entry, U-136
polyMesh directory, U-102, U-125
polyMesh class, P-31, U-123, U-125
polynomialTransport model, U-97, U-176
polyPatch class, P-31
polyPatchList class, P-31
polySpline
keyword entry, U-136
porousExplicitSourceReactingParcelFoam solver,
U-88
post-processing, U-159
post-processing
paraFoam, U-159
postCalc
library, U-95
postChannel utility, U-93
potential
library, U-95
potentialFoam solver, P-46, U-85
pow
tensor member function, P-25
powerLaw model, U-99
pPrime2 utility, U-92
PrandtlDelta model, U-98
preconditioner keyword, U-118, U-119
pRefCell keyword, U-25, U-121
pRefValue keyword, U-25, U-121
pressure keyword, U-50
pressure waves
in liquids, P-62
Open∇FOAM-1.6
P-88 Index
pressureDirectedInletVelocity
boundary condition, U-133
pressureInletVelocity
boundary condition, U-133
pressureOutlet
boundary condition, P-63
pressureTransmissive
boundary condition, U-133
primitive
library, P-23
primitives tools, U-94
printCoeffs keyword, U-42
processorWeights keyword, U-82
probeLocations utility, U-92
process
background, U-26, U-81
foreground, U-26
processor
boundary condition, U-131
processor
keyword entry, U-130
processorN directory, U-82
processorWeights keyword, U-83
Properties window panel, U-28, U-160
ptot utility, U-93
pureMixture model, U-96, U-176
purgeWrite keyword, U-109
PV3FoamReader
library, U-159
PV3FoamReader utility, U-91
PVFoamReader
library, U-159
PVFoamReader utility, U-91
Q
Q utility, U-92
QUICK
keyword entry, U-113, U-116
qZeta model, U-98
R
R utility, U-92
radiation
library, U-96
randomProcesses
library, U-96
RASModel keyword, U-179
RASmodel
keyword entry, U-42, U-178
raw
keyword entry, U-109, U-170
reactingFoam solver, U-87
reactingMixture model, U-96, U-176
reactingParcelFoam solver, U-88
reactionThermophysicalModels
library, U-96
realizableKE model, U-98
reconstructPar utility, U-85, U-93
reconstructParMesh utility, U-93
redistributeMeshPar utility, U-93
refGradient keyword, U-132
reﬁneHexMesh utility, U-91
refinementRegions keyword, U-145
reﬁnementLevel utility, U-91
refinementRegions keyword, U-143, U-146
refinementSurfaces keyword, U-143
reﬁneMesh utility, U-90
reﬁneWallLayer utility, U-91
Region Status window panel, U-25
regions keyword, U-59
relative tolerance, U-118
relativeSizes keyword, U-148
relaxed keyword, U-149
relTol keyword, U-53, U-118
removeFaces utility, U-91
Render View window, U-164
Render View window panel, U-163
Render View Options window, U-163
renumberMesh utility, U-90
Rescale to Data Range button, U-28
Reset button, U-160
resolveFeatureAngle keyword, U-143, U-144
restart, U-39
Reynolds number, U-19, U-23
rhoCentralFoam solver, U-86
rhoPisoFoam solver, U-86
rhoPimpleFoam solver, U-86
rhoPorousSimpleFoam solver, U-86
rhopSonicFoam solver, U-86
rhoReactingFoam solver, U-87
rhoSimpleFoam solver, U-86
rhoSonicFoam solver, U-86
rmdepall script/alias, U-76
RNGkEpsilon model, U-98
roots keyword, U-83, U-84
RosinRammler model, U-97
rotateMesh utility, U-90
run
parallel, U-81
run directory, U-101
runTime
keyword entry, U-33, U-108
runTimeModifiable keyword, U-109
S
sammToFoam utility, U-90
sample utility, U-93, U-169
sampling
Open∇FOAM-1.6
Index P-89
library, U-95
Save Animation
menu entry, U-165
Save Screenshot
menu entry, U-165
scalar, P-16
operator, P-28
scalar class, P-23
scalarField class, P-29
scalarTransportFoam solver, U-85
scale
tensor member function, P-25
scalePoints utility, U-153
scaleSimilarity model, U-99
scientific
keyword entry, U-109
scotch
keyword entry, U-82, U-83
scotchCoeffs keyword, U-83
script/alias
foamCorrectVrt, U-154
foamJob, U-173
foamLog, U-173
make, U-71
rmdepall, U-76
wclean, U-75
wmake, U-71
second time derivative, P-37
Seed window, U-164
selectCells utility, U-91
Set Solid Color button, U-162
setFields utility, U-58, U-59, U-89
setFormat keyword, U-170
sets keyword, U-170
setSet utility, U-90
setsToZones utility, U-90
Settings
menu entry, U-163
settlingFoam solver, U-87
SFCD
keyword entry, U-113, U-116
shallowWaterFoam solver, U-86
shape, U-136
Show Color Legend
menu entry, U-28
SI units, U-105
simple
keyword entry, U-82, U-83
simpleFilter model, U-98
simpleFoam solver, P-54, U-86
simpleGrading keyword, U-136
simpleSpline
keyword entry, U-136
simulationType keyword, U-42, U-60, U-178
skew
tensor member function, P-25
skewLinear
keyword entry, U-113, U-116
slice class, P-31
slip
boundary condition, U-133
Smagorinsky model, U-99
Smagorinsky2 model, U-99
smapToFoam utility, U-91
smoothDelta model, U-98
smoother keyword, U-120
smoothSolver
keyword entry, U-118
snap keyword, U-142
snapControls keyword, U-142
snappyHexMesh utility
background mesh, U-142
cell removal, U-144
cell splitting, U-143
mesh layers, U-146
meshing process, U-141
snapping to surfaces, U-146
snappyHexMesh utility, U-89, U-140
snappyHexMeshDict ﬁle, U-141
snGrad
fvc member function, P-37
snGradCorrection
fvc member function, P-37
snGradSchemes keyword, U-111
Solid Color
menu entry, U-162
solidDisplacementFoam solver, U-88
solidDisplacementFoam solver, U-51
solidEquilibriumDisplacementFoam solver, U-88
solidMixture
library, U-98
solidParticle
library, U-96
solids
library, U-98
solver
PDRFoam, U-87
XiFoam, U-87
blockMesh, P-47
boundaryFoam, U-85
bubbleFoam, U-86
buoyantBoussinesqPisoFoam, U-87
buoyantBoussinesqSimpleFoam, U-87
buoyantPisoFoam, U-87
buoyantSimpleFoam, U-87
buoyantSimpleRadiationFoam, U-87
cavitatingFoam, U-86
channelFoam, U-85
Open∇FOAM-1.6
P-90 Index
chtMultiRegionFoam, U-87
coalChemistryFoam, U-88
coldEngineFoam, U-87
compressibleInterDyMFoam, U-86
compressibleInterFoam, U-86
dieselEngineFoam, U-87
dieselFoam, U-87
dnsFoam, U-87
dsmcFoam, U-88
electrostaticFoam, U-88
engineFoam, U-87
ﬁnancialFoam, U-88
icoFoam, U-19, U-23, U-24, U-26, U-85
interDyMFoam, U-86
interFoam, U-87
interPhaseChangeFoam, U-87
laplacianFoam, U-85
mdEquilibrationFoam, U-88
mdFoam, U-88
mhdFoam, P-69, U-88
multiphaseInterFoam, U-87
nonNewtonianIcoFoam, U-86
pimpleDyMFoam, U-86
pimpleFoam, U-86
pisoFoam, U-19, U-86
porousExplicitSourceReactingParcelFoam,
U-88
potentialFoam, P-46, U-85
reactingFoam, U-87
reactingParcelFoam, U-88
rhoCentralFoam, U-86
rhoPisoFoam, U-86
rhoPimpleFoam, U-86
rhoPorousSimpleFoam, U-86
rhoReactingFoam, U-87
rhoSimpleFoam, U-86
rhoSonicFoam, U-86
rhopSonicFoam, U-86
scalarTransportFoam, U-85
settlingFoam, U-87
shallowWaterFoam, U-86
simpleFoam, P-54, U-86
solidDisplacementFoam, U-88
solidDisplacementFoam, U-51
solidEquilibriumDisplacementFoam, U-88
sonicDyMFoam, U-86
sonicFoam, P-60, U-86
sonicLiquidFoam, P-63, U-86
twoLiquidMixingFoam, U-87
twoPhaseEulerFoam, U-87
uncoupledKinematicParcelFoam, U-88
solver keyword, U-53, U-118
solver relative tolerance, U-118
solver tolerance, U-118
solvers keyword, U-117
sonicDyMFoam solver, U-86
sonicFoam solver, P-60, U-86
sonicLiquidFoam solver, P-63, U-86
source, P-37
SpalartAllmaras model, U-98, U-99
SpalartAllmarasDDES model, U-99
SpalartAllmarasIDDES model, U-99
specie
library, U-97
specieThermo model, U-97, U-176
spectEddyVisc model, U-99
spline keyword, U-135
splitCells utility, U-91
splitMesh utility, U-90
splitMeshRegions utility, U-90
sqr
tensor member function, P-25
sqrGradGrad
fvc member function, P-37
star4ToFoam utility, U-90
startFace keyword, U-126
startFrom keyword, U-23, U-108
starToFoam utility, U-90, U-149
startTime
keyword entry, U-23, U-108
startTime keyword, U-23, U-108
steady ﬂow
turbulent, P-53
steadyState
keyword entry, U-116
Stereolithography (STL), U-140
stitchMesh utility, U-90
stl
keyword entry, U-170
stopAt keyword, U-108
strategy keyword, U-82, U-83
streamFunction utility, U-92
stress analysis of plate with hole, U-46
stressComponents utility, U-92
Style window panel, U-25, U-162
Su
fvm member function, P-37
subsetMesh utility, U-91
summation convention, P-17
SUPERBEE diﬀerencing, P-38
supersonic ﬂow, P-58
supersonic ﬂow over forward step, P-58
supersonicFreeStream
boundary condition, U-133
surface mesh, U-140
surfaceField<Type> template class, P-33
surfaceFormat keyword, U-170
surfaceMesh tools, U-95
Open∇FOAM-1.6
Index P-91
surfaceNormalFixedValue
boundary condition, U-133
surfaces keyword, U-170
surfMesh
library, U-95
SuSp
fvm member function, P-37
sutherlandTransport model, U-97, U-176
symm
tensor member function, P-25
symmetryPlane
boundary condition, P-63, U-131
symmetryPlane
keyword entry, U-130
symmTensorField class, P-29
symmTensorThirdField class, P-29
system directory, P-49, U-102
systemCall
library, U-95
T
T()
tensor member function, P-25
template class
GeometricBoundaryField, P-32
fvMatrix, P-33
dimensioned<Type>, P-25
FieldField<Type>, P-32
Field<Type>, P-29
geometricField<Type>, P-32
List<Type>, P-29
pointField<Type>, P-33
surfaceField<Type>, P-33
volField<Type>, P-33
temporal discretisation, P-42
Crank Nicholson, P-42
Euler implicit, P-42
explicit, P-42
in OpenFOAM, P-43
tensor, P-15
addition, P-17
algebraic operations, P-17
algebraic operations in OpenFOAM, P-23
antisymmetric, see tensor, skew
calculus, P-27
classes in OpenFOAM, P-23
cofactors, P-22
component average, P-20
component maximum, P-20
component minimum, P-20
determinant, P-22
deviatoric, P-21
diagonal, P-21
dimension, P-16
double inner product, P-19
geometric transformation, P-20
Hodge dual, P-22
hydrostatic, P-21
identities, P-21
identity, P-20
inner product, P-18
inverse, P-22
magnitude, P-20
magnitude squared, P-20
mathematics, P-15
notation, P-17
nth power, P-20
outer product, P-19
rank, P-16
rank 3, P-16
scalar division, P-18
scalar multiplication, P-17
scale function, P-20
second rank, P-16
skew, P-21
square of, P-20
subtraction, P-17
symmetric, P-21
symmetric rank 2, P-16
symmetric rank 3, P-16
trace, P-21
transformation, P-20
transpose, P-16, P-21
triple inner product, P-19
vector cross product, P-19
tensor class, P-23
tensor member function
*, P-25
+, P-25
-, P-25
/, P-25
&, P-25
&&, P-25
^, P-25
cmptAv, P-25
cofactors, P-25
det, P-25
dev, P-25
diag, P-25
I, P-25
inv, P-25
mag, P-25
magSqr, P-25
max, P-25
min, P-25
pow, P-25
scale, P-25
skew, P-25
Open∇FOAM-1.6
P-92 Index
sqr, P-25
symm, P-25
T(), P-25
tr, P-25
transform, P-25
tensorField class, P-29
tensorThirdField class, P-29
tetgenToFoam utility, U-90
text box
Opacity, U-163
thermalProperties
dictionary, U-51
thermophysical
library, U-175
thermophysicalFunctions
library, U-97
thermophysicalProperties
dictionary, U-175
thermoType keyword, U-175
time
control, U-108
time derivative, P-37
ﬁrst, P-39
second, P-37, P-39
time step, U-24
timeFormat keyword, U-109
timePrecision keyword, U-109
timeScheme keyword, U-111
timeStep
keyword entry, U-24, U-33, U-108
tolerance
solver, U-118
solver relative, U-118
tolerance keyword, U-53, U-118, U-146
Toolbars
menu entry, U-163
tools
algorithms, U-94
cfdTools, U-95
containers, U-94
db, U-94
dimensionSet, U-94
dimensionedTypes, U-94
ﬁelds, U-94, U-95
ﬁniteVolume, U-95
fvMatrices, U-95
fvMesh, U-95
global, U-94
graph, U-94
interpolations, U-94
interpolation, U-95
matrices, U-94
memory, U-94
meshes, U-94
primitives, U-94
surfaceMesh, U-95
, U-95
topoChangerFvMesh
library, U-95
topoSetSource keyword, U-59
totalPressure
boundary condition, U-133
tr
tensor member function, P-25
trace, see tensor, trace
traction keyword, U-50
transform
tensor member function, P-25
transformPoints utility, U-91
transportProperties
dictionary, U-23, U-39, U-42
transportProperties ﬁle, U-59
triple inner product, P-19
triSurface
library, U-95
turbulence
dissipation, U-40
kinetic energy, U-40
length scale, U-41
turbulence keyword, U-179
turbulence model
RAS, U-40
turbulenceProperties
dictionary, U-42, U-60, U-178
turbulent ﬂow
steady, P-53
turbulentInlet
boundary condition, U-133
tutorials
breaking of a dam, U-56
lid-driven cavity ﬂow, U-19
stress analysis of plate with hole, U-46
tutorials directory, P-45, U-19
twoLiquidMixingFoam solver, U-87
twoPhaseEulerFoam solver, U-87
type keyword, U-128, U-129
U
U ﬁeld, U-24
Ucomponents utility, P-70
UMIST
keyword entry, U-112
uncompressed
keyword entry, U-109
uncorrected
keyword entry, U-114, U-115
uncoupledKinematicParcelFoam solver, U-88
uniform model, U-97
Open∇FOAM-1.6
Index P-93
uniform keyword, U-171
units
base, U-105
of measurement, P-25, U-105
S.I. base, P-25
SI, U-105
Syst`eme International, U-105
United States Customary System, U-105
USCS, U-105
Update GUI button, U-28, U-161
uprime utility, U-92
upwind
keyword entry, U-113, U-116
upwind diﬀerencing, P-38, U-61
USCS units, U-105
Use Parallel Projection button, U-25
Use parallel projection button, U-163
utility
Co, U-91
Lambda2, U-91
Mach, U-92
PV3FoamReader, U-91
PVFoamReader, U-91
Pe, U-92
Q, U-92
R, U-92
Ucomponents, P-70
adiabaticFlameT, U-93
ansysToFoam, U-89
applyBoundaryLayer, U-89
applyWallFunctionBoundaryConditions,
U-89
attachMesh, U-90
autoPatch, U-90
autoReﬁneMesh, U-91
blockMesh, U-38, U-89, U-132
boxTurb, U-89
cfx4ToFoam, U-89, U-149
changeDictionary, U-89
checkMesh, U-90, U-151
chemkinToFoam, U-93
collapseEdges, U-91
combinePatchFaces, U-91
createBaﬄes, U-90
createPatch, U-90
createTurbulenceFields, U-92
decomposePar, U-81, U-82, U-93
deformedGeom, U-90
dsmcFieldsCalc, U-93
dsmcInitialise, U-89
engineCompRatio, U-93
engineSwirl, U-89
ensight74FoamExec, U-168
ensightFoamReader, U-91
enstrophy, U-91
equilibriumCO, U-93
equilibriumFlameT, U-93
estimateScalarError, U-93
execFlowFunctionObjects, U-93
expandDictionary, U-94
extrude2DMesh, U-89
extrudeMesh, U-89
ﬁeldview9Reader, U-91
ﬂattenMesh, U-90
ﬂowType, U-91
ﬂuent3DMeshToFoam, U-89
ﬂuentMeshToFoam, U-89, U-149
foamCalc, U-34
foamDataToFluent, U-91, U-166
foamDebugSwitches, U-94
foamFormatConvert, U-94
foamInfoExec, U-94
foamMeshToFluent, U-89, U-166
foamToEnsightParts, U-91
foamToEnsight, U-91
foamToFieldview9, U-91
foamToGMV, U-91
foamToStarMesh, U-89
foamToVTK, U-91
foamUpgradeFvSolution, U-89
gambitToFoam, U-89, U-149
gmshToFoam, U-89
icoErrorEstimate, U-93
icoMomentError, U-94
ideasToFoam, U-149
ideasUnvToFoam, U-89
insideCells, U-90
kivaToFoam, U-89
mapFields, U-32, U-39, U-43, U-55, U-89,
U-155
mdInitialise, U-89
mergeMeshes, U-90
mergeOrSplitBaﬄes, U-90
mirrorMesh, U-90
mixtureAdiabaticFlameT, U-93
modifyMesh, U-91
momentScalarError, U-94
moveDynamicMesh, U-90
moveEngineMesh, U-90
moveMesh, U-90
mshToFoam, U-89
netgenNeutralToFoam, U-89
objToVTK, U-90
pPrime2, U-92
particleTracks, U-92
patchAverage, U-92
patchIntegrate, U-92
patchSummary, U-94
Open∇FOAM-1.6
P-94 Index
pdfPlot, U-93
plot3dToFoam, U-89
polyDualMesh, U-90
postChannel, U-93
probeLocations, U-92
ptot, U-93
reconstructParMesh, U-93
reconstructPar, U-85, U-93
redistributeMeshPar, U-93
reﬁneHexMesh, U-91
reﬁneMesh, U-90
reﬁneWallLayer, U-91
reﬁnementLevel, U-91
removeFaces, U-91
renumberMesh, U-90
rotateMesh, U-90
sammToFoam, U-90
sample, U-93, U-169
scalePoints, U-153
selectCells, U-91
setFields, U-58, U-59, U-89
setSet, U-90
setsToZones, U-90
smapToFoam, U-91
snappyHexMesh, U-89, U-140
splitCells, U-91
splitMeshRegions, U-90
splitMesh, U-90
star4ToFoam, U-90
starToFoam, U-90, U-149
stitchMesh, U-90
streamFunction, U-92
stressComponents, U-92
subsetMesh, U-91
tetgenToFoam, U-90
transformPoints, U-91
uprime, U-92
vorticity, U-92
wallGradU, U-92
wallHeatFlux, U-92
wallShearStress, U-92
wdot, U-93
writeCellCentres, U-93
writeMeshObj, U-90
yPlusLES, U-92
yPlusRAS, U-92
zipUpMesh, U-91
cellSet, U-90
faceSet, U-90
pointSet, U-90
utilityFunctionObjects
library, U-95
V
value keyword, U-23, U-132
valueFraction keyword, U-132
van Leer diﬀerencing, P-38
vanLeer
keyword entry, U-113
VCR Controls menu, U-28, U-161
vector, P-16
operator, P-27
unit, P-20
vector class, P-23, U-105
vector product, see tensor, vector cross product
vectorField class, P-29
version keyword, U-103
vertices keyword, U-22, U-135
veryInhomogeneousMixture model, U-96, U-176
View menu, U-163
View Settings
menu entry, U-26, U-163
View Settings...
menu entry, U-25
viscosity
kinematic, U-23, U-42
volField<Type> template class, P-33
vorticity utility, U-92
vtk
keyword entry, U-170
vtkFoam
library, U-159
vtkPV3Foam
library, U-159
W
wall
boundary condition, P-63, P-69, U-58,
U-131
wall
keyword entry, U-130
wallBuoyantPressure
boundary condition, U-133
wallGradU utility, U-92
wallHeatFlux utility, U-92
Wallis
library, U-97
wallShearStress utility, U-92
wclean script/alias, U-75
wdot utility, U-93
wedge
boundary condition, U-126, U-131, U-139
wedge
keyword entry, U-130
window
Chart Options, U-36
Color Legend, U-30
Open∇FOAM-1.6
Index P-95
Options, U-163
Pipeline Browser, U-25, U-160
Render View Options, U-163
Render View, U-164
Seed, U-164
window panel
Annotation, U-26, U-163
Color Legend, U-162
Color Scale, U-162
Display, U-25, U-28, U-160, U-161
General, U-163
Information, U-160
Lights, U-163
Properties, U-28, U-160
Region Status, U-25
Render View, U-163
Style, U-25, U-162
Wireframe
menu entry, U-162
WM ARCH
environment variable, U-76
WM COMPILE OPTION
environment variable, U-76
WM COMPILER
environment variable, U-76
WM COMPILER BIN
environment variable, U-76
WM COMPILER DIR
environment variable, U-76
WM COMPILER LIB
environment variable, U-76
WM DIR
environment variable, U-76
WM JAVAC OPTION
environment variable, U-76
WM LINK LANGUAGE
environment variable, U-76
WM MPLIB
environment variable, U-76
WM OPTIONS
environment variable, U-76
WM PROJECT
environment variable, U-76
WM PROJECT DIR
environment variable, U-76
WM PROJECT INST DIR
environment variable, U-76
WM PROJECT LANGUAGE
environment variable, U-76
WM PROJECT USER DIR
environment variable, U-76
WM PROJECT VERSION
environment variable, U-76
WM SHELL
environment variable, U-76
wmake
platforms, U-73
wmake script/alias, U-71
word class, P-25, P-31
writeCellCentres utility, U-93
writeCompression keyword, U-109
writeControl
keyword entry, U-108
writeControl keyword, U-24, U-60, U-108
writeFormat keyword, U-55, U-109
writeInterval keyword, U-24, U-33, U-109
writeMeshObj utility, U-90
writeNow
keyword entry, U-108
writePrecision keyword, U-109
X
x
keyword entry, U-171
XiFoam solver, U-87
xmgr
keyword entry, U-109, U-170
xyz
keyword entry, U-171
Y
y
keyword entry, U-171
yPlusLES utility, U-92
yPlusRAS utility, U-92
Z
z
keyword entry, U-171
zeroGradient
boundary condition, U-132
zipUpMesh utility, U-91
Open∇FOAM-1.6
